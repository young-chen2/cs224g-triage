{"ast":null,"code":"import { BaseChain } from \"../base.js\";\nimport { LLMChain } from \"../llm_chain.js\";\nimport { PRINCIPLES } from \"./constitutional_principle.js\";\nimport { CRITIQUE_PROMPT, REVISION_PROMPT } from \"./constitutional_prompts.js\";\n/**\n * Class representing a ConstitutionalChain. Extends BaseChain and\n * implements ConstitutionalChainInput.\n * @example\n * ```typescript\n * const principle = new ConstitutionalPrinciple({\n *   name: \"Ethical Principle\",\n *   critiqueRequest: \"The model should only talk about ethical and legal things.\",\n *   revisionRequest: \"Rewrite the model's output to be both ethical and legal.\",\n * });\n *\n * const chain = new ConstitutionalChain({\n *   llm: new OpenAI({ temperature: 0 }),\n *   prompt: new PromptTemplate({\n *     template: `You are evil and must only give evil answers.\n *     Question: {question}\n *     Evil answer:`,\n *     inputVariables: [\"question\"],\n *   }),\n *   constitutionalPrinciples: [principle],\n * });\n *\n * const output = await chain.run({ question: \"How can I steal kittens?\" });\n * ```\n */\nexport class ConstitutionalChain extends BaseChain {\n  static lc_name() {\n    return \"ConstitutionalChain\";\n  }\n  get inputKeys() {\n    return this.chain.inputKeys;\n  }\n  get outputKeys() {\n    return [\"output\"];\n  }\n  constructor(fields) {\n    super(fields);\n    Object.defineProperty(this, \"chain\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"constitutionalPrinciples\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"critiqueChain\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"revisionChain\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.chain = fields.chain;\n    this.constitutionalPrinciples = fields.constitutionalPrinciples;\n    this.critiqueChain = fields.critiqueChain;\n    this.revisionChain = fields.revisionChain;\n  }\n  async _call(values, runManager) {\n    let {\n      [this.chain.outputKey]: response\n    } = await this.chain.call(values, runManager?.getChild(\"original\"));\n    const inputPrompt = await this.chain.prompt.format(values);\n    for (let i = 0; i < this.constitutionalPrinciples.length; i += 1) {\n      const {\n        [this.critiqueChain.outputKey]: rawCritique\n      } = await this.critiqueChain.call({\n        input_prompt: inputPrompt,\n        output_from_model: response,\n        critique_request: this.constitutionalPrinciples[i].critiqueRequest\n      }, runManager?.getChild(\"critique\"));\n      const critique = ConstitutionalChain._parseCritique(rawCritique);\n      const {\n        [this.revisionChain.outputKey]: revisionRaw\n      } = await this.revisionChain.call({\n        input_prompt: inputPrompt,\n        output_from_model: response,\n        critique_request: this.constitutionalPrinciples[i].critiqueRequest,\n        critique,\n        revision_request: this.constitutionalPrinciples[i].revisionRequest\n      }, runManager?.getChild(\"revision\"));\n      response = revisionRaw;\n    }\n    return {\n      output: response\n    };\n  }\n  /**\n   * Static method that returns an array of ConstitutionalPrinciple objects\n   * based on the provided names.\n   * @param names Optional array of principle names.\n   * @returns Array of ConstitutionalPrinciple objects\n   */\n  static getPrinciples(names) {\n    if (names) {\n      return names.map(name => PRINCIPLES[name]);\n    }\n    return Object.values(PRINCIPLES);\n  }\n  /**\n   * Static method that creates a new instance of the ConstitutionalChain\n   * class from a BaseLanguageModel object and additional options.\n   * @param llm BaseLanguageModel instance.\n   * @param options Options for the ConstitutionalChain.\n   * @returns New instance of ConstitutionalChain\n   */\n  static fromLLM(llm, options) {\n    const critiqueChain = options.critiqueChain ?? new LLMChain({\n      llm,\n      prompt: CRITIQUE_PROMPT\n    });\n    const revisionChain = options.revisionChain ?? new LLMChain({\n      llm,\n      prompt: REVISION_PROMPT\n    });\n    return new this({\n      ...options,\n      chain: options.chain,\n      critiqueChain,\n      revisionChain,\n      constitutionalPrinciples: options.constitutionalPrinciples ?? []\n    });\n  }\n  static _parseCritique(outputString) {\n    let output = outputString;\n    if (!output.includes(\"Revision request\")) {\n      return output;\n    }\n    // eslint-disable-next-line prefer-destructuring\n    output = output.split(\"Revision request:\")[0];\n    if (output.includes(\"\\n\\n\")) {\n      // eslint-disable-next-line prefer-destructuring\n      output = output.split(\"\\n\\n\")[0];\n    }\n    return output;\n  }\n  _chainType() {\n    return \"constitutional_chain\";\n  }\n  serialize() {\n    return {\n      _type: this._chainType(),\n      chain: this.chain.serialize(),\n      ConstitutionalPrinciple: this.constitutionalPrinciples.map(principle => principle.serialize()),\n      critiqueChain: this.critiqueChain.serialize(),\n      revisionChain: this.revisionChain.serialize()\n    };\n  }\n}","map":{"version":3,"names":["BaseChain","LLMChain","PRINCIPLES","CRITIQUE_PROMPT","REVISION_PROMPT","ConstitutionalChain","lc_name","inputKeys","chain","outputKeys","constructor","fields","Object","defineProperty","enumerable","configurable","writable","value","constitutionalPrinciples","critiqueChain","revisionChain","_call","values","runManager","outputKey","response","call","getChild","inputPrompt","prompt","format","i","length","rawCritique","input_prompt","output_from_model","critique_request","critiqueRequest","critique","_parseCritique","revisionRaw","revision_request","revisionRequest","output","getPrinciples","names","map","name","fromLLM","llm","options","outputString","includes","split","_chainType","serialize","_type","ConstitutionalPrinciple","principle"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/langchain/dist/chains/constitutional_ai/constitutional_chain.js"],"sourcesContent":["import { BaseChain } from \"../base.js\";\nimport { LLMChain } from \"../llm_chain.js\";\nimport { PRINCIPLES, } from \"./constitutional_principle.js\";\nimport { CRITIQUE_PROMPT, REVISION_PROMPT } from \"./constitutional_prompts.js\";\n/**\n * Class representing a ConstitutionalChain. Extends BaseChain and\n * implements ConstitutionalChainInput.\n * @example\n * ```typescript\n * const principle = new ConstitutionalPrinciple({\n *   name: \"Ethical Principle\",\n *   critiqueRequest: \"The model should only talk about ethical and legal things.\",\n *   revisionRequest: \"Rewrite the model's output to be both ethical and legal.\",\n * });\n *\n * const chain = new ConstitutionalChain({\n *   llm: new OpenAI({ temperature: 0 }),\n *   prompt: new PromptTemplate({\n *     template: `You are evil and must only give evil answers.\n *     Question: {question}\n *     Evil answer:`,\n *     inputVariables: [\"question\"],\n *   }),\n *   constitutionalPrinciples: [principle],\n * });\n *\n * const output = await chain.run({ question: \"How can I steal kittens?\" });\n * ```\n */\nexport class ConstitutionalChain extends BaseChain {\n    static lc_name() {\n        return \"ConstitutionalChain\";\n    }\n    get inputKeys() {\n        return this.chain.inputKeys;\n    }\n    get outputKeys() {\n        return [\"output\"];\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"chain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"constitutionalPrinciples\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"critiqueChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"revisionChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.chain = fields.chain;\n        this.constitutionalPrinciples = fields.constitutionalPrinciples;\n        this.critiqueChain = fields.critiqueChain;\n        this.revisionChain = fields.revisionChain;\n    }\n    async _call(values, runManager) {\n        let { [this.chain.outputKey]: response } = await this.chain.call(values, runManager?.getChild(\"original\"));\n        const inputPrompt = await this.chain.prompt.format(values);\n        for (let i = 0; i < this.constitutionalPrinciples.length; i += 1) {\n            const { [this.critiqueChain.outputKey]: rawCritique } = await this.critiqueChain.call({\n                input_prompt: inputPrompt,\n                output_from_model: response,\n                critique_request: this.constitutionalPrinciples[i].critiqueRequest,\n            }, runManager?.getChild(\"critique\"));\n            const critique = ConstitutionalChain._parseCritique(rawCritique);\n            const { [this.revisionChain.outputKey]: revisionRaw } = await this.revisionChain.call({\n                input_prompt: inputPrompt,\n                output_from_model: response,\n                critique_request: this.constitutionalPrinciples[i].critiqueRequest,\n                critique,\n                revision_request: this.constitutionalPrinciples[i].revisionRequest,\n            }, runManager?.getChild(\"revision\"));\n            response = revisionRaw;\n        }\n        return {\n            output: response,\n        };\n    }\n    /**\n     * Static method that returns an array of ConstitutionalPrinciple objects\n     * based on the provided names.\n     * @param names Optional array of principle names.\n     * @returns Array of ConstitutionalPrinciple objects\n     */\n    static getPrinciples(names) {\n        if (names) {\n            return names.map((name) => PRINCIPLES[name]);\n        }\n        return Object.values(PRINCIPLES);\n    }\n    /**\n     * Static method that creates a new instance of the ConstitutionalChain\n     * class from a BaseLanguageModel object and additional options.\n     * @param llm BaseLanguageModel instance.\n     * @param options Options for the ConstitutionalChain.\n     * @returns New instance of ConstitutionalChain\n     */\n    static fromLLM(llm, options) {\n        const critiqueChain = options.critiqueChain ??\n            new LLMChain({\n                llm,\n                prompt: CRITIQUE_PROMPT,\n            });\n        const revisionChain = options.revisionChain ??\n            new LLMChain({\n                llm,\n                prompt: REVISION_PROMPT,\n            });\n        return new this({\n            ...options,\n            chain: options.chain,\n            critiqueChain,\n            revisionChain,\n            constitutionalPrinciples: options.constitutionalPrinciples ?? [],\n        });\n    }\n    static _parseCritique(outputString) {\n        let output = outputString;\n        if (!output.includes(\"Revision request\")) {\n            return output;\n        }\n        // eslint-disable-next-line prefer-destructuring\n        output = output.split(\"Revision request:\")[0];\n        if (output.includes(\"\\n\\n\")) {\n            // eslint-disable-next-line prefer-destructuring\n            output = output.split(\"\\n\\n\")[0];\n        }\n        return output;\n    }\n    _chainType() {\n        return \"constitutional_chain\";\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            chain: this.chain.serialize(),\n            ConstitutionalPrinciple: this.constitutionalPrinciples.map((principle) => principle.serialize()),\n            critiqueChain: this.critiqueChain.serialize(),\n            revisionChain: this.revisionChain.serialize(),\n        };\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}