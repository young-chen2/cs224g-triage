{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ChatCompletionStream_instances, _ChatCompletionStream_params, _ChatCompletionStream_choiceEventStates, _ChatCompletionStream_currentChatCompletionSnapshot, _ChatCompletionStream_beginRequest, _ChatCompletionStream_getChoiceEventState, _ChatCompletionStream_addChunk, _ChatCompletionStream_emitToolCallDoneEvent, _ChatCompletionStream_emitContentDoneEvents, _ChatCompletionStream_endRequest, _ChatCompletionStream_getAutoParseableResponseFormat, _ChatCompletionStream_accumulateChatCompletion;\nimport { OpenAIError, APIUserAbortError, LengthFinishReasonError, ContentFilterFinishReasonError } from \"../error.mjs\";\nimport { AbstractChatCompletionRunner } from \"./AbstractChatCompletionRunner.mjs\";\nimport { Stream } from \"../streaming.mjs\";\nimport { hasAutoParseableInput, isAutoParsableResponseFormat, isAutoParsableTool, maybeParseChatCompletion, shouldParseToolCall } from \"../lib/parser.mjs\";\nimport { partialParse } from \"../_vendor/partial-json-parser/parser.mjs\";\nexport class ChatCompletionStream extends AbstractChatCompletionRunner {\n  constructor(params) {\n    super();\n    _ChatCompletionStream_instances.add(this);\n    _ChatCompletionStream_params.set(this, void 0);\n    _ChatCompletionStream_choiceEventStates.set(this, void 0);\n    _ChatCompletionStream_currentChatCompletionSnapshot.set(this, void 0);\n    __classPrivateFieldSet(this, _ChatCompletionStream_params, params, \"f\");\n    __classPrivateFieldSet(this, _ChatCompletionStream_choiceEventStates, [], \"f\");\n  }\n  get currentChatCompletionSnapshot() {\n    return __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n  }\n  /**\n   * Intended for use on the frontend, consuming a stream produced with\n   * `.toReadableStream()` on the backend.\n   *\n   * Note that messages sent to the model do not appear in `.on('message')`\n   * in this context.\n   */\n  static fromReadableStream(stream) {\n    const runner = new ChatCompletionStream(null);\n    runner._run(() => runner._fromReadableStream(stream));\n    return runner;\n  }\n  static createChatCompletion(client, params, options) {\n    const runner = new ChatCompletionStream(params);\n    runner._run(() => runner._runChatCompletion(client, {\n      ...params,\n      stream: true\n    }, {\n      ...options,\n      headers: {\n        ...options?.headers,\n        'X-Stainless-Helper-Method': 'stream'\n      }\n    }));\n    return runner;\n  }\n  async _createChatCompletion(client, params, options) {\n    super._createChatCompletion;\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_beginRequest).call(this);\n    const stream = await client.chat.completions.create({\n      ...params,\n      stream: true\n    }, {\n      ...options,\n      signal: this.controller.signal\n    });\n    this._connected();\n    for await (const chunk of stream) {\n      __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_addChunk).call(this, chunk);\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n    return this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n  }\n  async _fromReadableStream(readableStream, options) {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_beginRequest).call(this);\n    this._connected();\n    const stream = Stream.fromReadableStream(readableStream, this.controller);\n    let chatId;\n    for await (const chunk of stream) {\n      if (chatId && chatId !== chunk.id) {\n        // A new request has been made.\n        this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n      }\n      __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_addChunk).call(this, chunk);\n      chatId = chunk.id;\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n    return this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n  }\n  [(_ChatCompletionStream_params = new WeakMap(), _ChatCompletionStream_choiceEventStates = new WeakMap(), _ChatCompletionStream_currentChatCompletionSnapshot = new WeakMap(), _ChatCompletionStream_instances = new WeakSet(), _ChatCompletionStream_beginRequest = function _ChatCompletionStream_beginRequest() {\n    if (this.ended) return;\n    __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, undefined, \"f\");\n  }, _ChatCompletionStream_getChoiceEventState = function _ChatCompletionStream_getChoiceEventState(choice) {\n    let state = __classPrivateFieldGet(this, _ChatCompletionStream_choiceEventStates, \"f\")[choice.index];\n    if (state) {\n      return state;\n    }\n    state = {\n      content_done: false,\n      refusal_done: false,\n      logprobs_content_done: false,\n      logprobs_refusal_done: false,\n      done_tool_calls: new Set(),\n      current_tool_call_index: null\n    };\n    __classPrivateFieldGet(this, _ChatCompletionStream_choiceEventStates, \"f\")[choice.index] = state;\n    return state;\n  }, _ChatCompletionStream_addChunk = function _ChatCompletionStream_addChunk(chunk) {\n    if (this.ended) return;\n    const completion = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_accumulateChatCompletion).call(this, chunk);\n    this._emit('chunk', chunk, completion);\n    for (const choice of chunk.choices) {\n      const choiceSnapshot = completion.choices[choice.index];\n      if (choice.delta.content != null && choiceSnapshot.message?.role === 'assistant' && choiceSnapshot.message?.content) {\n        this._emit('content', choice.delta.content, choiceSnapshot.message.content);\n        this._emit('content.delta', {\n          delta: choice.delta.content,\n          snapshot: choiceSnapshot.message.content,\n          parsed: choiceSnapshot.message.parsed\n        });\n      }\n      if (choice.delta.refusal != null && choiceSnapshot.message?.role === 'assistant' && choiceSnapshot.message?.refusal) {\n        this._emit('refusal.delta', {\n          delta: choice.delta.refusal,\n          snapshot: choiceSnapshot.message.refusal\n        });\n      }\n      if (choice.logprobs?.content != null && choiceSnapshot.message?.role === 'assistant') {\n        this._emit('logprobs.content.delta', {\n          content: choice.logprobs?.content,\n          snapshot: choiceSnapshot.logprobs?.content ?? []\n        });\n      }\n      if (choice.logprobs?.refusal != null && choiceSnapshot.message?.role === 'assistant') {\n        this._emit('logprobs.refusal.delta', {\n          refusal: choice.logprobs?.refusal,\n          snapshot: choiceSnapshot.logprobs?.refusal ?? []\n        });\n      }\n      const state = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);\n      if (choiceSnapshot.finish_reason) {\n        __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitContentDoneEvents).call(this, choiceSnapshot);\n        if (state.current_tool_call_index != null) {\n          __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitToolCallDoneEvent).call(this, choiceSnapshot, state.current_tool_call_index);\n        }\n      }\n      for (const toolCall of choice.delta.tool_calls ?? []) {\n        if (state.current_tool_call_index !== toolCall.index) {\n          __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitContentDoneEvents).call(this, choiceSnapshot);\n          // new tool call started, the previous one is done\n          if (state.current_tool_call_index != null) {\n            __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitToolCallDoneEvent).call(this, choiceSnapshot, state.current_tool_call_index);\n          }\n        }\n        state.current_tool_call_index = toolCall.index;\n      }\n      for (const toolCallDelta of choice.delta.tool_calls ?? []) {\n        const toolCallSnapshot = choiceSnapshot.message.tool_calls?.[toolCallDelta.index];\n        if (!toolCallSnapshot?.type) {\n          continue;\n        }\n        if (toolCallSnapshot?.type === 'function') {\n          this._emit('tool_calls.function.arguments.delta', {\n            name: toolCallSnapshot.function?.name,\n            index: toolCallDelta.index,\n            arguments: toolCallSnapshot.function.arguments,\n            parsed_arguments: toolCallSnapshot.function.parsed_arguments,\n            arguments_delta: toolCallDelta.function?.arguments ?? ''\n          });\n        } else {\n          assertNever(toolCallSnapshot?.type);\n        }\n      }\n    }\n  }, _ChatCompletionStream_emitToolCallDoneEvent = function _ChatCompletionStream_emitToolCallDoneEvent(choiceSnapshot, toolCallIndex) {\n    const state = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);\n    if (state.done_tool_calls.has(toolCallIndex)) {\n      // we've already fired the done event\n      return;\n    }\n    const toolCallSnapshot = choiceSnapshot.message.tool_calls?.[toolCallIndex];\n    if (!toolCallSnapshot) {\n      throw new Error('no tool call snapshot');\n    }\n    if (!toolCallSnapshot.type) {\n      throw new Error('tool call snapshot missing `type`');\n    }\n    if (toolCallSnapshot.type === 'function') {\n      const inputTool = __classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\")?.tools?.find(tool => tool.type === 'function' && tool.function.name === toolCallSnapshot.function.name);\n      this._emit('tool_calls.function.arguments.done', {\n        name: toolCallSnapshot.function.name,\n        index: toolCallIndex,\n        arguments: toolCallSnapshot.function.arguments,\n        parsed_arguments: isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCallSnapshot.function.arguments) : inputTool?.function.strict ? JSON.parse(toolCallSnapshot.function.arguments) : null\n      });\n    } else {\n      assertNever(toolCallSnapshot.type);\n    }\n  }, _ChatCompletionStream_emitContentDoneEvents = function _ChatCompletionStream_emitContentDoneEvents(choiceSnapshot) {\n    const state = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);\n    if (choiceSnapshot.message.content && !state.content_done) {\n      state.content_done = true;\n      const responseFormat = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getAutoParseableResponseFormat).call(this);\n      this._emit('content.done', {\n        content: choiceSnapshot.message.content,\n        parsed: responseFormat ? responseFormat.$parseRaw(choiceSnapshot.message.content) : null\n      });\n    }\n    if (choiceSnapshot.message.refusal && !state.refusal_done) {\n      state.refusal_done = true;\n      this._emit('refusal.done', {\n        refusal: choiceSnapshot.message.refusal\n      });\n    }\n    if (choiceSnapshot.logprobs?.content && !state.logprobs_content_done) {\n      state.logprobs_content_done = true;\n      this._emit('logprobs.content.done', {\n        content: choiceSnapshot.logprobs.content\n      });\n    }\n    if (choiceSnapshot.logprobs?.refusal && !state.logprobs_refusal_done) {\n      state.logprobs_refusal_done = true;\n      this._emit('logprobs.refusal.done', {\n        refusal: choiceSnapshot.logprobs.refusal\n      });\n    }\n  }, _ChatCompletionStream_endRequest = function _ChatCompletionStream_endRequest() {\n    if (this.ended) {\n      throw new OpenAIError(`stream has ended, this shouldn't happen`);\n    }\n    const snapshot = __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n    if (!snapshot) {\n      throw new OpenAIError(`request ended without sending any chunks`);\n    }\n    __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, undefined, \"f\");\n    __classPrivateFieldSet(this, _ChatCompletionStream_choiceEventStates, [], \"f\");\n    return finalizeChatCompletion(snapshot, __classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\"));\n  }, _ChatCompletionStream_getAutoParseableResponseFormat = function _ChatCompletionStream_getAutoParseableResponseFormat() {\n    const responseFormat = __classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\")?.response_format;\n    if (isAutoParsableResponseFormat(responseFormat)) {\n      return responseFormat;\n    }\n    return null;\n  }, _ChatCompletionStream_accumulateChatCompletion = function _ChatCompletionStream_accumulateChatCompletion(chunk) {\n    var _a, _b, _c, _d;\n    let snapshot = __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n    const {\n      choices,\n      ...rest\n    } = chunk;\n    if (!snapshot) {\n      snapshot = __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, {\n        ...rest,\n        choices: []\n      }, \"f\");\n    } else {\n      Object.assign(snapshot, rest);\n    }\n    for (const {\n      delta,\n      finish_reason,\n      index,\n      logprobs = null,\n      ...other\n    } of chunk.choices) {\n      let choice = snapshot.choices[index];\n      if (!choice) {\n        choice = snapshot.choices[index] = {\n          finish_reason,\n          index,\n          message: {},\n          logprobs,\n          ...other\n        };\n      }\n      if (logprobs) {\n        if (!choice.logprobs) {\n          choice.logprobs = Object.assign({}, logprobs);\n        } else {\n          const {\n            content,\n            refusal,\n            ...rest\n          } = logprobs;\n          assertIsEmpty(rest);\n          Object.assign(choice.logprobs, rest);\n          if (content) {\n            (_a = choice.logprobs).content ?? (_a.content = []);\n            choice.logprobs.content.push(...content);\n          }\n          if (refusal) {\n            (_b = choice.logprobs).refusal ?? (_b.refusal = []);\n            choice.logprobs.refusal.push(...refusal);\n          }\n        }\n      }\n      if (finish_reason) {\n        choice.finish_reason = finish_reason;\n        if (__classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\") && hasAutoParseableInput(__classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\"))) {\n          if (finish_reason === 'length') {\n            throw new LengthFinishReasonError();\n          }\n          if (finish_reason === 'content_filter') {\n            throw new ContentFilterFinishReasonError();\n          }\n        }\n      }\n      Object.assign(choice, other);\n      if (!delta) continue; // Shouldn't happen; just in case.\n      const {\n        content,\n        refusal,\n        function_call,\n        role,\n        tool_calls,\n        ...rest\n      } = delta;\n      assertIsEmpty(rest);\n      Object.assign(choice.message, rest);\n      if (refusal) {\n        choice.message.refusal = (choice.message.refusal || '') + refusal;\n      }\n      if (role) choice.message.role = role;\n      if (function_call) {\n        if (!choice.message.function_call) {\n          choice.message.function_call = function_call;\n        } else {\n          if (function_call.name) choice.message.function_call.name = function_call.name;\n          if (function_call.arguments) {\n            (_c = choice.message.function_call).arguments ?? (_c.arguments = '');\n            choice.message.function_call.arguments += function_call.arguments;\n          }\n        }\n      }\n      if (content) {\n        choice.message.content = (choice.message.content || '') + content;\n        if (!choice.message.refusal && __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getAutoParseableResponseFormat).call(this)) {\n          choice.message.parsed = partialParse(choice.message.content);\n        }\n      }\n      if (tool_calls) {\n        if (!choice.message.tool_calls) choice.message.tool_calls = [];\n        for (const {\n          index,\n          id,\n          type,\n          function: fn,\n          ...rest\n        } of tool_calls) {\n          const tool_call = (_d = choice.message.tool_calls)[index] ?? (_d[index] = {});\n          Object.assign(tool_call, rest);\n          if (id) tool_call.id = id;\n          if (type) tool_call.type = type;\n          if (fn) tool_call.function ?? (tool_call.function = {\n            name: fn.name ?? '',\n            arguments: ''\n          });\n          if (fn?.name) tool_call.function.name = fn.name;\n          if (fn?.arguments) {\n            tool_call.function.arguments += fn.arguments;\n            if (shouldParseToolCall(__classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\"), tool_call)) {\n              tool_call.function.parsed_arguments = partialParse(tool_call.function.arguments);\n            }\n          }\n        }\n      }\n    }\n    return snapshot;\n  }, Symbol.asyncIterator)]() {\n    const pushQueue = [];\n    const readQueue = [];\n    let done = false;\n    this.on('chunk', chunk => {\n      const reader = readQueue.shift();\n      if (reader) {\n        reader.resolve(chunk);\n      } else {\n        pushQueue.push(chunk);\n      }\n    });\n    this.on('end', () => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.resolve(undefined);\n      }\n      readQueue.length = 0;\n    });\n    this.on('abort', err => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n    this.on('error', err => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n    return {\n      next: async () => {\n        if (!pushQueue.length) {\n          if (done) {\n            return {\n              value: undefined,\n              done: true\n            };\n          }\n          return new Promise((resolve, reject) => readQueue.push({\n            resolve,\n            reject\n          })).then(chunk => chunk ? {\n            value: chunk,\n            done: false\n          } : {\n            value: undefined,\n            done: true\n          });\n        }\n        const chunk = pushQueue.shift();\n        return {\n          value: chunk,\n          done: false\n        };\n      },\n      return: async () => {\n        this.abort();\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n    };\n  }\n  toReadableStream() {\n    const stream = new Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n    return stream.toReadableStream();\n  }\n}\nfunction finalizeChatCompletion(snapshot, params) {\n  const {\n    id,\n    choices,\n    created,\n    model,\n    system_fingerprint,\n    ...rest\n  } = snapshot;\n  const completion = {\n    ...rest,\n    id,\n    choices: choices.map(({\n      message,\n      finish_reason,\n      index,\n      logprobs,\n      ...choiceRest\n    }) => {\n      if (!finish_reason) {\n        throw new OpenAIError(`missing finish_reason for choice ${index}`);\n      }\n      const {\n        content = null,\n        function_call,\n        tool_calls,\n        ...messageRest\n      } = message;\n      const role = message.role; // this is what we expect; in theory it could be different which would make our types a slight lie but would be fine.\n      if (!role) {\n        throw new OpenAIError(`missing role for choice ${index}`);\n      }\n      if (function_call) {\n        const {\n          arguments: args,\n          name\n        } = function_call;\n        if (args == null) {\n          throw new OpenAIError(`missing function_call.arguments for choice ${index}`);\n        }\n        if (!name) {\n          throw new OpenAIError(`missing function_call.name for choice ${index}`);\n        }\n        return {\n          ...choiceRest,\n          message: {\n            content,\n            function_call: {\n              arguments: args,\n              name\n            },\n            role,\n            refusal: message.refusal ?? null\n          },\n          finish_reason,\n          index,\n          logprobs\n        };\n      }\n      if (tool_calls) {\n        return {\n          ...choiceRest,\n          index,\n          finish_reason,\n          logprobs,\n          message: {\n            ...messageRest,\n            role,\n            content,\n            refusal: message.refusal ?? null,\n            tool_calls: tool_calls.map((tool_call, i) => {\n              const {\n                function: fn,\n                type,\n                id,\n                ...toolRest\n              } = tool_call;\n              const {\n                arguments: args,\n                name,\n                ...fnRest\n              } = fn || {};\n              if (id == null) {\n                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].id\\n${str(snapshot)}`);\n              }\n              if (type == null) {\n                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].type\\n${str(snapshot)}`);\n              }\n              if (name == null) {\n                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].function.name\\n${str(snapshot)}`);\n              }\n              if (args == null) {\n                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].function.arguments\\n${str(snapshot)}`);\n              }\n              return {\n                ...toolRest,\n                id,\n                type,\n                function: {\n                  ...fnRest,\n                  name,\n                  arguments: args\n                }\n              };\n            })\n          }\n        };\n      }\n      return {\n        ...choiceRest,\n        message: {\n          ...messageRest,\n          content,\n          role,\n          refusal: message.refusal ?? null\n        },\n        finish_reason,\n        index,\n        logprobs\n      };\n    }),\n    created,\n    model,\n    object: 'chat.completion',\n    ...(system_fingerprint ? {\n      system_fingerprint\n    } : {})\n  };\n  return maybeParseChatCompletion(completion, params);\n}\nfunction str(x) {\n  return JSON.stringify(x);\n}\n/**\n * Ensures the given argument is an empty object, useful for\n * asserting that all known properties on an object have been\n * destructured.\n */\nfunction assertIsEmpty(obj) {\n  return;\n}\nfunction assertNever(_x) {}","map":{"version":3,"names":["OpenAIError","APIUserAbortError","LengthFinishReasonError","ContentFilterFinishReasonError","AbstractChatCompletionRunner","Stream","hasAutoParseableInput","isAutoParsableResponseFormat","isAutoParsableTool","maybeParseChatCompletion","shouldParseToolCall","partialParse","ChatCompletionStream","constructor","params","_ChatCompletionStream_params","set","_ChatCompletionStream_choiceEventStates","_ChatCompletionStream_currentChatCompletionSnapshot","__classPrivateFieldSet","currentChatCompletionSnapshot","__classPrivateFieldGet","fromReadableStream","stream","runner","_run","_fromReadableStream","createChatCompletion","client","options","_runChatCompletion","headers","_createChatCompletion","signal","aborted","controller","abort","addEventListener","_ChatCompletionStream_instances","_ChatCompletionStream_beginRequest","call","chat","completions","create","_connected","chunk","_ChatCompletionStream_addChunk","_addChatCompletion","_ChatCompletionStream_endRequest","readableStream","chatId","id","WeakMap","WeakSet","ended","undefined","_ChatCompletionStream_getChoiceEventState","choice","state","index","content_done","refusal_done","logprobs_content_done","logprobs_refusal_done","done_tool_calls","Set","current_tool_call_index","completion","_ChatCompletionStream_accumulateChatCompletion","_emit","choices","choiceSnapshot","delta","content","message","role","snapshot","parsed","refusal","logprobs","finish_reason","_ChatCompletionStream_emitContentDoneEvents","_ChatCompletionStream_emitToolCallDoneEvent","toolCall","tool_calls","toolCallDelta","toolCallSnapshot","type","name","function","arguments","parsed_arguments","arguments_delta","assertNever","toolCallIndex","has","Error","inputTool","tools","find","tool","$parseRaw","strict","JSON","parse","responseFormat","_ChatCompletionStream_getAutoParseableResponseFormat","finalizeChatCompletion","response_format","rest","Object","assign","other","assertIsEmpty","_a","push","_b","function_call","_c","fn","tool_call","_d","Symbol","asyncIterator","pushQueue","readQueue","done","on","reader","shift","resolve","length","err","reject","next","value","Promise","then","return","toReadableStream","bind","created","model","system_fingerprint","map","choiceRest","messageRest","args","i","toolRest","fnRest","str","object","x","stringify","obj","_x"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/openai/src/lib/ChatCompletionStream.ts"],"sourcesContent":["import * as Core from '../core';\nimport {\n  OpenAIError,\n  APIUserAbortError,\n  LengthFinishReasonError,\n  ContentFilterFinishReasonError,\n} from '../error';\nimport {\n  ChatCompletionTokenLogprob,\n  type ChatCompletion,\n  type ChatCompletionChunk,\n  type ChatCompletionCreateParams,\n  type ChatCompletionCreateParamsStreaming,\n  type ChatCompletionCreateParamsBase,\n} from '../resources/chat/completions';\nimport {\n  AbstractChatCompletionRunner,\n  type AbstractChatCompletionRunnerEvents,\n} from './AbstractChatCompletionRunner';\nimport { type ReadableStream } from '../_shims/index';\nimport { Stream } from '../streaming';\nimport OpenAI from '../index';\nimport { ParsedChatCompletion } from '../resources/beta/chat/completions';\nimport {\n  AutoParseableResponseFormat,\n  hasAutoParseableInput,\n  isAutoParsableResponseFormat,\n  isAutoParsableTool,\n  maybeParseChatCompletion,\n  shouldParseToolCall,\n} from '../lib/parser';\nimport { partialParse } from '../_vendor/partial-json-parser/parser';\n\nexport interface ContentDeltaEvent {\n  delta: string;\n  snapshot: string;\n  parsed: unknown | null;\n}\n\nexport interface ContentDoneEvent<ParsedT = null> {\n  content: string;\n  parsed: ParsedT | null;\n}\n\nexport interface RefusalDeltaEvent {\n  delta: string;\n  snapshot: string;\n}\n\nexport interface RefusalDoneEvent {\n  refusal: string;\n}\n\nexport interface FunctionToolCallArgumentsDeltaEvent {\n  name: string;\n\n  index: number;\n\n  arguments: string;\n\n  parsed_arguments: unknown;\n\n  arguments_delta: string;\n}\n\nexport interface FunctionToolCallArgumentsDoneEvent {\n  name: string;\n\n  index: number;\n\n  arguments: string;\n\n  parsed_arguments: unknown;\n}\n\nexport interface LogProbsContentDeltaEvent {\n  content: Array<ChatCompletionTokenLogprob>;\n  snapshot: Array<ChatCompletionTokenLogprob>;\n}\n\nexport interface LogProbsContentDoneEvent {\n  content: Array<ChatCompletionTokenLogprob>;\n}\n\nexport interface LogProbsRefusalDeltaEvent {\n  refusal: Array<ChatCompletionTokenLogprob>;\n  snapshot: Array<ChatCompletionTokenLogprob>;\n}\n\nexport interface LogProbsRefusalDoneEvent {\n  refusal: Array<ChatCompletionTokenLogprob>;\n}\n\nexport interface ChatCompletionStreamEvents<ParsedT = null> extends AbstractChatCompletionRunnerEvents {\n  content: (contentDelta: string, contentSnapshot: string) => void;\n  chunk: (chunk: ChatCompletionChunk, snapshot: ChatCompletionSnapshot) => void;\n\n  'content.delta': (props: ContentDeltaEvent) => void;\n  'content.done': (props: ContentDoneEvent<ParsedT>) => void;\n\n  'refusal.delta': (props: RefusalDeltaEvent) => void;\n  'refusal.done': (props: RefusalDoneEvent) => void;\n\n  'tool_calls.function.arguments.delta': (props: FunctionToolCallArgumentsDeltaEvent) => void;\n  'tool_calls.function.arguments.done': (props: FunctionToolCallArgumentsDoneEvent) => void;\n\n  'logprobs.content.delta': (props: LogProbsContentDeltaEvent) => void;\n  'logprobs.content.done': (props: LogProbsContentDoneEvent) => void;\n\n  'logprobs.refusal.delta': (props: LogProbsRefusalDeltaEvent) => void;\n  'logprobs.refusal.done': (props: LogProbsRefusalDoneEvent) => void;\n}\n\nexport type ChatCompletionStreamParams = Omit<ChatCompletionCreateParamsBase, 'stream'> & {\n  stream?: true;\n};\n\ninterface ChoiceEventState {\n  content_done: boolean;\n  refusal_done: boolean;\n  logprobs_content_done: boolean;\n  logprobs_refusal_done: boolean;\n  current_tool_call_index: number | null;\n  done_tool_calls: Set<number>;\n}\n\nexport class ChatCompletionStream<ParsedT = null>\n  extends AbstractChatCompletionRunner<ChatCompletionStreamEvents<ParsedT>, ParsedT>\n  implements AsyncIterable<ChatCompletionChunk>\n{\n  #params: ChatCompletionCreateParams | null;\n  #choiceEventStates: ChoiceEventState[];\n  #currentChatCompletionSnapshot: ChatCompletionSnapshot | undefined;\n\n  constructor(params: ChatCompletionCreateParams | null) {\n    super();\n    this.#params = params;\n    this.#choiceEventStates = [];\n  }\n\n  get currentChatCompletionSnapshot(): ChatCompletionSnapshot | undefined {\n    return this.#currentChatCompletionSnapshot;\n  }\n\n  /**\n   * Intended for use on the frontend, consuming a stream produced with\n   * `.toReadableStream()` on the backend.\n   *\n   * Note that messages sent to the model do not appear in `.on('message')`\n   * in this context.\n   */\n  static fromReadableStream(stream: ReadableStream): ChatCompletionStream<null> {\n    const runner = new ChatCompletionStream(null);\n    runner._run(() => runner._fromReadableStream(stream));\n    return runner;\n  }\n\n  static createChatCompletion<ParsedT>(\n    client: OpenAI,\n    params: ChatCompletionStreamParams,\n    options?: Core.RequestOptions,\n  ): ChatCompletionStream<ParsedT> {\n    const runner = new ChatCompletionStream<ParsedT>(params as ChatCompletionCreateParamsStreaming);\n    runner._run(() =>\n      runner._runChatCompletion(\n        client,\n        { ...params, stream: true },\n        { ...options, headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' } },\n      ),\n    );\n    return runner;\n  }\n\n  #beginRequest() {\n    if (this.ended) return;\n    this.#currentChatCompletionSnapshot = undefined;\n  }\n\n  #getChoiceEventState(choice: ChatCompletionSnapshot.Choice): ChoiceEventState {\n    let state = this.#choiceEventStates[choice.index];\n    if (state) {\n      return state;\n    }\n\n    state = {\n      content_done: false,\n      refusal_done: false,\n      logprobs_content_done: false,\n      logprobs_refusal_done: false,\n      done_tool_calls: new Set(),\n      current_tool_call_index: null,\n    };\n    this.#choiceEventStates[choice.index] = state;\n    return state;\n  }\n\n  #addChunk(this: ChatCompletionStream<ParsedT>, chunk: ChatCompletionChunk) {\n    if (this.ended) return;\n\n    const completion = this.#accumulateChatCompletion(chunk);\n    this._emit('chunk', chunk, completion);\n\n    for (const choice of chunk.choices) {\n      const choiceSnapshot = completion.choices[choice.index]!;\n\n      if (\n        choice.delta.content != null &&\n        choiceSnapshot.message?.role === 'assistant' &&\n        choiceSnapshot.message?.content\n      ) {\n        this._emit('content', choice.delta.content, choiceSnapshot.message.content);\n        this._emit('content.delta', {\n          delta: choice.delta.content,\n          snapshot: choiceSnapshot.message.content,\n          parsed: choiceSnapshot.message.parsed,\n        });\n      }\n\n      if (\n        choice.delta.refusal != null &&\n        choiceSnapshot.message?.role === 'assistant' &&\n        choiceSnapshot.message?.refusal\n      ) {\n        this._emit('refusal.delta', {\n          delta: choice.delta.refusal,\n          snapshot: choiceSnapshot.message.refusal,\n        });\n      }\n\n      if (choice.logprobs?.content != null && choiceSnapshot.message?.role === 'assistant') {\n        this._emit('logprobs.content.delta', {\n          content: choice.logprobs?.content,\n          snapshot: choiceSnapshot.logprobs?.content ?? [],\n        });\n      }\n\n      if (choice.logprobs?.refusal != null && choiceSnapshot.message?.role === 'assistant') {\n        this._emit('logprobs.refusal.delta', {\n          refusal: choice.logprobs?.refusal,\n          snapshot: choiceSnapshot.logprobs?.refusal ?? [],\n        });\n      }\n\n      const state = this.#getChoiceEventState(choiceSnapshot);\n\n      if (choiceSnapshot.finish_reason) {\n        this.#emitContentDoneEvents(choiceSnapshot);\n\n        if (state.current_tool_call_index != null) {\n          this.#emitToolCallDoneEvent(choiceSnapshot, state.current_tool_call_index);\n        }\n      }\n\n      for (const toolCall of choice.delta.tool_calls ?? []) {\n        if (state.current_tool_call_index !== toolCall.index) {\n          this.#emitContentDoneEvents(choiceSnapshot);\n\n          // new tool call started, the previous one is done\n          if (state.current_tool_call_index != null) {\n            this.#emitToolCallDoneEvent(choiceSnapshot, state.current_tool_call_index);\n          }\n        }\n\n        state.current_tool_call_index = toolCall.index;\n      }\n\n      for (const toolCallDelta of choice.delta.tool_calls ?? []) {\n        const toolCallSnapshot = choiceSnapshot.message.tool_calls?.[toolCallDelta.index];\n        if (!toolCallSnapshot?.type) {\n          continue;\n        }\n\n        if (toolCallSnapshot?.type === 'function') {\n          this._emit('tool_calls.function.arguments.delta', {\n            name: toolCallSnapshot.function?.name,\n            index: toolCallDelta.index,\n            arguments: toolCallSnapshot.function.arguments,\n            parsed_arguments: toolCallSnapshot.function.parsed_arguments,\n            arguments_delta: toolCallDelta.function?.arguments ?? '',\n          });\n        } else {\n          assertNever(toolCallSnapshot?.type);\n        }\n      }\n    }\n  }\n\n  #emitToolCallDoneEvent(choiceSnapshot: ChatCompletionSnapshot.Choice, toolCallIndex: number) {\n    const state = this.#getChoiceEventState(choiceSnapshot);\n    if (state.done_tool_calls.has(toolCallIndex)) {\n      // we've already fired the done event\n      return;\n    }\n\n    const toolCallSnapshot = choiceSnapshot.message.tool_calls?.[toolCallIndex];\n    if (!toolCallSnapshot) {\n      throw new Error('no tool call snapshot');\n    }\n    if (!toolCallSnapshot.type) {\n      throw new Error('tool call snapshot missing `type`');\n    }\n\n    if (toolCallSnapshot.type === 'function') {\n      const inputTool = this.#params?.tools?.find(\n        (tool) => tool.type === 'function' && tool.function.name === toolCallSnapshot.function.name,\n      );\n\n      this._emit('tool_calls.function.arguments.done', {\n        name: toolCallSnapshot.function.name,\n        index: toolCallIndex,\n        arguments: toolCallSnapshot.function.arguments,\n        parsed_arguments:\n          isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCallSnapshot.function.arguments)\n          : inputTool?.function.strict ? JSON.parse(toolCallSnapshot.function.arguments)\n          : null,\n      });\n    } else {\n      assertNever(toolCallSnapshot.type);\n    }\n  }\n\n  #emitContentDoneEvents(choiceSnapshot: ChatCompletionSnapshot.Choice) {\n    const state = this.#getChoiceEventState(choiceSnapshot);\n\n    if (choiceSnapshot.message.content && !state.content_done) {\n      state.content_done = true;\n\n      const responseFormat = this.#getAutoParseableResponseFormat();\n\n      this._emit('content.done', {\n        content: choiceSnapshot.message.content,\n        parsed: responseFormat ? responseFormat.$parseRaw(choiceSnapshot.message.content) : (null as any),\n      });\n    }\n\n    if (choiceSnapshot.message.refusal && !state.refusal_done) {\n      state.refusal_done = true;\n\n      this._emit('refusal.done', { refusal: choiceSnapshot.message.refusal });\n    }\n\n    if (choiceSnapshot.logprobs?.content && !state.logprobs_content_done) {\n      state.logprobs_content_done = true;\n\n      this._emit('logprobs.content.done', { content: choiceSnapshot.logprobs.content });\n    }\n\n    if (choiceSnapshot.logprobs?.refusal && !state.logprobs_refusal_done) {\n      state.logprobs_refusal_done = true;\n\n      this._emit('logprobs.refusal.done', { refusal: choiceSnapshot.logprobs.refusal });\n    }\n  }\n\n  #endRequest(): ParsedChatCompletion<ParsedT> {\n    if (this.ended) {\n      throw new OpenAIError(`stream has ended, this shouldn't happen`);\n    }\n    const snapshot = this.#currentChatCompletionSnapshot;\n    if (!snapshot) {\n      throw new OpenAIError(`request ended without sending any chunks`);\n    }\n    this.#currentChatCompletionSnapshot = undefined;\n    this.#choiceEventStates = [];\n    return finalizeChatCompletion(snapshot, this.#params);\n  }\n\n  protected override async _createChatCompletion(\n    client: OpenAI,\n    params: ChatCompletionCreateParams,\n    options?: Core.RequestOptions,\n  ): Promise<ParsedChatCompletion<ParsedT>> {\n    super._createChatCompletion;\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    this.#beginRequest();\n\n    const stream = await client.chat.completions.create(\n      { ...params, stream: true },\n      { ...options, signal: this.controller.signal },\n    );\n    this._connected();\n    for await (const chunk of stream) {\n      this.#addChunk(chunk);\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n    return this._addChatCompletion(this.#endRequest());\n  }\n\n  protected async _fromReadableStream(\n    readableStream: ReadableStream,\n    options?: Core.RequestOptions,\n  ): Promise<ChatCompletion> {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    this.#beginRequest();\n    this._connected();\n    const stream = Stream.fromReadableStream<ChatCompletionChunk>(readableStream, this.controller);\n    let chatId;\n    for await (const chunk of stream) {\n      if (chatId && chatId !== chunk.id) {\n        // A new request has been made.\n        this._addChatCompletion(this.#endRequest());\n      }\n\n      this.#addChunk(chunk);\n      chatId = chunk.id;\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n    return this._addChatCompletion(this.#endRequest());\n  }\n\n  #getAutoParseableResponseFormat(): AutoParseableResponseFormat<ParsedT> | null {\n    const responseFormat = this.#params?.response_format;\n    if (isAutoParsableResponseFormat<ParsedT>(responseFormat)) {\n      return responseFormat;\n    }\n\n    return null;\n  }\n\n  #accumulateChatCompletion(chunk: ChatCompletionChunk): ChatCompletionSnapshot {\n    let snapshot = this.#currentChatCompletionSnapshot;\n    const { choices, ...rest } = chunk;\n    if (!snapshot) {\n      snapshot = this.#currentChatCompletionSnapshot = {\n        ...rest,\n        choices: [],\n      };\n    } else {\n      Object.assign(snapshot, rest);\n    }\n\n    for (const { delta, finish_reason, index, logprobs = null, ...other } of chunk.choices) {\n      let choice = snapshot.choices[index];\n      if (!choice) {\n        choice = snapshot.choices[index] = { finish_reason, index, message: {}, logprobs, ...other };\n      }\n\n      if (logprobs) {\n        if (!choice.logprobs) {\n          choice.logprobs = Object.assign({}, logprobs);\n        } else {\n          const { content, refusal, ...rest } = logprobs;\n          assertIsEmpty(rest);\n          Object.assign(choice.logprobs, rest);\n\n          if (content) {\n            choice.logprobs.content ??= [];\n            choice.logprobs.content.push(...content);\n          }\n\n          if (refusal) {\n            choice.logprobs.refusal ??= [];\n            choice.logprobs.refusal.push(...refusal);\n          }\n        }\n      }\n\n      if (finish_reason) {\n        choice.finish_reason = finish_reason;\n\n        if (this.#params && hasAutoParseableInput(this.#params)) {\n          if (finish_reason === 'length') {\n            throw new LengthFinishReasonError();\n          }\n\n          if (finish_reason === 'content_filter') {\n            throw new ContentFilterFinishReasonError();\n          }\n        }\n      }\n\n      Object.assign(choice, other);\n\n      if (!delta) continue; // Shouldn't happen; just in case.\n\n      const { content, refusal, function_call, role, tool_calls, ...rest } = delta;\n      assertIsEmpty(rest);\n      Object.assign(choice.message, rest);\n\n      if (refusal) {\n        choice.message.refusal = (choice.message.refusal || '') + refusal;\n      }\n\n      if (role) choice.message.role = role;\n      if (function_call) {\n        if (!choice.message.function_call) {\n          choice.message.function_call = function_call;\n        } else {\n          if (function_call.name) choice.message.function_call.name = function_call.name;\n          if (function_call.arguments) {\n            choice.message.function_call.arguments ??= '';\n            choice.message.function_call.arguments += function_call.arguments;\n          }\n        }\n      }\n      if (content) {\n        choice.message.content = (choice.message.content || '') + content;\n\n        if (!choice.message.refusal && this.#getAutoParseableResponseFormat()) {\n          choice.message.parsed = partialParse(choice.message.content);\n        }\n      }\n\n      if (tool_calls) {\n        if (!choice.message.tool_calls) choice.message.tool_calls = [];\n\n        for (const { index, id, type, function: fn, ...rest } of tool_calls) {\n          const tool_call = (choice.message.tool_calls[index] ??=\n            {} as ChatCompletionSnapshot.Choice.Message.ToolCall);\n          Object.assign(tool_call, rest);\n          if (id) tool_call.id = id;\n          if (type) tool_call.type = type;\n          if (fn) tool_call.function ??= { name: fn.name ?? '', arguments: '' };\n          if (fn?.name) tool_call.function!.name = fn.name;\n          if (fn?.arguments) {\n            tool_call.function!.arguments += fn.arguments;\n\n            if (shouldParseToolCall(this.#params, tool_call)) {\n              tool_call.function!.parsed_arguments = partialParse(tool_call.function!.arguments);\n            }\n          }\n        }\n      }\n    }\n    return snapshot;\n  }\n\n  [Symbol.asyncIterator](this: ChatCompletionStream<ParsedT>): AsyncIterator<ChatCompletionChunk> {\n    const pushQueue: ChatCompletionChunk[] = [];\n    const readQueue: {\n      resolve: (chunk: ChatCompletionChunk | undefined) => void;\n      reject: (err: unknown) => void;\n    }[] = [];\n    let done = false;\n\n    this.on('chunk', (chunk) => {\n      const reader = readQueue.shift();\n      if (reader) {\n        reader.resolve(chunk);\n      } else {\n        pushQueue.push(chunk);\n      }\n    });\n\n    this.on('end', () => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.resolve(undefined);\n      }\n      readQueue.length = 0;\n    });\n\n    this.on('abort', (err) => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n\n    this.on('error', (err) => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n\n    return {\n      next: async (): Promise<IteratorResult<ChatCompletionChunk>> => {\n        if (!pushQueue.length) {\n          if (done) {\n            return { value: undefined, done: true };\n          }\n          return new Promise<ChatCompletionChunk | undefined>((resolve, reject) =>\n            readQueue.push({ resolve, reject }),\n          ).then((chunk) => (chunk ? { value: chunk, done: false } : { value: undefined, done: true }));\n        }\n        const chunk = pushQueue.shift()!;\n        return { value: chunk, done: false };\n      },\n      return: async () => {\n        this.abort();\n        return { value: undefined, done: true };\n      },\n    };\n  }\n\n  toReadableStream(): ReadableStream {\n    const stream = new Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n    return stream.toReadableStream();\n  }\n}\n\nfunction finalizeChatCompletion<ParsedT>(\n  snapshot: ChatCompletionSnapshot,\n  params: ChatCompletionCreateParams | null,\n): ParsedChatCompletion<ParsedT> {\n  const { id, choices, created, model, system_fingerprint, ...rest } = snapshot;\n  const completion: ChatCompletion = {\n    ...rest,\n    id,\n    choices: choices.map(\n      ({ message, finish_reason, index, logprobs, ...choiceRest }): ChatCompletion.Choice => {\n        if (!finish_reason) {\n          throw new OpenAIError(`missing finish_reason for choice ${index}`);\n        }\n\n        const { content = null, function_call, tool_calls, ...messageRest } = message;\n        const role = message.role as 'assistant'; // this is what we expect; in theory it could be different which would make our types a slight lie but would be fine.\n        if (!role) {\n          throw new OpenAIError(`missing role for choice ${index}`);\n        }\n\n        if (function_call) {\n          const { arguments: args, name } = function_call;\n          if (args == null) {\n            throw new OpenAIError(`missing function_call.arguments for choice ${index}`);\n          }\n\n          if (!name) {\n            throw new OpenAIError(`missing function_call.name for choice ${index}`);\n          }\n\n          return {\n            ...choiceRest,\n            message: {\n              content,\n              function_call: { arguments: args, name },\n              role,\n              refusal: message.refusal ?? null,\n            },\n            finish_reason,\n            index,\n            logprobs,\n          };\n        }\n\n        if (tool_calls) {\n          return {\n            ...choiceRest,\n            index,\n            finish_reason,\n            logprobs,\n            message: {\n              ...messageRest,\n              role,\n              content,\n              refusal: message.refusal ?? null,\n              tool_calls: tool_calls.map((tool_call, i) => {\n                const { function: fn, type, id, ...toolRest } = tool_call;\n                const { arguments: args, name, ...fnRest } = fn || {};\n                if (id == null) {\n                  throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].id\\n${str(snapshot)}`);\n                }\n                if (type == null) {\n                  throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].type\\n${str(snapshot)}`);\n                }\n                if (name == null) {\n                  throw new OpenAIError(\n                    `missing choices[${index}].tool_calls[${i}].function.name\\n${str(snapshot)}`,\n                  );\n                }\n                if (args == null) {\n                  throw new OpenAIError(\n                    `missing choices[${index}].tool_calls[${i}].function.arguments\\n${str(snapshot)}`,\n                  );\n                }\n\n                return { ...toolRest, id, type, function: { ...fnRest, name, arguments: args } };\n              }),\n            },\n          };\n        }\n        return {\n          ...choiceRest,\n          message: { ...messageRest, content, role, refusal: message.refusal ?? null },\n          finish_reason,\n          index,\n          logprobs,\n        };\n      },\n    ),\n    created,\n    model,\n    object: 'chat.completion',\n    ...(system_fingerprint ? { system_fingerprint } : {}),\n  };\n\n  return maybeParseChatCompletion(completion, params);\n}\n\nfunction str(x: unknown) {\n  return JSON.stringify(x);\n}\n\n/**\n * Represents a streamed chunk of a chat completion response returned by model,\n * based on the provided input.\n */\nexport interface ChatCompletionSnapshot {\n  /**\n   * A unique identifier for the chat completion.\n   */\n  id: string;\n\n  /**\n   * A list of chat completion choices. Can be more than one if `n` is greater\n   * than 1.\n   */\n  choices: Array<ChatCompletionSnapshot.Choice>;\n\n  /**\n   * The Unix timestamp (in seconds) of when the chat completion was created.\n   */\n  created: number;\n\n  /**\n   * The model to generate the completion.\n   */\n  model: string;\n\n  // Note we do not include an \"object\" type on the snapshot,\n  // because the object is not a valid \"chat.completion\" until finalized.\n  // object: 'chat.completion';\n\n  /**\n   * This fingerprint represents the backend configuration that the model runs with.\n   *\n   * Can be used in conjunction with the `seed` request parameter to understand when\n   * backend changes have been made that might impact determinism.\n   */\n  system_fingerprint?: string;\n}\n\nexport namespace ChatCompletionSnapshot {\n  export interface Choice {\n    /**\n     * A chat completion delta generated by streamed model responses.\n     */\n    message: Choice.Message;\n\n    /**\n     * The reason the model stopped generating tokens. This will be `stop` if the model\n     * hit a natural stop point or a provided stop sequence, `length` if the maximum\n     * number of tokens specified in the request was reached, `content_filter` if\n     * content was omitted due to a flag from our content filters, or `function_call`\n     * if the model called a function.\n     */\n    finish_reason: ChatCompletion.Choice['finish_reason'] | null;\n\n    /**\n     * Log probability information for the choice.\n     */\n    logprobs: ChatCompletion.Choice.Logprobs | null;\n\n    /**\n     * The index of the choice in the list of choices.\n     */\n    index: number;\n  }\n\n  export namespace Choice {\n    /**\n     * A chat completion delta generated by streamed model responses.\n     */\n    export interface Message {\n      /**\n       * The contents of the chunk message.\n       */\n      content?: string | null;\n\n      refusal?: string | null;\n\n      parsed?: unknown | null;\n\n      /**\n       * The name and arguments of a function that should be called, as generated by the\n       * model.\n       */\n      function_call?: Message.FunctionCall;\n\n      tool_calls?: Array<Message.ToolCall>;\n\n      /**\n       * The role of the author of this message.\n       */\n      role?: 'system' | 'user' | 'assistant' | 'function' | 'tool';\n    }\n\n    export namespace Message {\n      export interface ToolCall {\n        /**\n         * The ID of the tool call.\n         */\n        id: string;\n\n        function: ToolCall.Function;\n\n        /**\n         * The type of the tool.\n         */\n        type: 'function';\n      }\n\n      export namespace ToolCall {\n        export interface Function {\n          /**\n           * The arguments to call the function with, as generated by the model in JSON\n           * format. Note that the model does not always generate valid JSON, and may\n           * hallucinate parameters not defined by your function schema. Validate the\n           * arguments in your code before calling your function.\n           */\n          arguments: string;\n\n          parsed_arguments?: unknown;\n\n          /**\n           * The name of the function to call.\n           */\n          name: string;\n        }\n      }\n\n      /**\n       * The name and arguments of a function that should be called, as generated by the\n       * model.\n       */\n      export interface FunctionCall {\n        /**\n         * The arguments to call the function with, as generated by the model in JSON\n         * format. Note that the model does not always generate valid JSON, and may\n         * hallucinate parameters not defined by your function schema. Validate the\n         * arguments in your code before calling your function.\n         */\n        arguments?: string;\n\n        /**\n         * The name of the function to call.\n         */\n        name?: string;\n      }\n    }\n  }\n}\n\ntype AssertIsEmpty<T extends {}> = keyof T extends never ? T : never;\n\n/**\n * Ensures the given argument is an empty object, useful for\n * asserting that all known properties on an object have been\n * destructured.\n */\nfunction assertIsEmpty<T extends {}>(obj: AssertIsEmpty<T>): asserts obj is AssertIsEmpty<T> {\n  return;\n}\n\nfunction assertNever(_x: never) {}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}