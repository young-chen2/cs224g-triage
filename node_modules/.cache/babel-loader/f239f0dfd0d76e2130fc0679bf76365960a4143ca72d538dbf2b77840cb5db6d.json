{"ast":null,"code":"import { RUN_KEY } from \"@langchain/core/outputs\";\nimport { CallbackManager, parseCallbackConfigArg } from \"@langchain/core/callbacks/manager\";\nimport { ensureConfig } from \"@langchain/core/runnables\";\nimport { BaseLangChain } from \"@langchain/core/language_models/base\";\n/**\n * Base interface that all chains must implement.\n */\nexport class BaseChain extends BaseLangChain {\n  get lc_namespace() {\n    return [\"langchain\", \"chains\", this._chainType()];\n  }\n  constructor(fields, /** @deprecated */\n  verbose, /** @deprecated */\n  callbacks) {\n    if (arguments.length === 1 && typeof fields === \"object\" && !(\"saveContext\" in fields)) {\n      // fields is not a BaseMemory\n      const {\n        memory,\n        callbackManager,\n        ...rest\n      } = fields;\n      super({\n        ...rest,\n        callbacks: callbackManager ?? rest.callbacks\n      });\n      this.memory = memory;\n    } else {\n      // fields is a BaseMemory\n      super({\n        verbose,\n        callbacks\n      });\n      this.memory = fields;\n    }\n  }\n  /** @ignore */\n  _selectMemoryInputs(values) {\n    const valuesForMemory = {\n      ...values\n    };\n    if (\"signal\" in valuesForMemory) {\n      delete valuesForMemory.signal;\n    }\n    if (\"timeout\" in valuesForMemory) {\n      delete valuesForMemory.timeout;\n    }\n    return valuesForMemory;\n  }\n  /**\n   * Invoke the chain with the provided input and returns the output.\n   * @param input Input values for the chain run.\n   * @param config Optional configuration for the Runnable.\n   * @returns Promise that resolves with the output of the chain run.\n   */\n  async invoke(input, options) {\n    const config = ensureConfig(options);\n    const fullValues = await this._formatValues(input);\n    const callbackManager_ = await CallbackManager.configure(config?.callbacks, this.callbacks, config?.tags, this.tags, config?.metadata, this.metadata, {\n      verbose: this.verbose\n    });\n    const runManager = await callbackManager_?.handleChainStart(this.toJSON(), fullValues, undefined, undefined, undefined, undefined, config?.runName);\n    let outputValues;\n    try {\n      outputValues = await (fullValues.signal ? Promise.race([this._call(fullValues, runManager, config), new Promise((_, reject) => {\n        fullValues.signal?.addEventListener(\"abort\", () => {\n          reject(new Error(\"AbortError\"));\n        });\n      })]) : this._call(fullValues, runManager, config));\n    } catch (e) {\n      await runManager?.handleChainError(e);\n      throw e;\n    }\n    if (!(this.memory == null)) {\n      await this.memory.saveContext(this._selectMemoryInputs(input), outputValues);\n    }\n    await runManager?.handleChainEnd(outputValues);\n    // add the runManager's currentRunId to the outputValues\n    Object.defineProperty(outputValues, RUN_KEY, {\n      value: runManager ? {\n        runId: runManager?.runId\n      } : undefined,\n      configurable: true\n    });\n    return outputValues;\n  }\n  _validateOutputs(outputs) {\n    const missingKeys = this.outputKeys.filter(k => !(k in outputs));\n    if (missingKeys.length) {\n      throw new Error(`Missing output keys: ${missingKeys.join(\", \")} from chain ${this._chainType()}`);\n    }\n  }\n  async prepOutputs(inputs, outputs, returnOnlyOutputs = false) {\n    this._validateOutputs(outputs);\n    if (this.memory) {\n      await this.memory.saveContext(inputs, outputs);\n    }\n    if (returnOnlyOutputs) {\n      return outputs;\n    }\n    return {\n      ...inputs,\n      ...outputs\n    };\n  }\n  /**\n   * Return a json-like object representing this chain.\n   */\n  serialize() {\n    throw new Error(\"Method not implemented.\");\n  }\n  /** @deprecated Use .invoke() instead. Will be removed in 0.2.0. */\n  async run(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  input, config) {\n    const inputKeys = this.inputKeys.filter(k => !this.memory?.memoryKeys.includes(k) ?? true);\n    const isKeylessInput = inputKeys.length <= 1;\n    if (!isKeylessInput) {\n      throw new Error(`Chain ${this._chainType()} expects multiple inputs, cannot use 'run' `);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const values = inputKeys.length ? {\n      [inputKeys[0]]: input\n    } : {};\n    const returnValues = await this.call(values, config);\n    const keys = Object.keys(returnValues);\n    if (keys.length === 1) {\n      return returnValues[keys[0]];\n    }\n    throw new Error(\"return values have multiple keys, `run` only supported when one key currently\");\n  }\n  async _formatValues(values) {\n    const fullValues = {\n      ...values\n    };\n    if (fullValues.timeout && !fullValues.signal) {\n      fullValues.signal = AbortSignal.timeout(fullValues.timeout);\n      delete fullValues.timeout;\n    }\n    if (!(this.memory == null)) {\n      const newValues = await this.memory.loadMemoryVariables(this._selectMemoryInputs(values));\n      for (const [key, value] of Object.entries(newValues)) {\n        fullValues[key] = value;\n      }\n    }\n    return fullValues;\n  }\n  /**\n   * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n   *\n   * Run the core logic of this chain and add to output if desired.\n   *\n   * Wraps _call and handles memory.\n   */\n  async call(values, config, /** @deprecated */\n  tags) {\n    const parsedConfig = {\n      tags,\n      ...parseCallbackConfigArg(config)\n    };\n    return this.invoke(values, parsedConfig);\n  }\n  /**\n   * @deprecated Use .batch() instead. Will be removed in 0.2.0.\n   *\n   * Call the chain on all inputs in the list\n   */\n  async apply(inputs, config) {\n    return Promise.all(inputs.map(async (i, idx) => this.call(i, config?.[idx])));\n  }\n  /**\n   * Load a chain from a json-like object describing it.\n   */\n  static async deserialize(data, values = {}) {\n    switch (data._type) {\n      case \"llm_chain\":\n        {\n          const {\n            LLMChain\n          } = await import(\"./llm_chain.js\");\n          return LLMChain.deserialize(data);\n        }\n      case \"sequential_chain\":\n        {\n          const {\n            SequentialChain\n          } = await import(\"./sequential_chain.js\");\n          return SequentialChain.deserialize(data);\n        }\n      case \"simple_sequential_chain\":\n        {\n          const {\n            SimpleSequentialChain\n          } = await import(\"./sequential_chain.js\");\n          return SimpleSequentialChain.deserialize(data);\n        }\n      case \"stuff_documents_chain\":\n        {\n          const {\n            StuffDocumentsChain\n          } = await import(\"./combine_docs_chain.js\");\n          return StuffDocumentsChain.deserialize(data);\n        }\n      case \"map_reduce_documents_chain\":\n        {\n          const {\n            MapReduceDocumentsChain\n          } = await import(\"./combine_docs_chain.js\");\n          return MapReduceDocumentsChain.deserialize(data);\n        }\n      case \"refine_documents_chain\":\n        {\n          const {\n            RefineDocumentsChain\n          } = await import(\"./combine_docs_chain.js\");\n          return RefineDocumentsChain.deserialize(data);\n        }\n      case \"vector_db_qa\":\n        {\n          const {\n            VectorDBQAChain\n          } = await import(\"./vector_db_qa.js\");\n          return VectorDBQAChain.deserialize(data, values);\n        }\n      case \"api_chain\":\n        {\n          const {\n            APIChain\n          } = await import(\"./api/api_chain.js\");\n          return APIChain.deserialize(data);\n        }\n      default:\n        throw new Error(`Invalid prompt type in config: ${data._type}`);\n    }\n  }\n}","map":{"version":3,"names":["RUN_KEY","CallbackManager","parseCallbackConfigArg","ensureConfig","BaseLangChain","BaseChain","lc_namespace","_chainType","constructor","fields","verbose","callbacks","arguments","length","memory","callbackManager","rest","_selectMemoryInputs","values","valuesForMemory","signal","timeout","invoke","input","options","config","fullValues","_formatValues","callbackManager_","configure","tags","metadata","runManager","handleChainStart","toJSON","undefined","runName","outputValues","Promise","race","_call","_","reject","addEventListener","Error","e","handleChainError","saveContext","handleChainEnd","Object","defineProperty","value","runId","configurable","_validateOutputs","outputs","missingKeys","outputKeys","filter","k","join","prepOutputs","inputs","returnOnlyOutputs","serialize","run","inputKeys","memoryKeys","includes","isKeylessInput","returnValues","call","keys","AbortSignal","newValues","loadMemoryVariables","key","entries","parsedConfig","apply","all","map","i","idx","deserialize","data","_type","LLMChain","SequentialChain","SimpleSequentialChain","StuffDocumentsChain","MapReduceDocumentsChain","RefineDocumentsChain","VectorDBQAChain","APIChain"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/langchain/dist/chains/base.js"],"sourcesContent":["import { RUN_KEY } from \"@langchain/core/outputs\";\nimport { CallbackManager, parseCallbackConfigArg, } from \"@langchain/core/callbacks/manager\";\nimport { ensureConfig } from \"@langchain/core/runnables\";\nimport { BaseLangChain, } from \"@langchain/core/language_models/base\";\n/**\n * Base interface that all chains must implement.\n */\nexport class BaseChain extends BaseLangChain {\n    get lc_namespace() {\n        return [\"langchain\", \"chains\", this._chainType()];\n    }\n    constructor(fields, \n    /** @deprecated */\n    verbose, \n    /** @deprecated */\n    callbacks) {\n        if (arguments.length === 1 &&\n            typeof fields === \"object\" &&\n            !(\"saveContext\" in fields)) {\n            // fields is not a BaseMemory\n            const { memory, callbackManager, ...rest } = fields;\n            super({ ...rest, callbacks: callbackManager ?? rest.callbacks });\n            this.memory = memory;\n        }\n        else {\n            // fields is a BaseMemory\n            super({ verbose, callbacks });\n            this.memory = fields;\n        }\n    }\n    /** @ignore */\n    _selectMemoryInputs(values) {\n        const valuesForMemory = { ...values };\n        if (\"signal\" in valuesForMemory) {\n            delete valuesForMemory.signal;\n        }\n        if (\"timeout\" in valuesForMemory) {\n            delete valuesForMemory.timeout;\n        }\n        return valuesForMemory;\n    }\n    /**\n     * Invoke the chain with the provided input and returns the output.\n     * @param input Input values for the chain run.\n     * @param config Optional configuration for the Runnable.\n     * @returns Promise that resolves with the output of the chain run.\n     */\n    async invoke(input, options) {\n        const config = ensureConfig(options);\n        const fullValues = await this._formatValues(input);\n        const callbackManager_ = await CallbackManager.configure(config?.callbacks, this.callbacks, config?.tags, this.tags, config?.metadata, this.metadata, { verbose: this.verbose });\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), fullValues, undefined, undefined, undefined, undefined, config?.runName);\n        let outputValues;\n        try {\n            outputValues = await (fullValues.signal\n                ? Promise.race([\n                    this._call(fullValues, runManager, config),\n                    new Promise((_, reject) => {\n                        fullValues.signal?.addEventListener(\"abort\", () => {\n                            reject(new Error(\"AbortError\"));\n                        });\n                    }),\n                ])\n                : this._call(fullValues, runManager, config));\n        }\n        catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        if (!(this.memory == null)) {\n            await this.memory.saveContext(this._selectMemoryInputs(input), outputValues);\n        }\n        await runManager?.handleChainEnd(outputValues);\n        // add the runManager's currentRunId to the outputValues\n        Object.defineProperty(outputValues, RUN_KEY, {\n            value: runManager ? { runId: runManager?.runId } : undefined,\n            configurable: true,\n        });\n        return outputValues;\n    }\n    _validateOutputs(outputs) {\n        const missingKeys = this.outputKeys.filter((k) => !(k in outputs));\n        if (missingKeys.length) {\n            throw new Error(`Missing output keys: ${missingKeys.join(\", \")} from chain ${this._chainType()}`);\n        }\n    }\n    async prepOutputs(inputs, outputs, returnOnlyOutputs = false) {\n        this._validateOutputs(outputs);\n        if (this.memory) {\n            await this.memory.saveContext(inputs, outputs);\n        }\n        if (returnOnlyOutputs) {\n            return outputs;\n        }\n        return { ...inputs, ...outputs };\n    }\n    /**\n     * Return a json-like object representing this chain.\n     */\n    serialize() {\n        throw new Error(\"Method not implemented.\");\n    }\n    /** @deprecated Use .invoke() instead. Will be removed in 0.2.0. */\n    async run(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    input, config) {\n        const inputKeys = this.inputKeys.filter((k) => !this.memory?.memoryKeys.includes(k) ?? true);\n        const isKeylessInput = inputKeys.length <= 1;\n        if (!isKeylessInput) {\n            throw new Error(`Chain ${this._chainType()} expects multiple inputs, cannot use 'run' `);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const values = inputKeys.length ? { [inputKeys[0]]: input } : {};\n        const returnValues = await this.call(values, config);\n        const keys = Object.keys(returnValues);\n        if (keys.length === 1) {\n            return returnValues[keys[0]];\n        }\n        throw new Error(\"return values have multiple keys, `run` only supported when one key currently\");\n    }\n    async _formatValues(values) {\n        const fullValues = { ...values };\n        if (fullValues.timeout && !fullValues.signal) {\n            fullValues.signal = AbortSignal.timeout(fullValues.timeout);\n            delete fullValues.timeout;\n        }\n        if (!(this.memory == null)) {\n            const newValues = await this.memory.loadMemoryVariables(this._selectMemoryInputs(values));\n            for (const [key, value] of Object.entries(newValues)) {\n                fullValues[key] = value;\n            }\n        }\n        return fullValues;\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * Run the core logic of this chain and add to output if desired.\n     *\n     * Wraps _call and handles memory.\n     */\n    async call(values, config, \n    /** @deprecated */\n    tags) {\n        const parsedConfig = { tags, ...parseCallbackConfigArg(config) };\n        return this.invoke(values, parsedConfig);\n    }\n    /**\n     * @deprecated Use .batch() instead. Will be removed in 0.2.0.\n     *\n     * Call the chain on all inputs in the list\n     */\n    async apply(inputs, config) {\n        return Promise.all(inputs.map(async (i, idx) => this.call(i, config?.[idx])));\n    }\n    /**\n     * Load a chain from a json-like object describing it.\n     */\n    static async deserialize(data, values = {}) {\n        switch (data._type) {\n            case \"llm_chain\": {\n                const { LLMChain } = await import(\"./llm_chain.js\");\n                return LLMChain.deserialize(data);\n            }\n            case \"sequential_chain\": {\n                const { SequentialChain } = await import(\"./sequential_chain.js\");\n                return SequentialChain.deserialize(data);\n            }\n            case \"simple_sequential_chain\": {\n                const { SimpleSequentialChain } = await import(\"./sequential_chain.js\");\n                return SimpleSequentialChain.deserialize(data);\n            }\n            case \"stuff_documents_chain\": {\n                const { StuffDocumentsChain } = await import(\"./combine_docs_chain.js\");\n                return StuffDocumentsChain.deserialize(data);\n            }\n            case \"map_reduce_documents_chain\": {\n                const { MapReduceDocumentsChain } = await import(\"./combine_docs_chain.js\");\n                return MapReduceDocumentsChain.deserialize(data);\n            }\n            case \"refine_documents_chain\": {\n                const { RefineDocumentsChain } = await import(\"./combine_docs_chain.js\");\n                return RefineDocumentsChain.deserialize(data);\n            }\n            case \"vector_db_qa\": {\n                const { VectorDBQAChain } = await import(\"./vector_db_qa.js\");\n                return VectorDBQAChain.deserialize(data, values);\n            }\n            case \"api_chain\": {\n                const { APIChain } = await import(\"./api/api_chain.js\");\n                return APIChain.deserialize(data);\n            }\n            default:\n                throw new Error(`Invalid prompt type in config: ${data._type}`);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}