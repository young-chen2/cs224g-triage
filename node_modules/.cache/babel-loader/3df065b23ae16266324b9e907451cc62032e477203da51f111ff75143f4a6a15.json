{"ast":null,"code":"// Default generic \"any\" values are for backwards compatibility.\n// Replace with \"string\" when we are comfortable with a breaking change.\nimport { AIMessage, HumanMessage, SystemMessage, BaseMessage, ChatMessage, coerceMessageLikeToMessage, isBaseMessage } from \"../messages/index.js\";\nimport { ChatPromptValue } from \"../prompt_values.js\";\nimport { Runnable } from \"../runnables/base.js\";\nimport { BaseStringPromptTemplate } from \"./string.js\";\nimport { BasePromptTemplate } from \"./base.js\";\nimport { PromptTemplate } from \"./prompt.js\";\nimport { ImagePromptTemplate } from \"./image.js\";\nimport { parseFString, parseMustache } from \"./template.js\";\nimport { addLangChainErrorFields } from \"../errors/index.js\";\n/**\n * Abstract class that serves as a base for creating message prompt\n * templates. It defines how to format messages for different roles in a\n * conversation.\n */\nexport class BaseMessagePromptTemplate extends Runnable {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"lc_namespace\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [\"langchain_core\", \"prompts\", \"chat\"]\n    });\n    Object.defineProperty(this, \"lc_serializable\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n  }\n  /**\n   * Calls the formatMessages method with the provided input and options.\n   * @param input Input for the formatMessages method\n   * @param options Optional BaseCallbackConfig\n   * @returns Formatted output messages\n   */\n  async invoke(input, options) {\n    return this._callWithConfig(input => this.formatMessages(input), input, {\n      ...options,\n      runType: \"prompt\"\n    });\n  }\n}\n/**\n * Class that represents a placeholder for messages in a chat prompt. It\n * extends the BaseMessagePromptTemplate.\n */\nexport class MessagesPlaceholder extends BaseMessagePromptTemplate {\n  static lc_name() {\n    return \"MessagesPlaceholder\";\n  }\n  constructor(fields) {\n    if (typeof fields === \"string\") {\n      // eslint-disable-next-line no-param-reassign\n      fields = {\n        variableName: fields\n      };\n    }\n    super(fields);\n    Object.defineProperty(this, \"variableName\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"optional\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.variableName = fields.variableName;\n    this.optional = fields.optional ?? false;\n  }\n  get inputVariables() {\n    return [this.variableName];\n  }\n  async formatMessages(values) {\n    const input = values[this.variableName];\n    if (this.optional && !input) {\n      return [];\n    } else if (!input) {\n      const error = new Error(`Field \"${this.variableName}\" in prompt uses a MessagesPlaceholder, which expects an array of BaseMessages as an input value. Received: undefined`);\n      error.name = \"InputFormatError\";\n      throw error;\n    }\n    let formattedMessages;\n    try {\n      if (Array.isArray(input)) {\n        formattedMessages = input.map(coerceMessageLikeToMessage);\n      } else {\n        formattedMessages = [coerceMessageLikeToMessage(input)];\n      }\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (e) {\n      const readableInput = typeof input === \"string\" ? input : JSON.stringify(input, null, 2);\n      const error = new Error([`Field \"${this.variableName}\" in prompt uses a MessagesPlaceholder, which expects an array of BaseMessages or coerceable values as input.`, `Received value: ${readableInput}`, `Additional message: ${e.message}`].join(\"\\n\\n\"));\n      error.name = \"InputFormatError\";\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      error.lc_error_code = e.lc_error_code;\n      throw error;\n    }\n    return formattedMessages;\n  }\n}\n/**\n * Abstract class that serves as a base for creating message string prompt\n * templates. It extends the BaseMessagePromptTemplate.\n */\nexport class BaseMessageStringPromptTemplate extends BaseMessagePromptTemplate {\n  constructor(fields) {\n    if (!(\"prompt\" in fields)) {\n      // eslint-disable-next-line no-param-reassign\n      fields = {\n        prompt: fields\n      };\n    }\n    super(fields);\n    Object.defineProperty(this, \"prompt\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.prompt = fields.prompt;\n  }\n  get inputVariables() {\n    return this.prompt.inputVariables;\n  }\n  async formatMessages(values) {\n    return [await this.format(values)];\n  }\n}\n/**\n * Abstract class that serves as a base for creating chat prompt\n * templates. It extends the BasePromptTemplate.\n */\nexport class BaseChatPromptTemplate extends BasePromptTemplate {\n  constructor(input) {\n    super(input);\n  }\n  async format(values) {\n    return (await this.formatPromptValue(values)).toString();\n  }\n  async formatPromptValue(values) {\n    const resultMessages = await this.formatMessages(values);\n    return new ChatPromptValue(resultMessages);\n  }\n}\n/**\n * Class that represents a chat message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n */\nexport class ChatMessagePromptTemplate extends BaseMessageStringPromptTemplate {\n  static lc_name() {\n    return \"ChatMessagePromptTemplate\";\n  }\n  constructor(fields, role) {\n    if (!(\"prompt\" in fields)) {\n      // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n      fields = {\n        prompt: fields,\n        role: role\n      };\n    }\n    super(fields);\n    Object.defineProperty(this, \"role\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.role = fields.role;\n  }\n  async format(values) {\n    return new ChatMessage(await this.prompt.format(values), this.role);\n  }\n  static fromTemplate(template, role, options) {\n    return new this(PromptTemplate.fromTemplate(template, {\n      templateFormat: options?.templateFormat\n    }), role);\n  }\n}\nclass _StringImageMessagePromptTemplate extends BaseMessagePromptTemplate {\n  static _messageClass() {\n    throw new Error(\"Can not invoke _messageClass from inside _StringImageMessagePromptTemplate\");\n  }\n  constructor(/** @TODO When we come up with a better way to type prompt templates, fix this */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  fields, additionalOptions) {\n    if (!(\"prompt\" in fields)) {\n      // eslint-disable-next-line no-param-reassign\n      fields = {\n        prompt: fields\n      };\n    }\n    super(fields);\n    Object.defineProperty(this, \"lc_namespace\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [\"langchain_core\", \"prompts\", \"chat\"]\n    });\n    Object.defineProperty(this, \"lc_serializable\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.defineProperty(this, \"inputVariables\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, \"additionalOptions\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"prompt\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"messageClass\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    // ChatMessage contains role field, others don't.\n    // Because of this, we have a separate class property for ChatMessage.\n    Object.defineProperty(this, \"chatMessageClass\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.prompt = fields.prompt;\n    if (Array.isArray(this.prompt)) {\n      let inputVariables = [];\n      this.prompt.forEach(prompt => {\n        if (\"inputVariables\" in prompt) {\n          inputVariables = inputVariables.concat(prompt.inputVariables);\n        }\n      });\n      this.inputVariables = inputVariables;\n    } else {\n      this.inputVariables = this.prompt.inputVariables;\n    }\n    this.additionalOptions = additionalOptions ?? this.additionalOptions;\n  }\n  createMessage(content) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const constructor = this.constructor;\n    if (constructor._messageClass()) {\n      const MsgClass = constructor._messageClass();\n      return new MsgClass({\n        content\n      });\n    } else if (constructor.chatMessageClass) {\n      const MsgClass = constructor.chatMessageClass();\n      // Assuming ChatMessage constructor also takes a content argument\n      return new MsgClass({\n        content,\n        role: this.getRoleFromMessageClass(MsgClass.lc_name())\n      });\n    } else {\n      throw new Error(\"No message class defined\");\n    }\n  }\n  getRoleFromMessageClass(name) {\n    switch (name) {\n      case \"HumanMessage\":\n        return \"human\";\n      case \"AIMessage\":\n        return \"ai\";\n      case \"SystemMessage\":\n        return \"system\";\n      case \"ChatMessage\":\n        return \"chat\";\n      default:\n        throw new Error(\"Invalid message class name\");\n    }\n  }\n  static fromTemplate(template, additionalOptions) {\n    if (typeof template === \"string\") {\n      return new this(PromptTemplate.fromTemplate(template, additionalOptions));\n    }\n    const prompt = [];\n    for (const item of template) {\n      if (typeof item === \"string\" || typeof item === \"object\" && \"text\" in item) {\n        let text = \"\";\n        if (typeof item === \"string\") {\n          text = item;\n        } else if (typeof item.text === \"string\") {\n          text = item.text ?? \"\";\n        }\n        const options = {\n          ...additionalOptions,\n          ...(typeof item !== \"string\" ? {\n            additionalContentFields: item\n          } : {})\n        };\n        prompt.push(PromptTemplate.fromTemplate(text, options));\n      } else if (typeof item === \"object\" && \"image_url\" in item) {\n        let imgTemplate = item.image_url ?? \"\";\n        let imgTemplateObject;\n        let inputVariables = [];\n        if (typeof imgTemplate === \"string\") {\n          let parsedTemplate;\n          if (additionalOptions?.templateFormat === \"mustache\") {\n            parsedTemplate = parseMustache(imgTemplate);\n          } else {\n            parsedTemplate = parseFString(imgTemplate);\n          }\n          const variables = parsedTemplate.flatMap(item => item.type === \"variable\" ? [item.name] : []);\n          if ((variables?.length ?? 0) > 0) {\n            if (variables.length > 1) {\n              throw new Error(`Only one format variable allowed per image template.\\nGot: ${variables}\\nFrom: ${imgTemplate}`);\n            }\n            inputVariables = [variables[0]];\n          } else {\n            inputVariables = [];\n          }\n          imgTemplate = {\n            url: imgTemplate\n          };\n          imgTemplateObject = new ImagePromptTemplate({\n            template: imgTemplate,\n            inputVariables,\n            templateFormat: additionalOptions?.templateFormat,\n            additionalContentFields: item\n          });\n        } else if (typeof imgTemplate === \"object\") {\n          if (\"url\" in imgTemplate) {\n            let parsedTemplate;\n            if (additionalOptions?.templateFormat === \"mustache\") {\n              parsedTemplate = parseMustache(imgTemplate.url);\n            } else {\n              parsedTemplate = parseFString(imgTemplate.url);\n            }\n            inputVariables = parsedTemplate.flatMap(item => item.type === \"variable\" ? [item.name] : []);\n          } else {\n            inputVariables = [];\n          }\n          imgTemplateObject = new ImagePromptTemplate({\n            template: imgTemplate,\n            inputVariables,\n            templateFormat: additionalOptions?.templateFormat,\n            additionalContentFields: item\n          });\n        } else {\n          throw new Error(\"Invalid image template\");\n        }\n        prompt.push(imgTemplateObject);\n      }\n    }\n    return new this({\n      prompt,\n      additionalOptions\n    });\n  }\n  async format(input) {\n    // eslint-disable-next-line no-instanceof/no-instanceof\n    if (this.prompt instanceof BaseStringPromptTemplate) {\n      const text = await this.prompt.format(input);\n      return this.createMessage(text);\n    } else {\n      const content = [];\n      for (const prompt of this.prompt) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let inputs = {};\n        if (!(\"inputVariables\" in prompt)) {\n          throw new Error(`Prompt ${prompt} does not have inputVariables defined.`);\n        }\n        for (const item of prompt.inputVariables) {\n          if (!inputs) {\n            inputs = {\n              [item]: input[item]\n            };\n          }\n          inputs = {\n            ...inputs,\n            [item]: input[item]\n          };\n        }\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (prompt instanceof BaseStringPromptTemplate) {\n          const formatted = await prompt.format(inputs);\n          let additionalContentFields;\n          if (\"additionalContentFields\" in prompt) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            additionalContentFields = prompt.additionalContentFields;\n          }\n          content.push({\n            ...additionalContentFields,\n            type: \"text\",\n            text: formatted\n          });\n          /** @TODO replace this */\n          // eslint-disable-next-line no-instanceof/no-instanceof\n        } else if (prompt instanceof ImagePromptTemplate) {\n          const formatted = await prompt.format(inputs);\n          let additionalContentFields;\n          if (\"additionalContentFields\" in prompt) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            additionalContentFields = prompt.additionalContentFields;\n          }\n          content.push({\n            ...additionalContentFields,\n            type: \"image_url\",\n            image_url: formatted\n          });\n        }\n      }\n      return this.createMessage(content);\n    }\n  }\n  async formatMessages(values) {\n    return [await this.format(values)];\n  }\n}\n/**\n * Class that represents a human message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n * @example\n * ```typescript\n * const message = HumanMessagePromptTemplate.fromTemplate(\"{text}\");\n * const formatted = await message.format({ text: \"Hello world!\" });\n *\n * const chatPrompt = ChatPromptTemplate.fromMessages([message]);\n * const formattedChatPrompt = await chatPrompt.invoke({\n *   text: \"Hello world!\",\n * });\n * ```\n */\nexport class HumanMessagePromptTemplate extends _StringImageMessagePromptTemplate {\n  static _messageClass() {\n    return HumanMessage;\n  }\n  static lc_name() {\n    return \"HumanMessagePromptTemplate\";\n  }\n}\n/**\n * Class that represents an AI message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n */\nexport class AIMessagePromptTemplate extends _StringImageMessagePromptTemplate {\n  static _messageClass() {\n    return AIMessage;\n  }\n  static lc_name() {\n    return \"AIMessagePromptTemplate\";\n  }\n}\n/**\n * Class that represents a system message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n * @example\n * ```typescript\n * const message = SystemMessagePromptTemplate.fromTemplate(\"{text}\");\n * const formatted = await message.format({ text: \"Hello world!\" });\n *\n * const chatPrompt = ChatPromptTemplate.fromMessages([message]);\n * const formattedChatPrompt = await chatPrompt.invoke({\n *   text: \"Hello world!\",\n * });\n * ```\n */\nexport class SystemMessagePromptTemplate extends _StringImageMessagePromptTemplate {\n  static _messageClass() {\n    return SystemMessage;\n  }\n  static lc_name() {\n    return \"SystemMessagePromptTemplate\";\n  }\n}\nfunction _isBaseMessagePromptTemplate(baseMessagePromptTemplateLike) {\n  return typeof baseMessagePromptTemplateLike.formatMessages === \"function\";\n}\nfunction _coerceMessagePromptTemplateLike(messagePromptTemplateLike, extra) {\n  if (_isBaseMessagePromptTemplate(messagePromptTemplateLike) || isBaseMessage(messagePromptTemplateLike)) {\n    return messagePromptTemplateLike;\n  }\n  if (Array.isArray(messagePromptTemplateLike) && messagePromptTemplateLike[0] === \"placeholder\") {\n    const messageContent = messagePromptTemplateLike[1];\n    if (extra?.templateFormat === \"mustache\" && typeof messageContent === \"string\" && messageContent.slice(0, 2) === \"{{\" && messageContent.slice(-2) === \"}}\") {\n      const variableName = messageContent.slice(2, -2);\n      return new MessagesPlaceholder({\n        variableName,\n        optional: true\n      });\n    } else if (typeof messageContent === \"string\" && messageContent[0] === \"{\" && messageContent[messageContent.length - 1] === \"}\") {\n      const variableName = messageContent.slice(1, -1);\n      return new MessagesPlaceholder({\n        variableName,\n        optional: true\n      });\n    }\n    throw new Error(`Invalid placeholder template for format ${extra?.templateFormat ?? `\"f-string\"`}: \"${messagePromptTemplateLike[1]}\". Expected a variable name surrounded by ${extra?.templateFormat === \"mustache\" ? \"double\" : \"single\"} curly braces.`);\n  }\n  const message = coerceMessageLikeToMessage(messagePromptTemplateLike);\n  let templateData;\n  if (typeof message.content === \"string\") {\n    templateData = message.content;\n  } else {\n    // Assuming message.content is an array of complex objects, transform it.\n    templateData = message.content.map(item => {\n      if (\"text\" in item) {\n        return {\n          ...item,\n          text: item.text\n        };\n      } else if (\"image_url\" in item) {\n        return {\n          ...item,\n          image_url: item.image_url\n        };\n      } else {\n        return item;\n      }\n    });\n  }\n  if (message._getType() === \"human\") {\n    return HumanMessagePromptTemplate.fromTemplate(templateData, extra);\n  } else if (message._getType() === \"ai\") {\n    return AIMessagePromptTemplate.fromTemplate(templateData, extra);\n  } else if (message._getType() === \"system\") {\n    return SystemMessagePromptTemplate.fromTemplate(templateData, extra);\n  } else if (ChatMessage.isInstance(message)) {\n    return ChatMessagePromptTemplate.fromTemplate(message.content, message.role, extra);\n  } else {\n    throw new Error(`Could not coerce message prompt template from input. Received message type: \"${message._getType()}\".`);\n  }\n}\nfunction isMessagesPlaceholder(x) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return x.constructor.lc_name() === \"MessagesPlaceholder\";\n}\n/**\n * Class that represents a chat prompt. It extends the\n * BaseChatPromptTemplate and uses an array of BaseMessagePromptTemplate\n * instances to format a series of messages for a conversation.\n * @example\n * ```typescript\n * const message = SystemMessagePromptTemplate.fromTemplate(\"{text}\");\n * const chatPrompt = ChatPromptTemplate.fromMessages([\n *   [\"ai\", \"You are a helpful assistant.\"],\n *   message,\n * ]);\n * const formattedChatPrompt = await chatPrompt.invoke({\n *   text: \"Hello world!\",\n * });\n * ```\n */\nexport class ChatPromptTemplate extends BaseChatPromptTemplate {\n  static lc_name() {\n    return \"ChatPromptTemplate\";\n  }\n  get lc_aliases() {\n    return {\n      promptMessages: \"messages\"\n    };\n  }\n  constructor(input) {\n    super(input);\n    Object.defineProperty(this, \"promptMessages\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"validateTemplate\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.defineProperty(this, \"templateFormat\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"f-string\"\n    });\n    // If input is mustache and validateTemplate is not defined, set it to false\n    if (input.templateFormat === \"mustache\" && input.validateTemplate === undefined) {\n      this.validateTemplate = false;\n    }\n    Object.assign(this, input);\n    if (this.validateTemplate) {\n      const inputVariablesMessages = new Set();\n      for (const promptMessage of this.promptMessages) {\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (promptMessage instanceof BaseMessage) continue;\n        for (const inputVariable of promptMessage.inputVariables) {\n          inputVariablesMessages.add(inputVariable);\n        }\n      }\n      const totalInputVariables = this.inputVariables;\n      const inputVariablesInstance = new Set(this.partialVariables ? totalInputVariables.concat(Object.keys(this.partialVariables)) : totalInputVariables);\n      const difference = new Set([...inputVariablesInstance].filter(x => !inputVariablesMessages.has(x)));\n      if (difference.size > 0) {\n        throw new Error(`Input variables \\`${[...difference]}\\` are not used in any of the prompt messages.`);\n      }\n      const otherDifference = new Set([...inputVariablesMessages].filter(x => !inputVariablesInstance.has(x)));\n      if (otherDifference.size > 0) {\n        throw new Error(`Input variables \\`${[...otherDifference]}\\` are used in prompt messages but not in the prompt template.`);\n      }\n    }\n  }\n  _getPromptType() {\n    return \"chat\";\n  }\n  async _parseImagePrompts(message, inputValues) {\n    if (typeof message.content === \"string\") {\n      return message;\n    }\n    const formattedMessageContent = await Promise.all(message.content.map(async item => {\n      if (item.type !== \"image_url\") {\n        return item;\n      }\n      let imageUrl = \"\";\n      if (typeof item.image_url === \"string\") {\n        imageUrl = item.image_url;\n      } else {\n        imageUrl = item.image_url.url;\n      }\n      const promptTemplatePlaceholder = PromptTemplate.fromTemplate(imageUrl, {\n        templateFormat: this.templateFormat\n      });\n      const formattedUrl = await promptTemplatePlaceholder.format(inputValues);\n      if (typeof item.image_url !== \"string\" && \"url\" in item.image_url) {\n        // eslint-disable-next-line no-param-reassign\n        item.image_url.url = formattedUrl;\n      } else {\n        // eslint-disable-next-line no-param-reassign\n        item.image_url = formattedUrl;\n      }\n      return item;\n    }));\n    // eslint-disable-next-line no-param-reassign\n    message.content = formattedMessageContent;\n    return message;\n  }\n  async formatMessages(values) {\n    const allValues = await this.mergePartialAndUserVariables(values);\n    let resultMessages = [];\n    for (const promptMessage of this.promptMessages) {\n      // eslint-disable-next-line no-instanceof/no-instanceof\n      if (promptMessage instanceof BaseMessage) {\n        resultMessages.push(await this._parseImagePrompts(promptMessage, allValues));\n      } else {\n        const inputValues = promptMessage.inputVariables.reduce((acc, inputVariable) => {\n          if (!(inputVariable in allValues) && !(isMessagesPlaceholder(promptMessage) && promptMessage.optional)) {\n            const error = addLangChainErrorFields(new Error(`Missing value for input variable \\`${inputVariable.toString()}\\``), \"INVALID_PROMPT_INPUT\");\n            throw error;\n          }\n          acc[inputVariable] = allValues[inputVariable];\n          return acc;\n        }, {});\n        const message = await promptMessage.formatMessages(inputValues);\n        resultMessages = resultMessages.concat(message);\n      }\n    }\n    return resultMessages;\n  }\n  async partial(values) {\n    // This is implemented in a way it doesn't require making\n    // BaseMessagePromptTemplate aware of .partial()\n    const newInputVariables = this.inputVariables.filter(iv => !(iv in values));\n    const newPartialVariables = {\n      ...(this.partialVariables ?? {}),\n      ...values\n    };\n    const promptDict = {\n      ...this,\n      inputVariables: newInputVariables,\n      partialVariables: newPartialVariables\n    };\n    return new ChatPromptTemplate(promptDict);\n  }\n  static fromTemplate(template, options) {\n    const prompt = PromptTemplate.fromTemplate(template, options);\n    const humanTemplate = new HumanMessagePromptTemplate({\n      prompt\n    });\n    return this.fromMessages([humanTemplate]);\n  }\n  /**\n   * Create a chat model-specific prompt from individual chat messages\n   * or message-like tuples.\n   * @param promptMessages Messages to be passed to the chat model\n   * @returns A new ChatPromptTemplate\n   */\n  static fromMessages(promptMessages, extra) {\n    const flattenedMessages = promptMessages.reduce((acc, promptMessage) => acc.concat(\n    // eslint-disable-next-line no-instanceof/no-instanceof\n    promptMessage instanceof ChatPromptTemplate ? promptMessage.promptMessages : [_coerceMessagePromptTemplateLike(promptMessage, extra)]), []);\n    const flattenedPartialVariables = promptMessages.reduce((acc, promptMessage) =>\n    // eslint-disable-next-line no-instanceof/no-instanceof\n    promptMessage instanceof ChatPromptTemplate ? Object.assign(acc, promptMessage.partialVariables) : acc, Object.create(null));\n    const inputVariables = new Set();\n    for (const promptMessage of flattenedMessages) {\n      // eslint-disable-next-line no-instanceof/no-instanceof\n      if (promptMessage instanceof BaseMessage) continue;\n      for (const inputVariable of promptMessage.inputVariables) {\n        if (inputVariable in flattenedPartialVariables) {\n          continue;\n        }\n        inputVariables.add(inputVariable);\n      }\n    }\n    return new this({\n      ...extra,\n      inputVariables: [...inputVariables],\n      promptMessages: flattenedMessages,\n      partialVariables: flattenedPartialVariables,\n      templateFormat: extra?.templateFormat\n    });\n  }\n  /** @deprecated Renamed to .fromMessages */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static fromPromptMessages(promptMessages) {\n    return this.fromMessages(promptMessages);\n  }\n}","map":{"version":3,"names":["AIMessage","HumanMessage","SystemMessage","BaseMessage","ChatMessage","coerceMessageLikeToMessage","isBaseMessage","ChatPromptValue","Runnable","BaseStringPromptTemplate","BasePromptTemplate","PromptTemplate","ImagePromptTemplate","parseFString","parseMustache","addLangChainErrorFields","BaseMessagePromptTemplate","constructor","arguments","Object","defineProperty","enumerable","configurable","writable","value","invoke","input","options","_callWithConfig","formatMessages","runType","MessagesPlaceholder","lc_name","fields","variableName","optional","inputVariables","values","error","Error","name","formattedMessages","Array","isArray","map","e","readableInput","JSON","stringify","message","join","lc_error_code","BaseMessageStringPromptTemplate","prompt","format","BaseChatPromptTemplate","formatPromptValue","toString","resultMessages","ChatMessagePromptTemplate","role","fromTemplate","template","templateFormat","_StringImageMessagePromptTemplate","_messageClass","additionalOptions","forEach","concat","createMessage","content","MsgClass","chatMessageClass","getRoleFromMessageClass","item","text","additionalContentFields","push","imgTemplate","image_url","imgTemplateObject","parsedTemplate","variables","flatMap","type","length","url","inputs","formatted","HumanMessagePromptTemplate","AIMessagePromptTemplate","SystemMessagePromptTemplate","_isBaseMessagePromptTemplate","baseMessagePromptTemplateLike","_coerceMessagePromptTemplateLike","messagePromptTemplateLike","extra","messageContent","slice","templateData","_getType","isInstance","isMessagesPlaceholder","x","ChatPromptTemplate","lc_aliases","promptMessages","validateTemplate","undefined","assign","inputVariablesMessages","Set","promptMessage","inputVariable","add","totalInputVariables","inputVariablesInstance","partialVariables","keys","difference","filter","has","size","otherDifference","_getPromptType","_parseImagePrompts","inputValues","formattedMessageContent","Promise","all","imageUrl","promptTemplatePlaceholder","formattedUrl","allValues","mergePartialAndUserVariables","reduce","acc","partial","newInputVariables","iv","newPartialVariables","promptDict","humanTemplate","fromMessages","flattenedMessages","flattenedPartialVariables","create","fromPromptMessages"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/@langchain/core/dist/prompts/chat.js"],"sourcesContent":["// Default generic \"any\" values are for backwards compatibility.\n// Replace with \"string\" when we are comfortable with a breaking change.\nimport { AIMessage, HumanMessage, SystemMessage, BaseMessage, ChatMessage, coerceMessageLikeToMessage, isBaseMessage, } from \"../messages/index.js\";\nimport { ChatPromptValue, } from \"../prompt_values.js\";\nimport { Runnable } from \"../runnables/base.js\";\nimport { BaseStringPromptTemplate } from \"./string.js\";\nimport { BasePromptTemplate, } from \"./base.js\";\nimport { PromptTemplate, } from \"./prompt.js\";\nimport { ImagePromptTemplate } from \"./image.js\";\nimport { parseFString, parseMustache, } from \"./template.js\";\nimport { addLangChainErrorFields } from \"../errors/index.js\";\n/**\n * Abstract class that serves as a base for creating message prompt\n * templates. It defines how to format messages for different roles in a\n * conversation.\n */\nexport class BaseMessagePromptTemplate extends Runnable {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"prompts\", \"chat\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n    }\n    /**\n     * Calls the formatMessages method with the provided input and options.\n     * @param input Input for the formatMessages method\n     * @param options Optional BaseCallbackConfig\n     * @returns Formatted output messages\n     */\n    async invoke(input, options) {\n        return this._callWithConfig((input) => this.formatMessages(input), input, { ...options, runType: \"prompt\" });\n    }\n}\n/**\n * Class that represents a placeholder for messages in a chat prompt. It\n * extends the BaseMessagePromptTemplate.\n */\nexport class MessagesPlaceholder extends BaseMessagePromptTemplate {\n    static lc_name() {\n        return \"MessagesPlaceholder\";\n    }\n    constructor(fields) {\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign\n            fields = { variableName: fields };\n        }\n        super(fields);\n        Object.defineProperty(this, \"variableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"optional\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.variableName = fields.variableName;\n        this.optional = fields.optional ?? false;\n    }\n    get inputVariables() {\n        return [this.variableName];\n    }\n    async formatMessages(values) {\n        const input = values[this.variableName];\n        if (this.optional && !input) {\n            return [];\n        }\n        else if (!input) {\n            const error = new Error(`Field \"${this.variableName}\" in prompt uses a MessagesPlaceholder, which expects an array of BaseMessages as an input value. Received: undefined`);\n            error.name = \"InputFormatError\";\n            throw error;\n        }\n        let formattedMessages;\n        try {\n            if (Array.isArray(input)) {\n                formattedMessages = input.map(coerceMessageLikeToMessage);\n            }\n            else {\n                formattedMessages = [coerceMessageLikeToMessage(input)];\n            }\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }\n        catch (e) {\n            const readableInput = typeof input === \"string\" ? input : JSON.stringify(input, null, 2);\n            const error = new Error([\n                `Field \"${this.variableName}\" in prompt uses a MessagesPlaceholder, which expects an array of BaseMessages or coerceable values as input.`,\n                `Received value: ${readableInput}`,\n                `Additional message: ${e.message}`,\n            ].join(\"\\n\\n\"));\n            error.name = \"InputFormatError\";\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            error.lc_error_code = e.lc_error_code;\n            throw error;\n        }\n        return formattedMessages;\n    }\n}\n/**\n * Abstract class that serves as a base for creating message string prompt\n * templates. It extends the BaseMessagePromptTemplate.\n */\nexport class BaseMessageStringPromptTemplate extends BaseMessagePromptTemplate {\n    constructor(fields) {\n        if (!(\"prompt\" in fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = { prompt: fields };\n        }\n        super(fields);\n        Object.defineProperty(this, \"prompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.prompt = fields.prompt;\n    }\n    get inputVariables() {\n        return this.prompt.inputVariables;\n    }\n    async formatMessages(values) {\n        return [await this.format(values)];\n    }\n}\n/**\n * Abstract class that serves as a base for creating chat prompt\n * templates. It extends the BasePromptTemplate.\n */\nexport class BaseChatPromptTemplate extends BasePromptTemplate {\n    constructor(input) {\n        super(input);\n    }\n    async format(values) {\n        return (await this.formatPromptValue(values)).toString();\n    }\n    async formatPromptValue(values) {\n        const resultMessages = await this.formatMessages(values);\n        return new ChatPromptValue(resultMessages);\n    }\n}\n/**\n * Class that represents a chat message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n */\nexport class ChatMessagePromptTemplate extends BaseMessageStringPromptTemplate {\n    static lc_name() {\n        return \"ChatMessagePromptTemplate\";\n    }\n    constructor(fields, role) {\n        if (!(\"prompt\" in fields)) {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = { prompt: fields, role: role };\n        }\n        super(fields);\n        Object.defineProperty(this, \"role\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.role = fields.role;\n    }\n    async format(values) {\n        return new ChatMessage(await this.prompt.format(values), this.role);\n    }\n    static fromTemplate(template, role, options) {\n        return new this(PromptTemplate.fromTemplate(template, {\n            templateFormat: options?.templateFormat,\n        }), role);\n    }\n}\nclass _StringImageMessagePromptTemplate extends BaseMessagePromptTemplate {\n    static _messageClass() {\n        throw new Error(\"Can not invoke _messageClass from inside _StringImageMessagePromptTemplate\");\n    }\n    constructor(\n    /** @TODO When we come up with a better way to type prompt templates, fix this */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    fields, additionalOptions) {\n        if (!(\"prompt\" in fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = { prompt: fields };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"prompts\", \"chat\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"inputVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"additionalOptions\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"prompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"messageClass\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // ChatMessage contains role field, others don't.\n        // Because of this, we have a separate class property for ChatMessage.\n        Object.defineProperty(this, \"chatMessageClass\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.prompt = fields.prompt;\n        if (Array.isArray(this.prompt)) {\n            let inputVariables = [];\n            this.prompt.forEach((prompt) => {\n                if (\"inputVariables\" in prompt) {\n                    inputVariables = inputVariables.concat(prompt.inputVariables);\n                }\n            });\n            this.inputVariables = inputVariables;\n        }\n        else {\n            this.inputVariables = this.prompt.inputVariables;\n        }\n        this.additionalOptions = additionalOptions ?? this.additionalOptions;\n    }\n    createMessage(content) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const constructor = this.constructor;\n        if (constructor._messageClass()) {\n            const MsgClass = constructor._messageClass();\n            return new MsgClass({ content });\n        }\n        else if (constructor.chatMessageClass) {\n            const MsgClass = constructor.chatMessageClass();\n            // Assuming ChatMessage constructor also takes a content argument\n            return new MsgClass({\n                content,\n                role: this.getRoleFromMessageClass(MsgClass.lc_name()),\n            });\n        }\n        else {\n            throw new Error(\"No message class defined\");\n        }\n    }\n    getRoleFromMessageClass(name) {\n        switch (name) {\n            case \"HumanMessage\":\n                return \"human\";\n            case \"AIMessage\":\n                return \"ai\";\n            case \"SystemMessage\":\n                return \"system\";\n            case \"ChatMessage\":\n                return \"chat\";\n            default:\n                throw new Error(\"Invalid message class name\");\n        }\n    }\n    static fromTemplate(template, additionalOptions) {\n        if (typeof template === \"string\") {\n            return new this(PromptTemplate.fromTemplate(template, additionalOptions));\n        }\n        const prompt = [];\n        for (const item of template) {\n            if (typeof item === \"string\" ||\n                (typeof item === \"object\" && \"text\" in item)) {\n                let text = \"\";\n                if (typeof item === \"string\") {\n                    text = item;\n                }\n                else if (typeof item.text === \"string\") {\n                    text = item.text ?? \"\";\n                }\n                const options = {\n                    ...additionalOptions,\n                    ...(typeof item !== \"string\"\n                        ? { additionalContentFields: item }\n                        : {}),\n                };\n                prompt.push(PromptTemplate.fromTemplate(text, options));\n            }\n            else if (typeof item === \"object\" && \"image_url\" in item) {\n                let imgTemplate = item.image_url ?? \"\";\n                let imgTemplateObject;\n                let inputVariables = [];\n                if (typeof imgTemplate === \"string\") {\n                    let parsedTemplate;\n                    if (additionalOptions?.templateFormat === \"mustache\") {\n                        parsedTemplate = parseMustache(imgTemplate);\n                    }\n                    else {\n                        parsedTemplate = parseFString(imgTemplate);\n                    }\n                    const variables = parsedTemplate.flatMap((item) => item.type === \"variable\" ? [item.name] : []);\n                    if ((variables?.length ?? 0) > 0) {\n                        if (variables.length > 1) {\n                            throw new Error(`Only one format variable allowed per image template.\\nGot: ${variables}\\nFrom: ${imgTemplate}`);\n                        }\n                        inputVariables = [variables[0]];\n                    }\n                    else {\n                        inputVariables = [];\n                    }\n                    imgTemplate = { url: imgTemplate };\n                    imgTemplateObject = new ImagePromptTemplate({\n                        template: imgTemplate,\n                        inputVariables,\n                        templateFormat: additionalOptions?.templateFormat,\n                        additionalContentFields: item,\n                    });\n                }\n                else if (typeof imgTemplate === \"object\") {\n                    if (\"url\" in imgTemplate) {\n                        let parsedTemplate;\n                        if (additionalOptions?.templateFormat === \"mustache\") {\n                            parsedTemplate = parseMustache(imgTemplate.url);\n                        }\n                        else {\n                            parsedTemplate = parseFString(imgTemplate.url);\n                        }\n                        inputVariables = parsedTemplate.flatMap((item) => item.type === \"variable\" ? [item.name] : []);\n                    }\n                    else {\n                        inputVariables = [];\n                    }\n                    imgTemplateObject = new ImagePromptTemplate({\n                        template: imgTemplate,\n                        inputVariables,\n                        templateFormat: additionalOptions?.templateFormat,\n                        additionalContentFields: item,\n                    });\n                }\n                else {\n                    throw new Error(\"Invalid image template\");\n                }\n                prompt.push(imgTemplateObject);\n            }\n        }\n        return new this({ prompt, additionalOptions });\n    }\n    async format(input) {\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (this.prompt instanceof BaseStringPromptTemplate) {\n            const text = await this.prompt.format(input);\n            return this.createMessage(text);\n        }\n        else {\n            const content = [];\n            for (const prompt of this.prompt) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                let inputs = {};\n                if (!(\"inputVariables\" in prompt)) {\n                    throw new Error(`Prompt ${prompt} does not have inputVariables defined.`);\n                }\n                for (const item of prompt.inputVariables) {\n                    if (!inputs) {\n                        inputs = { [item]: input[item] };\n                    }\n                    inputs = { ...inputs, [item]: input[item] };\n                }\n                // eslint-disable-next-line no-instanceof/no-instanceof\n                if (prompt instanceof BaseStringPromptTemplate) {\n                    const formatted = await prompt.format(inputs);\n                    let additionalContentFields;\n                    if (\"additionalContentFields\" in prompt) {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        additionalContentFields = prompt.additionalContentFields;\n                    }\n                    content.push({\n                        ...additionalContentFields,\n                        type: \"text\",\n                        text: formatted,\n                    });\n                    /** @TODO replace this */\n                    // eslint-disable-next-line no-instanceof/no-instanceof\n                }\n                else if (prompt instanceof ImagePromptTemplate) {\n                    const formatted = await prompt.format(inputs);\n                    let additionalContentFields;\n                    if (\"additionalContentFields\" in prompt) {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        additionalContentFields = prompt.additionalContentFields;\n                    }\n                    content.push({\n                        ...additionalContentFields,\n                        type: \"image_url\",\n                        image_url: formatted,\n                    });\n                }\n            }\n            return this.createMessage(content);\n        }\n    }\n    async formatMessages(values) {\n        return [await this.format(values)];\n    }\n}\n/**\n * Class that represents a human message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n * @example\n * ```typescript\n * const message = HumanMessagePromptTemplate.fromTemplate(\"{text}\");\n * const formatted = await message.format({ text: \"Hello world!\" });\n *\n * const chatPrompt = ChatPromptTemplate.fromMessages([message]);\n * const formattedChatPrompt = await chatPrompt.invoke({\n *   text: \"Hello world!\",\n * });\n * ```\n */\nexport class HumanMessagePromptTemplate extends _StringImageMessagePromptTemplate {\n    static _messageClass() {\n        return HumanMessage;\n    }\n    static lc_name() {\n        return \"HumanMessagePromptTemplate\";\n    }\n}\n/**\n * Class that represents an AI message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n */\nexport class AIMessagePromptTemplate extends _StringImageMessagePromptTemplate {\n    static _messageClass() {\n        return AIMessage;\n    }\n    static lc_name() {\n        return \"AIMessagePromptTemplate\";\n    }\n}\n/**\n * Class that represents a system message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n * @example\n * ```typescript\n * const message = SystemMessagePromptTemplate.fromTemplate(\"{text}\");\n * const formatted = await message.format({ text: \"Hello world!\" });\n *\n * const chatPrompt = ChatPromptTemplate.fromMessages([message]);\n * const formattedChatPrompt = await chatPrompt.invoke({\n *   text: \"Hello world!\",\n * });\n * ```\n */\nexport class SystemMessagePromptTemplate extends _StringImageMessagePromptTemplate {\n    static _messageClass() {\n        return SystemMessage;\n    }\n    static lc_name() {\n        return \"SystemMessagePromptTemplate\";\n    }\n}\nfunction _isBaseMessagePromptTemplate(baseMessagePromptTemplateLike) {\n    return (typeof baseMessagePromptTemplateLike\n        .formatMessages === \"function\");\n}\nfunction _coerceMessagePromptTemplateLike(messagePromptTemplateLike, extra) {\n    if (_isBaseMessagePromptTemplate(messagePromptTemplateLike) ||\n        isBaseMessage(messagePromptTemplateLike)) {\n        return messagePromptTemplateLike;\n    }\n    if (Array.isArray(messagePromptTemplateLike) &&\n        messagePromptTemplateLike[0] === \"placeholder\") {\n        const messageContent = messagePromptTemplateLike[1];\n        if (extra?.templateFormat === \"mustache\" &&\n            typeof messageContent === \"string\" &&\n            messageContent.slice(0, 2) === \"{{\" &&\n            messageContent.slice(-2) === \"}}\") {\n            const variableName = messageContent.slice(2, -2);\n            return new MessagesPlaceholder({ variableName, optional: true });\n        }\n        else if (typeof messageContent === \"string\" &&\n            messageContent[0] === \"{\" &&\n            messageContent[messageContent.length - 1] === \"}\") {\n            const variableName = messageContent.slice(1, -1);\n            return new MessagesPlaceholder({ variableName, optional: true });\n        }\n        throw new Error(`Invalid placeholder template for format ${extra?.templateFormat ?? `\"f-string\"`}: \"${messagePromptTemplateLike[1]}\". Expected a variable name surrounded by ${extra?.templateFormat === \"mustache\" ? \"double\" : \"single\"} curly braces.`);\n    }\n    const message = coerceMessageLikeToMessage(messagePromptTemplateLike);\n    let templateData;\n    if (typeof message.content === \"string\") {\n        templateData = message.content;\n    }\n    else {\n        // Assuming message.content is an array of complex objects, transform it.\n        templateData = message.content.map((item) => {\n            if (\"text\" in item) {\n                return { ...item, text: item.text };\n            }\n            else if (\"image_url\" in item) {\n                return { ...item, image_url: item.image_url };\n            }\n            else {\n                return item;\n            }\n        });\n    }\n    if (message._getType() === \"human\") {\n        return HumanMessagePromptTemplate.fromTemplate(templateData, extra);\n    }\n    else if (message._getType() === \"ai\") {\n        return AIMessagePromptTemplate.fromTemplate(templateData, extra);\n    }\n    else if (message._getType() === \"system\") {\n        return SystemMessagePromptTemplate.fromTemplate(templateData, extra);\n    }\n    else if (ChatMessage.isInstance(message)) {\n        return ChatMessagePromptTemplate.fromTemplate(message.content, message.role, extra);\n    }\n    else {\n        throw new Error(`Could not coerce message prompt template from input. Received message type: \"${message._getType()}\".`);\n    }\n}\nfunction isMessagesPlaceholder(x) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return x.constructor.lc_name() === \"MessagesPlaceholder\";\n}\n/**\n * Class that represents a chat prompt. It extends the\n * BaseChatPromptTemplate and uses an array of BaseMessagePromptTemplate\n * instances to format a series of messages for a conversation.\n * @example\n * ```typescript\n * const message = SystemMessagePromptTemplate.fromTemplate(\"{text}\");\n * const chatPrompt = ChatPromptTemplate.fromMessages([\n *   [\"ai\", \"You are a helpful assistant.\"],\n *   message,\n * ]);\n * const formattedChatPrompt = await chatPrompt.invoke({\n *   text: \"Hello world!\",\n * });\n * ```\n */\nexport class ChatPromptTemplate extends BaseChatPromptTemplate {\n    static lc_name() {\n        return \"ChatPromptTemplate\";\n    }\n    get lc_aliases() {\n        return {\n            promptMessages: \"messages\",\n        };\n    }\n    constructor(input) {\n        super(input);\n        Object.defineProperty(this, \"promptMessages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"validateTemplate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"templateFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"f-string\"\n        });\n        // If input is mustache and validateTemplate is not defined, set it to false\n        if (input.templateFormat === \"mustache\" &&\n            input.validateTemplate === undefined) {\n            this.validateTemplate = false;\n        }\n        Object.assign(this, input);\n        if (this.validateTemplate) {\n            const inputVariablesMessages = new Set();\n            for (const promptMessage of this.promptMessages) {\n                // eslint-disable-next-line no-instanceof/no-instanceof\n                if (promptMessage instanceof BaseMessage)\n                    continue;\n                for (const inputVariable of promptMessage.inputVariables) {\n                    inputVariablesMessages.add(inputVariable);\n                }\n            }\n            const totalInputVariables = this.inputVariables;\n            const inputVariablesInstance = new Set(this.partialVariables\n                ? totalInputVariables.concat(Object.keys(this.partialVariables))\n                : totalInputVariables);\n            const difference = new Set([...inputVariablesInstance].filter((x) => !inputVariablesMessages.has(x)));\n            if (difference.size > 0) {\n                throw new Error(`Input variables \\`${[\n                    ...difference,\n                ]}\\` are not used in any of the prompt messages.`);\n            }\n            const otherDifference = new Set([...inputVariablesMessages].filter((x) => !inputVariablesInstance.has(x)));\n            if (otherDifference.size > 0) {\n                throw new Error(`Input variables \\`${[\n                    ...otherDifference,\n                ]}\\` are used in prompt messages but not in the prompt template.`);\n            }\n        }\n    }\n    _getPromptType() {\n        return \"chat\";\n    }\n    async _parseImagePrompts(message, inputValues) {\n        if (typeof message.content === \"string\") {\n            return message;\n        }\n        const formattedMessageContent = await Promise.all(message.content.map(async (item) => {\n            if (item.type !== \"image_url\") {\n                return item;\n            }\n            let imageUrl = \"\";\n            if (typeof item.image_url === \"string\") {\n                imageUrl = item.image_url;\n            }\n            else {\n                imageUrl = item.image_url.url;\n            }\n            const promptTemplatePlaceholder = PromptTemplate.fromTemplate(imageUrl, {\n                templateFormat: this.templateFormat,\n            });\n            const formattedUrl = await promptTemplatePlaceholder.format(inputValues);\n            if (typeof item.image_url !== \"string\" && \"url\" in item.image_url) {\n                // eslint-disable-next-line no-param-reassign\n                item.image_url.url = formattedUrl;\n            }\n            else {\n                // eslint-disable-next-line no-param-reassign\n                item.image_url = formattedUrl;\n            }\n            return item;\n        }));\n        // eslint-disable-next-line no-param-reassign\n        message.content = formattedMessageContent;\n        return message;\n    }\n    async formatMessages(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        let resultMessages = [];\n        for (const promptMessage of this.promptMessages) {\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (promptMessage instanceof BaseMessage) {\n                resultMessages.push(await this._parseImagePrompts(promptMessage, allValues));\n            }\n            else {\n                const inputValues = promptMessage.inputVariables.reduce((acc, inputVariable) => {\n                    if (!(inputVariable in allValues) &&\n                        !(isMessagesPlaceholder(promptMessage) && promptMessage.optional)) {\n                        const error = addLangChainErrorFields(new Error(`Missing value for input variable \\`${inputVariable.toString()}\\``), \"INVALID_PROMPT_INPUT\");\n                        throw error;\n                    }\n                    acc[inputVariable] = allValues[inputVariable];\n                    return acc;\n                }, {});\n                const message = await promptMessage.formatMessages(inputValues);\n                resultMessages = resultMessages.concat(message);\n            }\n        }\n        return resultMessages;\n    }\n    async partial(values) {\n        // This is implemented in a way it doesn't require making\n        // BaseMessagePromptTemplate aware of .partial()\n        const newInputVariables = this.inputVariables.filter((iv) => !(iv in values));\n        const newPartialVariables = {\n            ...(this.partialVariables ?? {}),\n            ...values,\n        };\n        const promptDict = {\n            ...this,\n            inputVariables: newInputVariables,\n            partialVariables: newPartialVariables,\n        };\n        return new ChatPromptTemplate(promptDict);\n    }\n    static fromTemplate(template, options) {\n        const prompt = PromptTemplate.fromTemplate(template, options);\n        const humanTemplate = new HumanMessagePromptTemplate({ prompt });\n        return this.fromMessages([humanTemplate]);\n    }\n    /**\n     * Create a chat model-specific prompt from individual chat messages\n     * or message-like tuples.\n     * @param promptMessages Messages to be passed to the chat model\n     * @returns A new ChatPromptTemplate\n     */\n    static fromMessages(promptMessages, extra) {\n        const flattenedMessages = promptMessages.reduce((acc, promptMessage) => acc.concat(\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        promptMessage instanceof ChatPromptTemplate\n            ? promptMessage.promptMessages\n            : [\n                _coerceMessagePromptTemplateLike(promptMessage, extra),\n            ]), []);\n        const flattenedPartialVariables = promptMessages.reduce((acc, promptMessage) => \n        // eslint-disable-next-line no-instanceof/no-instanceof\n        promptMessage instanceof ChatPromptTemplate\n            ? Object.assign(acc, promptMessage.partialVariables)\n            : acc, Object.create(null));\n        const inputVariables = new Set();\n        for (const promptMessage of flattenedMessages) {\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (promptMessage instanceof BaseMessage)\n                continue;\n            for (const inputVariable of promptMessage.inputVariables) {\n                if (inputVariable in flattenedPartialVariables) {\n                    continue;\n                }\n                inputVariables.add(inputVariable);\n            }\n        }\n        return new this({\n            ...extra,\n            inputVariables: [...inputVariables],\n            promptMessages: flattenedMessages,\n            partialVariables: flattenedPartialVariables,\n            templateFormat: extra?.templateFormat,\n        });\n    }\n    /** @deprecated Renamed to .fromMessages */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static fromPromptMessages(promptMessages) {\n        return this.fromMessages(promptMessages);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}