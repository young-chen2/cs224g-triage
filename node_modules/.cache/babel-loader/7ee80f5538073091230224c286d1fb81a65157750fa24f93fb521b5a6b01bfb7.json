{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { RunTree } from \"langsmith\";\nimport { getGlobalAsyncLocalStorageInstance, setGlobalAsyncLocalStorageInstance, _CONTEXT_VARIABLES_KEY } from \"./globals.js\";\nimport { CallbackManager } from \"../../callbacks/manager.js\";\nexport class MockAsyncLocalStorage {\n  getStore() {\n    return undefined;\n  }\n  run(_store, callback) {\n    return callback();\n  }\n  enterWith(_store) {\n    return undefined;\n  }\n}\nconst mockAsyncLocalStorage = new MockAsyncLocalStorage();\nconst LC_CHILD_KEY = Symbol.for(\"lc:child_config\");\nclass AsyncLocalStorageProvider {\n  getInstance() {\n    return getGlobalAsyncLocalStorageInstance() ?? mockAsyncLocalStorage;\n  }\n  getRunnableConfig() {\n    const storage = this.getInstance();\n    // this has the runnable config\n    // which means that we should also have an instance of a LangChainTracer\n    // with the run map prepopulated\n    return storage.getStore()?.extra?.[LC_CHILD_KEY];\n  }\n  runWithConfig(config, callback, avoidCreatingRootRunTree) {\n    const callbackManager = CallbackManager._configureSync(config?.callbacks, undefined, config?.tags, undefined, config?.metadata);\n    const storage = this.getInstance();\n    const previousValue = storage.getStore();\n    const parentRunId = callbackManager?.getParentRunId();\n    const langChainTracer = callbackManager?.handlers?.find(handler => handler?.name === \"langchain_tracer\");\n    let runTree;\n    if (langChainTracer && parentRunId) {\n      runTree = langChainTracer.convertToRunTree(parentRunId);\n    } else if (!avoidCreatingRootRunTree) {\n      runTree = new RunTree({\n        name: \"<runnable_lambda>\",\n        tracingEnabled: false\n      });\n    }\n    if (runTree) {\n      runTree.extra = {\n        ...runTree.extra,\n        [LC_CHILD_KEY]: config\n      };\n    }\n    if (previousValue !== undefined && previousValue[_CONTEXT_VARIABLES_KEY] !== undefined) {\n      runTree[_CONTEXT_VARIABLES_KEY] = previousValue[_CONTEXT_VARIABLES_KEY];\n    }\n    return storage.run(runTree, callback);\n  }\n  initializeGlobalInstance(instance) {\n    if (getGlobalAsyncLocalStorageInstance() === undefined) {\n      setGlobalAsyncLocalStorageInstance(instance);\n    }\n  }\n}\nconst AsyncLocalStorageProviderSingleton = new AsyncLocalStorageProvider();\nexport { AsyncLocalStorageProviderSingleton };","map":{"version":3,"names":["RunTree","getGlobalAsyncLocalStorageInstance","setGlobalAsyncLocalStorageInstance","_CONTEXT_VARIABLES_KEY","CallbackManager","MockAsyncLocalStorage","getStore","undefined","run","_store","callback","enterWith","mockAsyncLocalStorage","LC_CHILD_KEY","Symbol","for","AsyncLocalStorageProvider","getInstance","getRunnableConfig","storage","extra","runWithConfig","config","avoidCreatingRootRunTree","callbackManager","_configureSync","callbacks","tags","metadata","previousValue","parentRunId","getParentRunId","langChainTracer","handlers","find","handler","name","runTree","convertToRunTree","tracingEnabled","initializeGlobalInstance","instance","AsyncLocalStorageProviderSingleton"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/@langchain/core/dist/singletons/async_local_storage/index.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { RunTree } from \"langsmith\";\nimport { getGlobalAsyncLocalStorageInstance, setGlobalAsyncLocalStorageInstance, _CONTEXT_VARIABLES_KEY, } from \"./globals.js\";\nimport { CallbackManager } from \"../../callbacks/manager.js\";\nexport class MockAsyncLocalStorage {\n    getStore() {\n        return undefined;\n    }\n    run(_store, callback) {\n        return callback();\n    }\n    enterWith(_store) {\n        return undefined;\n    }\n}\nconst mockAsyncLocalStorage = new MockAsyncLocalStorage();\nconst LC_CHILD_KEY = Symbol.for(\"lc:child_config\");\nclass AsyncLocalStorageProvider {\n    getInstance() {\n        return getGlobalAsyncLocalStorageInstance() ?? mockAsyncLocalStorage;\n    }\n    getRunnableConfig() {\n        const storage = this.getInstance();\n        // this has the runnable config\n        // which means that we should also have an instance of a LangChainTracer\n        // with the run map prepopulated\n        return storage.getStore()?.extra?.[LC_CHILD_KEY];\n    }\n    runWithConfig(config, callback, avoidCreatingRootRunTree) {\n        const callbackManager = CallbackManager._configureSync(config?.callbacks, undefined, config?.tags, undefined, config?.metadata);\n        const storage = this.getInstance();\n        const previousValue = storage.getStore();\n        const parentRunId = callbackManager?.getParentRunId();\n        const langChainTracer = callbackManager?.handlers?.find((handler) => handler?.name === \"langchain_tracer\");\n        let runTree;\n        if (langChainTracer && parentRunId) {\n            runTree = langChainTracer.convertToRunTree(parentRunId);\n        }\n        else if (!avoidCreatingRootRunTree) {\n            runTree = new RunTree({\n                name: \"<runnable_lambda>\",\n                tracingEnabled: false,\n            });\n        }\n        if (runTree) {\n            runTree.extra = { ...runTree.extra, [LC_CHILD_KEY]: config };\n        }\n        if (previousValue !== undefined &&\n            previousValue[_CONTEXT_VARIABLES_KEY] !== undefined) {\n            runTree[_CONTEXT_VARIABLES_KEY] =\n                previousValue[_CONTEXT_VARIABLES_KEY];\n        }\n        return storage.run(runTree, callback);\n    }\n    initializeGlobalInstance(instance) {\n        if (getGlobalAsyncLocalStorageInstance() === undefined) {\n            setGlobalAsyncLocalStorageInstance(instance);\n        }\n    }\n}\nconst AsyncLocalStorageProviderSingleton = new AsyncLocalStorageProvider();\nexport { AsyncLocalStorageProviderSingleton };\n"],"mappings":"AAAA;AACA,SAASA,OAAO,QAAQ,WAAW;AACnC,SAASC,kCAAkC,EAAEC,kCAAkC,EAAEC,sBAAsB,QAAS,cAAc;AAC9H,SAASC,eAAe,QAAQ,4BAA4B;AAC5D,OAAO,MAAMC,qBAAqB,CAAC;EAC/BC,QAAQA,CAAA,EAAG;IACP,OAAOC,SAAS;EACpB;EACAC,GAAGA,CAACC,MAAM,EAAEC,QAAQ,EAAE;IAClB,OAAOA,QAAQ,CAAC,CAAC;EACrB;EACAC,SAASA,CAACF,MAAM,EAAE;IACd,OAAOF,SAAS;EACpB;AACJ;AACA,MAAMK,qBAAqB,GAAG,IAAIP,qBAAqB,CAAC,CAAC;AACzD,MAAMQ,YAAY,GAAGC,MAAM,CAACC,GAAG,CAAC,iBAAiB,CAAC;AAClD,MAAMC,yBAAyB,CAAC;EAC5BC,WAAWA,CAAA,EAAG;IACV,OAAOhB,kCAAkC,CAAC,CAAC,IAAIW,qBAAqB;EACxE;EACAM,iBAAiBA,CAAA,EAAG;IAChB,MAAMC,OAAO,GAAG,IAAI,CAACF,WAAW,CAAC,CAAC;IAClC;IACA;IACA;IACA,OAAOE,OAAO,CAACb,QAAQ,CAAC,CAAC,EAAEc,KAAK,GAAGP,YAAY,CAAC;EACpD;EACAQ,aAAaA,CAACC,MAAM,EAAEZ,QAAQ,EAAEa,wBAAwB,EAAE;IACtD,MAAMC,eAAe,GAAGpB,eAAe,CAACqB,cAAc,CAACH,MAAM,EAAEI,SAAS,EAAEnB,SAAS,EAAEe,MAAM,EAAEK,IAAI,EAAEpB,SAAS,EAAEe,MAAM,EAAEM,QAAQ,CAAC;IAC/H,MAAMT,OAAO,GAAG,IAAI,CAACF,WAAW,CAAC,CAAC;IAClC,MAAMY,aAAa,GAAGV,OAAO,CAACb,QAAQ,CAAC,CAAC;IACxC,MAAMwB,WAAW,GAAGN,eAAe,EAAEO,cAAc,CAAC,CAAC;IACrD,MAAMC,eAAe,GAAGR,eAAe,EAAES,QAAQ,EAAEC,IAAI,CAAEC,OAAO,IAAKA,OAAO,EAAEC,IAAI,KAAK,kBAAkB,CAAC;IAC1G,IAAIC,OAAO;IACX,IAAIL,eAAe,IAAIF,WAAW,EAAE;MAChCO,OAAO,GAAGL,eAAe,CAACM,gBAAgB,CAACR,WAAW,CAAC;IAC3D,CAAC,MACI,IAAI,CAACP,wBAAwB,EAAE;MAChCc,OAAO,GAAG,IAAIrC,OAAO,CAAC;QAClBoC,IAAI,EAAE,mBAAmB;QACzBG,cAAc,EAAE;MACpB,CAAC,CAAC;IACN;IACA,IAAIF,OAAO,EAAE;MACTA,OAAO,CAACjB,KAAK,GAAG;QAAE,GAAGiB,OAAO,CAACjB,KAAK;QAAE,CAACP,YAAY,GAAGS;MAAO,CAAC;IAChE;IACA,IAAIO,aAAa,KAAKtB,SAAS,IAC3BsB,aAAa,CAAC1B,sBAAsB,CAAC,KAAKI,SAAS,EAAE;MACrD8B,OAAO,CAAClC,sBAAsB,CAAC,GAC3B0B,aAAa,CAAC1B,sBAAsB,CAAC;IAC7C;IACA,OAAOgB,OAAO,CAACX,GAAG,CAAC6B,OAAO,EAAE3B,QAAQ,CAAC;EACzC;EACA8B,wBAAwBA,CAACC,QAAQ,EAAE;IAC/B,IAAIxC,kCAAkC,CAAC,CAAC,KAAKM,SAAS,EAAE;MACpDL,kCAAkC,CAACuC,QAAQ,CAAC;IAChD;EACJ;AACJ;AACA,MAAMC,kCAAkC,GAAG,IAAI1B,yBAAyB,CAAC,CAAC;AAC1E,SAAS0B,kCAAkC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}