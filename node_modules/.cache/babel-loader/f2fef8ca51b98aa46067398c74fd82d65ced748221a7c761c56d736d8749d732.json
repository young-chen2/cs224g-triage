{"ast":null,"code":"import { BaseStringPromptTemplate } from \"./string.js\";\nimport { checkValidTemplate, renderTemplate } from \"./template.js\";\nimport { PromptTemplate } from \"./prompt.js\";\nimport { BaseChatPromptTemplate } from \"./chat.js\";\n/**\n * Prompt template that contains few-shot examples.\n * @augments BasePromptTemplate\n * @augments FewShotPromptTemplateInput\n * @example\n * ```typescript\n * const examplePrompt = PromptTemplate.fromTemplate(\n *   \"Input: {input}\\nOutput: {output}\",\n * );\n *\n * const exampleSelector = await SemanticSimilarityExampleSelector.fromExamples(\n *   [\n *     { input: \"happy\", output: \"sad\" },\n *     { input: \"tall\", output: \"short\" },\n *     { input: \"energetic\", output: \"lethargic\" },\n *     { input: \"sunny\", output: \"gloomy\" },\n *     { input: \"windy\", output: \"calm\" },\n *   ],\n *   new OpenAIEmbeddings(),\n *   HNSWLib,\n *   { k: 1 },\n * );\n *\n * const dynamicPrompt = new FewShotPromptTemplate({\n *   exampleSelector,\n *   examplePrompt,\n *   prefix: \"Give the antonym of every input\",\n *   suffix: \"Input: {adjective}\\nOutput:\",\n *   inputVariables: [\"adjective\"],\n * });\n *\n * // Format the dynamic prompt with the input 'rainy'\n * console.log(await dynamicPrompt.format({ adjective: \"rainy\" }));\n *\n * ```\n */\nexport class FewShotPromptTemplate extends BaseStringPromptTemplate {\n  constructor(input) {\n    super(input);\n    Object.defineProperty(this, \"lc_serializable\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"examples\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"exampleSelector\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"examplePrompt\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"suffix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"\"\n    });\n    Object.defineProperty(this, \"exampleSeparator\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"\\n\\n\"\n    });\n    Object.defineProperty(this, \"prefix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"\"\n    });\n    Object.defineProperty(this, \"templateFormat\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"f-string\"\n    });\n    Object.defineProperty(this, \"validateTemplate\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.assign(this, input);\n    if (this.examples !== undefined && this.exampleSelector !== undefined) {\n      throw new Error(\"Only one of 'examples' and 'example_selector' should be provided\");\n    }\n    if (this.examples === undefined && this.exampleSelector === undefined) {\n      throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n    }\n    if (this.validateTemplate) {\n      let totalInputVariables = this.inputVariables;\n      if (this.partialVariables) {\n        totalInputVariables = totalInputVariables.concat(Object.keys(this.partialVariables));\n      }\n      checkValidTemplate(this.prefix + this.suffix, this.templateFormat, totalInputVariables);\n    }\n  }\n  _getPromptType() {\n    return \"few_shot\";\n  }\n  static lc_name() {\n    return \"FewShotPromptTemplate\";\n  }\n  async getExamples(inputVariables) {\n    if (this.examples !== undefined) {\n      return this.examples;\n    }\n    if (this.exampleSelector !== undefined) {\n      return this.exampleSelector.selectExamples(inputVariables);\n    }\n    throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n  }\n  async partial(values) {\n    const newInputVariables = this.inputVariables.filter(iv => !(iv in values));\n    const newPartialVariables = {\n      ...(this.partialVariables ?? {}),\n      ...values\n    };\n    const promptDict = {\n      ...this,\n      inputVariables: newInputVariables,\n      partialVariables: newPartialVariables\n    };\n    return new FewShotPromptTemplate(promptDict);\n  }\n  /**\n   * Formats the prompt with the given values.\n   * @param values The values to format the prompt with.\n   * @returns A promise that resolves to a string representing the formatted prompt.\n   */\n  async format(values) {\n    const allValues = await this.mergePartialAndUserVariables(values);\n    const examples = await this.getExamples(allValues);\n    const exampleStrings = await Promise.all(examples.map(example => this.examplePrompt.format(example)));\n    const template = [this.prefix, ...exampleStrings, this.suffix].join(this.exampleSeparator);\n    return renderTemplate(template, this.templateFormat, allValues);\n  }\n  serialize() {\n    if (this.exampleSelector || !this.examples) {\n      throw new Error(\"Serializing an example selector is not currently supported\");\n    }\n    if (this.outputParser !== undefined) {\n      throw new Error(\"Serializing an output parser is not currently supported\");\n    }\n    return {\n      _type: this._getPromptType(),\n      input_variables: this.inputVariables,\n      example_prompt: this.examplePrompt.serialize(),\n      example_separator: this.exampleSeparator,\n      suffix: this.suffix,\n      prefix: this.prefix,\n      template_format: this.templateFormat,\n      examples: this.examples\n    };\n  }\n  static async deserialize(data) {\n    const {\n      example_prompt\n    } = data;\n    if (!example_prompt) {\n      throw new Error(\"Missing example prompt\");\n    }\n    const examplePrompt = await PromptTemplate.deserialize(example_prompt);\n    let examples;\n    if (Array.isArray(data.examples)) {\n      examples = data.examples;\n    } else {\n      throw new Error(\"Invalid examples format. Only list or string are supported.\");\n    }\n    return new FewShotPromptTemplate({\n      inputVariables: data.input_variables,\n      examplePrompt,\n      examples,\n      exampleSeparator: data.example_separator,\n      prefix: data.prefix,\n      suffix: data.suffix,\n      templateFormat: data.template_format\n    });\n  }\n}\n/**\n * Chat prompt template that contains few-shot examples.\n * @augments BasePromptTemplateInput\n * @augments FewShotChatMessagePromptTemplateInput\n */\nexport class FewShotChatMessagePromptTemplate extends BaseChatPromptTemplate {\n  _getPromptType() {\n    return \"few_shot_chat\";\n  }\n  static lc_name() {\n    return \"FewShotChatMessagePromptTemplate\";\n  }\n  constructor(fields) {\n    super(fields);\n    Object.defineProperty(this, \"lc_serializable\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.defineProperty(this, \"examples\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"exampleSelector\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"examplePrompt\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"suffix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"\"\n    });\n    Object.defineProperty(this, \"exampleSeparator\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"\\n\\n\"\n    });\n    Object.defineProperty(this, \"prefix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"\"\n    });\n    Object.defineProperty(this, \"templateFormat\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"f-string\"\n    });\n    Object.defineProperty(this, \"validateTemplate\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    this.examples = fields.examples;\n    this.examplePrompt = fields.examplePrompt;\n    this.exampleSeparator = fields.exampleSeparator ?? \"\\n\\n\";\n    this.exampleSelector = fields.exampleSelector;\n    this.prefix = fields.prefix ?? \"\";\n    this.suffix = fields.suffix ?? \"\";\n    this.templateFormat = fields.templateFormat ?? \"f-string\";\n    this.validateTemplate = fields.validateTemplate ?? true;\n    if (this.examples !== undefined && this.exampleSelector !== undefined) {\n      throw new Error(\"Only one of 'examples' and 'example_selector' should be provided\");\n    }\n    if (this.examples === undefined && this.exampleSelector === undefined) {\n      throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n    }\n    if (this.validateTemplate) {\n      let totalInputVariables = this.inputVariables;\n      if (this.partialVariables) {\n        totalInputVariables = totalInputVariables.concat(Object.keys(this.partialVariables));\n      }\n      checkValidTemplate(this.prefix + this.suffix, this.templateFormat, totalInputVariables);\n    }\n  }\n  async getExamples(inputVariables) {\n    if (this.examples !== undefined) {\n      return this.examples;\n    }\n    if (this.exampleSelector !== undefined) {\n      return this.exampleSelector.selectExamples(inputVariables);\n    }\n    throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n  }\n  /**\n   * Formats the list of values and returns a list of formatted messages.\n   * @param values The values to format the prompt with.\n   * @returns A promise that resolves to a string representing the formatted prompt.\n   */\n  async formatMessages(values) {\n    const allValues = await this.mergePartialAndUserVariables(values);\n    let examples = await this.getExamples(allValues);\n    examples = examples.map(example => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const result = {};\n      this.examplePrompt.inputVariables.forEach(inputVariable => {\n        result[inputVariable] = example[inputVariable];\n      });\n      return result;\n    });\n    const messages = [];\n    for (const example of examples) {\n      const exampleMessages = await this.examplePrompt.formatMessages(example);\n      messages.push(...exampleMessages);\n    }\n    return messages;\n  }\n  /**\n   * Formats the prompt with the given values.\n   * @param values The values to format the prompt with.\n   * @returns A promise that resolves to a string representing the formatted prompt.\n   */\n  async format(values) {\n    const allValues = await this.mergePartialAndUserVariables(values);\n    const examples = await this.getExamples(allValues);\n    const exampleMessages = await Promise.all(examples.map(example => this.examplePrompt.formatMessages(example)));\n    const exampleStrings = exampleMessages.flat().map(message => message.content);\n    const template = [this.prefix, ...exampleStrings, this.suffix].join(this.exampleSeparator);\n    return renderTemplate(template, this.templateFormat, allValues);\n  }\n  /**\n   * Partially formats the prompt with the given values.\n   * @param values The values to partially format the prompt with.\n   * @returns A promise that resolves to an instance of `FewShotChatMessagePromptTemplate` with the given values partially formatted.\n   */\n  async partial(values) {\n    const newInputVariables = this.inputVariables.filter(variable => !(variable in values));\n    const newPartialVariables = {\n      ...(this.partialVariables ?? {}),\n      ...values\n    };\n    const promptDict = {\n      ...this,\n      inputVariables: newInputVariables,\n      partialVariables: newPartialVariables\n    };\n    return new FewShotChatMessagePromptTemplate(promptDict);\n  }\n}","map":{"version":3,"names":["BaseStringPromptTemplate","checkValidTemplate","renderTemplate","PromptTemplate","BaseChatPromptTemplate","FewShotPromptTemplate","constructor","input","Object","defineProperty","enumerable","configurable","writable","value","assign","examples","undefined","exampleSelector","Error","validateTemplate","totalInputVariables","inputVariables","partialVariables","concat","keys","prefix","suffix","templateFormat","_getPromptType","lc_name","getExamples","selectExamples","partial","values","newInputVariables","filter","iv","newPartialVariables","promptDict","format","allValues","mergePartialAndUserVariables","exampleStrings","Promise","all","map","example","examplePrompt","template","join","exampleSeparator","serialize","outputParser","_type","input_variables","example_prompt","example_separator","template_format","deserialize","data","Array","isArray","FewShotChatMessagePromptTemplate","fields","formatMessages","result","forEach","inputVariable","messages","exampleMessages","push","flat","message","content","variable"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/@langchain/core/dist/prompts/few_shot.js"],"sourcesContent":["import { BaseStringPromptTemplate } from \"./string.js\";\nimport { checkValidTemplate, renderTemplate, } from \"./template.js\";\nimport { PromptTemplate } from \"./prompt.js\";\nimport { BaseChatPromptTemplate, } from \"./chat.js\";\n/**\n * Prompt template that contains few-shot examples.\n * @augments BasePromptTemplate\n * @augments FewShotPromptTemplateInput\n * @example\n * ```typescript\n * const examplePrompt = PromptTemplate.fromTemplate(\n *   \"Input: {input}\\nOutput: {output}\",\n * );\n *\n * const exampleSelector = await SemanticSimilarityExampleSelector.fromExamples(\n *   [\n *     { input: \"happy\", output: \"sad\" },\n *     { input: \"tall\", output: \"short\" },\n *     { input: \"energetic\", output: \"lethargic\" },\n *     { input: \"sunny\", output: \"gloomy\" },\n *     { input: \"windy\", output: \"calm\" },\n *   ],\n *   new OpenAIEmbeddings(),\n *   HNSWLib,\n *   { k: 1 },\n * );\n *\n * const dynamicPrompt = new FewShotPromptTemplate({\n *   exampleSelector,\n *   examplePrompt,\n *   prefix: \"Give the antonym of every input\",\n *   suffix: \"Input: {adjective}\\nOutput:\",\n *   inputVariables: [\"adjective\"],\n * });\n *\n * // Format the dynamic prompt with the input 'rainy'\n * console.log(await dynamicPrompt.format({ adjective: \"rainy\" }));\n *\n * ```\n */\nexport class FewShotPromptTemplate extends BaseStringPromptTemplate {\n    constructor(input) {\n        super(input);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"examples\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"exampleSelector\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"examplePrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"suffix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"exampleSeparator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\\n\\n\"\n        });\n        Object.defineProperty(this, \"prefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"templateFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"f-string\"\n        });\n        Object.defineProperty(this, \"validateTemplate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.assign(this, input);\n        if (this.examples !== undefined && this.exampleSelector !== undefined) {\n            throw new Error(\"Only one of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.examples === undefined && this.exampleSelector === undefined) {\n            throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.validateTemplate) {\n            let totalInputVariables = this.inputVariables;\n            if (this.partialVariables) {\n                totalInputVariables = totalInputVariables.concat(Object.keys(this.partialVariables));\n            }\n            checkValidTemplate(this.prefix + this.suffix, this.templateFormat, totalInputVariables);\n        }\n    }\n    _getPromptType() {\n        return \"few_shot\";\n    }\n    static lc_name() {\n        return \"FewShotPromptTemplate\";\n    }\n    async getExamples(inputVariables) {\n        if (this.examples !== undefined) {\n            return this.examples;\n        }\n        if (this.exampleSelector !== undefined) {\n            return this.exampleSelector.selectExamples(inputVariables);\n        }\n        throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n    }\n    async partial(values) {\n        const newInputVariables = this.inputVariables.filter((iv) => !(iv in values));\n        const newPartialVariables = {\n            ...(this.partialVariables ?? {}),\n            ...values,\n        };\n        const promptDict = {\n            ...this,\n            inputVariables: newInputVariables,\n            partialVariables: newPartialVariables,\n        };\n        return new FewShotPromptTemplate(promptDict);\n    }\n    /**\n     * Formats the prompt with the given values.\n     * @param values The values to format the prompt with.\n     * @returns A promise that resolves to a string representing the formatted prompt.\n     */\n    async format(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        const examples = await this.getExamples(allValues);\n        const exampleStrings = await Promise.all(examples.map((example) => this.examplePrompt.format(example)));\n        const template = [this.prefix, ...exampleStrings, this.suffix].join(this.exampleSeparator);\n        return renderTemplate(template, this.templateFormat, allValues);\n    }\n    serialize() {\n        if (this.exampleSelector || !this.examples) {\n            throw new Error(\"Serializing an example selector is not currently supported\");\n        }\n        if (this.outputParser !== undefined) {\n            throw new Error(\"Serializing an output parser is not currently supported\");\n        }\n        return {\n            _type: this._getPromptType(),\n            input_variables: this.inputVariables,\n            example_prompt: this.examplePrompt.serialize(),\n            example_separator: this.exampleSeparator,\n            suffix: this.suffix,\n            prefix: this.prefix,\n            template_format: this.templateFormat,\n            examples: this.examples,\n        };\n    }\n    static async deserialize(data) {\n        const { example_prompt } = data;\n        if (!example_prompt) {\n            throw new Error(\"Missing example prompt\");\n        }\n        const examplePrompt = await PromptTemplate.deserialize(example_prompt);\n        let examples;\n        if (Array.isArray(data.examples)) {\n            examples = data.examples;\n        }\n        else {\n            throw new Error(\"Invalid examples format. Only list or string are supported.\");\n        }\n        return new FewShotPromptTemplate({\n            inputVariables: data.input_variables,\n            examplePrompt,\n            examples,\n            exampleSeparator: data.example_separator,\n            prefix: data.prefix,\n            suffix: data.suffix,\n            templateFormat: data.template_format,\n        });\n    }\n}\n/**\n * Chat prompt template that contains few-shot examples.\n * @augments BasePromptTemplateInput\n * @augments FewShotChatMessagePromptTemplateInput\n */\nexport class FewShotChatMessagePromptTemplate extends BaseChatPromptTemplate {\n    _getPromptType() {\n        return \"few_shot_chat\";\n    }\n    static lc_name() {\n        return \"FewShotChatMessagePromptTemplate\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"examples\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"exampleSelector\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"examplePrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"suffix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"exampleSeparator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\\n\\n\"\n        });\n        Object.defineProperty(this, \"prefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"templateFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"f-string\"\n        });\n        Object.defineProperty(this, \"validateTemplate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        this.examples = fields.examples;\n        this.examplePrompt = fields.examplePrompt;\n        this.exampleSeparator = fields.exampleSeparator ?? \"\\n\\n\";\n        this.exampleSelector = fields.exampleSelector;\n        this.prefix = fields.prefix ?? \"\";\n        this.suffix = fields.suffix ?? \"\";\n        this.templateFormat = fields.templateFormat ?? \"f-string\";\n        this.validateTemplate = fields.validateTemplate ?? true;\n        if (this.examples !== undefined && this.exampleSelector !== undefined) {\n            throw new Error(\"Only one of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.examples === undefined && this.exampleSelector === undefined) {\n            throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.validateTemplate) {\n            let totalInputVariables = this.inputVariables;\n            if (this.partialVariables) {\n                totalInputVariables = totalInputVariables.concat(Object.keys(this.partialVariables));\n            }\n            checkValidTemplate(this.prefix + this.suffix, this.templateFormat, totalInputVariables);\n        }\n    }\n    async getExamples(inputVariables) {\n        if (this.examples !== undefined) {\n            return this.examples;\n        }\n        if (this.exampleSelector !== undefined) {\n            return this.exampleSelector.selectExamples(inputVariables);\n        }\n        throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n    }\n    /**\n     * Formats the list of values and returns a list of formatted messages.\n     * @param values The values to format the prompt with.\n     * @returns A promise that resolves to a string representing the formatted prompt.\n     */\n    async formatMessages(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        let examples = await this.getExamples(allValues);\n        examples = examples.map((example) => {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const result = {};\n            this.examplePrompt.inputVariables.forEach((inputVariable) => {\n                result[inputVariable] = example[inputVariable];\n            });\n            return result;\n        });\n        const messages = [];\n        for (const example of examples) {\n            const exampleMessages = await this.examplePrompt.formatMessages(example);\n            messages.push(...exampleMessages);\n        }\n        return messages;\n    }\n    /**\n     * Formats the prompt with the given values.\n     * @param values The values to format the prompt with.\n     * @returns A promise that resolves to a string representing the formatted prompt.\n     */\n    async format(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        const examples = await this.getExamples(allValues);\n        const exampleMessages = await Promise.all(examples.map((example) => this.examplePrompt.formatMessages(example)));\n        const exampleStrings = exampleMessages\n            .flat()\n            .map((message) => message.content);\n        const template = [this.prefix, ...exampleStrings, this.suffix].join(this.exampleSeparator);\n        return renderTemplate(template, this.templateFormat, allValues);\n    }\n    /**\n     * Partially formats the prompt with the given values.\n     * @param values The values to partially format the prompt with.\n     * @returns A promise that resolves to an instance of `FewShotChatMessagePromptTemplate` with the given values partially formatted.\n     */\n    async partial(values) {\n        const newInputVariables = this.inputVariables.filter((variable) => !(variable in values));\n        const newPartialVariables = {\n            ...(this.partialVariables ?? {}),\n            ...values,\n        };\n        const promptDict = {\n            ...this,\n            inputVariables: newInputVariables,\n            partialVariables: newPartialVariables,\n        };\n        return new FewShotChatMessagePromptTemplate(promptDict);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}