{"ast":null,"code":"/* eslint-disable no-param-reassign */\nimport { getEnvironmentVariable } from \"@langchain/core/utils/env\";\nimport { OpenAI as OpenAIClient } from \"openai\";\nimport { Tool } from \"@langchain/core/tools\";\n/**\n * A tool for generating images with Open AIs Dall-E 2 or 3 API.\n */\nexport class DallEAPIWrapper extends Tool {\n  static lc_name() {\n    return \"DallEAPIWrapper\";\n  }\n  constructor(fields) {\n    // Shim for new base tool param name\n    if (fields?.responseFormat !== undefined && [\"url\", \"b64_json\"].includes(fields.responseFormat)) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      fields.dallEResponseFormat = fields.responseFormat;\n      fields.responseFormat = \"content\";\n    }\n    super(fields);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"dalle_api_wrapper\"\n    });\n    Object.defineProperty(this, \"description\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"A wrapper around OpenAI DALL-E API. Useful for when you need to generate images from a text description. Input should be an image description.\"\n    });\n    Object.defineProperty(this, \"client\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"model\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"dall-e-3\"\n    });\n    Object.defineProperty(this, \"style\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"vivid\"\n    });\n    Object.defineProperty(this, \"quality\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"standard\"\n    });\n    Object.defineProperty(this, \"n\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(this, \"size\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"1024x1024\"\n    });\n    Object.defineProperty(this, \"dallEResponseFormat\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"url\"\n    });\n    Object.defineProperty(this, \"user\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    const openAIApiKey = fields?.apiKey ?? fields?.openAIApiKey ?? getEnvironmentVariable(\"OPENAI_API_KEY\");\n    const organization = fields?.organization ?? getEnvironmentVariable(\"OPENAI_ORGANIZATION\");\n    const clientConfig = {\n      apiKey: openAIApiKey,\n      organization,\n      dangerouslyAllowBrowser: true,\n      baseUrl: fields?.baseUrl\n    };\n    this.client = new OpenAIClient(clientConfig);\n    this.model = fields?.model ?? fields?.modelName ?? this.model;\n    this.style = fields?.style ?? this.style;\n    this.quality = fields?.quality ?? this.quality;\n    this.n = fields?.n ?? this.n;\n    this.size = fields?.size ?? this.size;\n    this.dallEResponseFormat = fields?.dallEResponseFormat ?? this.dallEResponseFormat;\n    this.user = fields?.user;\n  }\n  /**\n   * Processes the API response if multiple images are generated.\n   * Returns a list of MessageContentImageUrl objects. If the response\n   * format is `url`, then the `image_url` field will contain the URL.\n   * If it is `b64_json`, then the `image_url` field will contain an object\n   * with a `url` field with the base64 encoded image.\n   *\n   * @param {OpenAIClient.Images.ImagesResponse[]} response The API response\n   * @returns {MessageContentImageUrl[]}\n   */\n  processMultipleGeneratedUrls(response) {\n    if (this.dallEResponseFormat === \"url\") {\n      return response.flatMap(res => {\n        const imageUrlContent = res.data.flatMap(item => {\n          if (!item.url) return [];\n          return {\n            type: \"image_url\",\n            image_url: item.url\n          };\n        }).filter(item => item !== undefined && item.type === \"image_url\" && typeof item.image_url === \"string\" && item.image_url !== undefined);\n        return imageUrlContent;\n      });\n    } else {\n      return response.flatMap(res => {\n        const b64Content = res.data.flatMap(item => {\n          if (!item.b64_json) return [];\n          return {\n            type: \"image_url\",\n            image_url: {\n              url: item.b64_json\n            }\n          };\n        }).filter(item => item !== undefined && item.type === \"image_url\" && typeof item.image_url === \"object\" && \"url\" in item.image_url && typeof item.image_url.url === \"string\" && item.image_url.url !== undefined);\n        return b64Content;\n      });\n    }\n  }\n  /** @ignore */\n  async _call(input) {\n    const generateImageFields = {\n      model: this.model,\n      prompt: input,\n      n: 1,\n      size: this.size,\n      response_format: this.dallEResponseFormat,\n      style: this.style,\n      quality: this.quality,\n      user: this.user\n    };\n    if (this.n > 1) {\n      const results = await Promise.all(Array.from({\n        length: this.n\n      }).map(() => this.client.images.generate(generateImageFields)));\n      return this.processMultipleGeneratedUrls(results);\n    }\n    const response = await this.client.images.generate(generateImageFields);\n    let data = \"\";\n    if (this.dallEResponseFormat === \"url\") {\n      [data] = response.data.map(item => item.url).filter(url => url !== \"undefined\");\n    } else {\n      [data] = response.data.map(item => item.b64_json).filter(b64_json => b64_json !== \"undefined\");\n    }\n    return data;\n  }\n}\nObject.defineProperty(DallEAPIWrapper, \"toolName\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"dalle_api_wrapper\"\n});","map":{"version":3,"names":["getEnvironmentVariable","OpenAI","OpenAIClient","Tool","DallEAPIWrapper","lc_name","constructor","fields","responseFormat","undefined","includes","dallEResponseFormat","Object","defineProperty","enumerable","configurable","writable","value","openAIApiKey","apiKey","organization","clientConfig","dangerouslyAllowBrowser","baseUrl","client","model","modelName","style","quality","n","size","user","processMultipleGeneratedUrls","response","flatMap","res","imageUrlContent","data","item","url","type","image_url","filter","b64Content","b64_json","_call","input","generateImageFields","prompt","response_format","results","Promise","all","Array","from","length","map","images","generate"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/@langchain/openai/dist/tools/dalle.js"],"sourcesContent":["/* eslint-disable no-param-reassign */\nimport { getEnvironmentVariable } from \"@langchain/core/utils/env\";\nimport { OpenAI as OpenAIClient } from \"openai\";\nimport { Tool } from \"@langchain/core/tools\";\n/**\n * A tool for generating images with Open AIs Dall-E 2 or 3 API.\n */\nexport class DallEAPIWrapper extends Tool {\n    static lc_name() {\n        return \"DallEAPIWrapper\";\n    }\n    constructor(fields) {\n        // Shim for new base tool param name\n        if (fields?.responseFormat !== undefined &&\n            [\"url\", \"b64_json\"].includes(fields.responseFormat)) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            fields.dallEResponseFormat = fields.responseFormat;\n            fields.responseFormat = \"content\";\n        }\n        super(fields);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"dalle_api_wrapper\"\n        });\n        Object.defineProperty(this, \"description\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"A wrapper around OpenAI DALL-E API. Useful for when you need to generate images from a text description. Input should be an image description.\"\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"dall-e-3\"\n        });\n        Object.defineProperty(this, \"style\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"vivid\"\n        });\n        Object.defineProperty(this, \"quality\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"standard\"\n        });\n        Object.defineProperty(this, \"n\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"size\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"1024x1024\"\n        });\n        Object.defineProperty(this, \"dallEResponseFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"url\"\n        });\n        Object.defineProperty(this, \"user\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const openAIApiKey = fields?.apiKey ??\n            fields?.openAIApiKey ??\n            getEnvironmentVariable(\"OPENAI_API_KEY\");\n        const organization = fields?.organization ?? getEnvironmentVariable(\"OPENAI_ORGANIZATION\");\n        const clientConfig = {\n            apiKey: openAIApiKey,\n            organization,\n            dangerouslyAllowBrowser: true,\n            baseUrl: fields?.baseUrl,\n        };\n        this.client = new OpenAIClient(clientConfig);\n        this.model = fields?.model ?? fields?.modelName ?? this.model;\n        this.style = fields?.style ?? this.style;\n        this.quality = fields?.quality ?? this.quality;\n        this.n = fields?.n ?? this.n;\n        this.size = fields?.size ?? this.size;\n        this.dallEResponseFormat =\n            fields?.dallEResponseFormat ?? this.dallEResponseFormat;\n        this.user = fields?.user;\n    }\n    /**\n     * Processes the API response if multiple images are generated.\n     * Returns a list of MessageContentImageUrl objects. If the response\n     * format is `url`, then the `image_url` field will contain the URL.\n     * If it is `b64_json`, then the `image_url` field will contain an object\n     * with a `url` field with the base64 encoded image.\n     *\n     * @param {OpenAIClient.Images.ImagesResponse[]} response The API response\n     * @returns {MessageContentImageUrl[]}\n     */\n    processMultipleGeneratedUrls(response) {\n        if (this.dallEResponseFormat === \"url\") {\n            return response.flatMap((res) => {\n                const imageUrlContent = res.data\n                    .flatMap((item) => {\n                    if (!item.url)\n                        return [];\n                    return {\n                        type: \"image_url\",\n                        image_url: item.url,\n                    };\n                })\n                    .filter((item) => item !== undefined &&\n                    item.type === \"image_url\" &&\n                    typeof item.image_url === \"string\" &&\n                    item.image_url !== undefined);\n                return imageUrlContent;\n            });\n        }\n        else {\n            return response.flatMap((res) => {\n                const b64Content = res.data\n                    .flatMap((item) => {\n                    if (!item.b64_json)\n                        return [];\n                    return {\n                        type: \"image_url\",\n                        image_url: {\n                            url: item.b64_json,\n                        },\n                    };\n                })\n                    .filter((item) => item !== undefined &&\n                    item.type === \"image_url\" &&\n                    typeof item.image_url === \"object\" &&\n                    \"url\" in item.image_url &&\n                    typeof item.image_url.url === \"string\" &&\n                    item.image_url.url !== undefined);\n                return b64Content;\n            });\n        }\n    }\n    /** @ignore */\n    async _call(input) {\n        const generateImageFields = {\n            model: this.model,\n            prompt: input,\n            n: 1,\n            size: this.size,\n            response_format: this.dallEResponseFormat,\n            style: this.style,\n            quality: this.quality,\n            user: this.user,\n        };\n        if (this.n > 1) {\n            const results = await Promise.all(Array.from({ length: this.n }).map(() => this.client.images.generate(generateImageFields)));\n            return this.processMultipleGeneratedUrls(results);\n        }\n        const response = await this.client.images.generate(generateImageFields);\n        let data = \"\";\n        if (this.dallEResponseFormat === \"url\") {\n            [data] = response.data\n                .map((item) => item.url)\n                .filter((url) => url !== \"undefined\");\n        }\n        else {\n            [data] = response.data\n                .map((item) => item.b64_json)\n                .filter((b64_json) => b64_json !== \"undefined\");\n        }\n        return data;\n    }\n}\nObject.defineProperty(DallEAPIWrapper, \"toolName\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"dalle_api_wrapper\"\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}