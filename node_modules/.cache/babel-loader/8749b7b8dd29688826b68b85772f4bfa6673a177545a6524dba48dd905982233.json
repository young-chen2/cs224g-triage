{"ast":null,"code":"import { LLMChain } from \"../llm_chain.js\";\nimport { StuffDocumentsChain, MapReduceDocumentsChain, RefineDocumentsChain } from \"../combine_docs_chain.js\";\nimport { QA_PROMPT_SELECTOR } from \"./stuff_prompts.js\";\nimport { COMBINE_PROMPT_SELECTOR, COMBINE_QA_PROMPT_SELECTOR } from \"./map_reduce_prompts.js\";\nimport { QUESTION_PROMPT_SELECTOR, REFINE_PROMPT_SELECTOR } from \"./refine_prompts.js\";\nexport const loadQAChain = (llm, params = {\n  type: \"stuff\"\n}) => {\n  const {\n    type\n  } = params;\n  if (type === \"stuff\") {\n    return loadQAStuffChain(llm, params);\n  }\n  if (type === \"map_reduce\") {\n    return loadQAMapReduceChain(llm, params);\n  }\n  if (type === \"refine\") {\n    return loadQARefineChain(llm, params);\n  }\n  throw new Error(`Invalid _type: ${type}`);\n};\n/**\n * Loads a StuffQAChain based on the provided parameters. It takes an LLM\n * instance and StuffQAChainParams as parameters.\n * @param llm An instance of BaseLanguageModel.\n * @param params Parameters for creating a StuffQAChain.\n * @returns A StuffQAChain instance.\n */\nexport function loadQAStuffChain(llm, params = {}) {\n  const {\n    prompt = QA_PROMPT_SELECTOR.getPrompt(llm),\n    verbose\n  } = params;\n  const llmChain = new LLMChain({\n    prompt,\n    llm,\n    verbose\n  });\n  const chain = new StuffDocumentsChain({\n    llmChain,\n    verbose\n  });\n  return chain;\n}\n/**\n * Loads a MapReduceQAChain based on the provided parameters. It takes an\n * LLM instance and MapReduceQAChainParams as parameters.\n * @param llm An instance of BaseLanguageModel.\n * @param params Parameters for creating a MapReduceQAChain.\n * @returns A MapReduceQAChain instance.\n */\nexport function loadQAMapReduceChain(llm, params = {}) {\n  const {\n    combineMapPrompt = COMBINE_QA_PROMPT_SELECTOR.getPrompt(llm),\n    combinePrompt = COMBINE_PROMPT_SELECTOR.getPrompt(llm),\n    verbose,\n    combineLLM,\n    returnIntermediateSteps\n  } = params;\n  const llmChain = new LLMChain({\n    prompt: combineMapPrompt,\n    llm,\n    verbose\n  });\n  const combineLLMChain = new LLMChain({\n    prompt: combinePrompt,\n    llm: combineLLM ?? llm,\n    verbose\n  });\n  const combineDocumentChain = new StuffDocumentsChain({\n    llmChain: combineLLMChain,\n    documentVariableName: \"summaries\",\n    verbose\n  });\n  const chain = new MapReduceDocumentsChain({\n    llmChain,\n    combineDocumentChain,\n    returnIntermediateSteps,\n    verbose\n  });\n  return chain;\n}\n/**\n * Loads a RefineQAChain based on the provided parameters. It takes an LLM\n * instance and RefineQAChainParams as parameters.\n * @param llm An instance of BaseLanguageModel.\n * @param params Parameters for creating a RefineQAChain.\n * @returns A RefineQAChain instance.\n */\nexport function loadQARefineChain(llm, params = {}) {\n  const {\n    questionPrompt = QUESTION_PROMPT_SELECTOR.getPrompt(llm),\n    refinePrompt = REFINE_PROMPT_SELECTOR.getPrompt(llm),\n    refineLLM,\n    verbose\n  } = params;\n  const llmChain = new LLMChain({\n    prompt: questionPrompt,\n    llm,\n    verbose\n  });\n  const refineLLMChain = new LLMChain({\n    prompt: refinePrompt,\n    llm: refineLLM ?? llm,\n    verbose\n  });\n  const chain = new RefineDocumentsChain({\n    llmChain,\n    refineLLMChain,\n    verbose\n  });\n  return chain;\n}","map":{"version":3,"names":["LLMChain","StuffDocumentsChain","MapReduceDocumentsChain","RefineDocumentsChain","QA_PROMPT_SELECTOR","COMBINE_PROMPT_SELECTOR","COMBINE_QA_PROMPT_SELECTOR","QUESTION_PROMPT_SELECTOR","REFINE_PROMPT_SELECTOR","loadQAChain","llm","params","type","loadQAStuffChain","loadQAMapReduceChain","loadQARefineChain","Error","prompt","getPrompt","verbose","llmChain","chain","combineMapPrompt","combinePrompt","combineLLM","returnIntermediateSteps","combineLLMChain","combineDocumentChain","documentVariableName","questionPrompt","refinePrompt","refineLLM","refineLLMChain"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/langchain/dist/chains/question_answering/load.js"],"sourcesContent":["import { LLMChain } from \"../llm_chain.js\";\nimport { StuffDocumentsChain, MapReduceDocumentsChain, RefineDocumentsChain, } from \"../combine_docs_chain.js\";\nimport { QA_PROMPT_SELECTOR } from \"./stuff_prompts.js\";\nimport { COMBINE_PROMPT_SELECTOR, COMBINE_QA_PROMPT_SELECTOR, } from \"./map_reduce_prompts.js\";\nimport { QUESTION_PROMPT_SELECTOR, REFINE_PROMPT_SELECTOR, } from \"./refine_prompts.js\";\nexport const loadQAChain = (llm, params = { type: \"stuff\" }) => {\n    const { type } = params;\n    if (type === \"stuff\") {\n        return loadQAStuffChain(llm, params);\n    }\n    if (type === \"map_reduce\") {\n        return loadQAMapReduceChain(llm, params);\n    }\n    if (type === \"refine\") {\n        return loadQARefineChain(llm, params);\n    }\n    throw new Error(`Invalid _type: ${type}`);\n};\n/**\n * Loads a StuffQAChain based on the provided parameters. It takes an LLM\n * instance and StuffQAChainParams as parameters.\n * @param llm An instance of BaseLanguageModel.\n * @param params Parameters for creating a StuffQAChain.\n * @returns A StuffQAChain instance.\n */\nexport function loadQAStuffChain(llm, params = {}) {\n    const { prompt = QA_PROMPT_SELECTOR.getPrompt(llm), verbose } = params;\n    const llmChain = new LLMChain({ prompt, llm, verbose });\n    const chain = new StuffDocumentsChain({ llmChain, verbose });\n    return chain;\n}\n/**\n * Loads a MapReduceQAChain based on the provided parameters. It takes an\n * LLM instance and MapReduceQAChainParams as parameters.\n * @param llm An instance of BaseLanguageModel.\n * @param params Parameters for creating a MapReduceQAChain.\n * @returns A MapReduceQAChain instance.\n */\nexport function loadQAMapReduceChain(llm, params = {}) {\n    const { combineMapPrompt = COMBINE_QA_PROMPT_SELECTOR.getPrompt(llm), combinePrompt = COMBINE_PROMPT_SELECTOR.getPrompt(llm), verbose, combineLLM, returnIntermediateSteps, } = params;\n    const llmChain = new LLMChain({ prompt: combineMapPrompt, llm, verbose });\n    const combineLLMChain = new LLMChain({\n        prompt: combinePrompt,\n        llm: combineLLM ?? llm,\n        verbose,\n    });\n    const combineDocumentChain = new StuffDocumentsChain({\n        llmChain: combineLLMChain,\n        documentVariableName: \"summaries\",\n        verbose,\n    });\n    const chain = new MapReduceDocumentsChain({\n        llmChain,\n        combineDocumentChain,\n        returnIntermediateSteps,\n        verbose,\n    });\n    return chain;\n}\n/**\n * Loads a RefineQAChain based on the provided parameters. It takes an LLM\n * instance and RefineQAChainParams as parameters.\n * @param llm An instance of BaseLanguageModel.\n * @param params Parameters for creating a RefineQAChain.\n * @returns A RefineQAChain instance.\n */\nexport function loadQARefineChain(llm, params = {}) {\n    const { questionPrompt = QUESTION_PROMPT_SELECTOR.getPrompt(llm), refinePrompt = REFINE_PROMPT_SELECTOR.getPrompt(llm), refineLLM, verbose, } = params;\n    const llmChain = new LLMChain({ prompt: questionPrompt, llm, verbose });\n    const refineLLMChain = new LLMChain({\n        prompt: refinePrompt,\n        llm: refineLLM ?? llm,\n        verbose,\n    });\n    const chain = new RefineDocumentsChain({\n        llmChain,\n        refineLLMChain,\n        verbose,\n    });\n    return chain;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}