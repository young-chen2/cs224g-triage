{"ast":null,"code":"var _jsxFileName = \"/Users/youngchen/Downloads/cs224g-triage/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport OpenAI from 'openai';\nimport { FaissStore } from 'langchain/vectorstores/faiss';\nimport { OpenAIEmbeddings } from 'langchain/embeddings/openai';\nimport { RetrievalQAChain } from 'langchain/chains';\nimport { SYSTEM_PROMPT, INITIAL_MESSAGE } from './prompts';\n\n// Initialize LangChain components (currently not used)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst embeddings = new OpenAIEmbeddings({\n  openAIApiKey: process.env.REACT_APP_OPENAI_API_KEY\n});\n\n// Mock medical guidelines (replace with your actual data later)\nconst MOCK_GUIDELINES = [\"Fever, cough, and shortness of breath may indicate a respiratory infection.\", \"Chest pain and shortness of breath could be signs of a heart condition.\", \"Headache and dizziness may suggest dehydration or migraines.\", \"Abdominal pain and nausea could indicate gastrointestinal issues.\"];\n\n// Create an in-memory vector store with mock guidelines\nlet vectorStore;\n(async () => {\n  vectorStore = await FaissStore.fromTexts(MOCK_GUIDELINES,\n  // Documents to store\n  MOCK_GUIDELINES.map((_, i) => ({\n    id: i\n  })),\n  // Metadata for each document\n  embeddings // Embedding model\n  );\n})();\nconst client = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true\n});\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([{\n    role: 'assistant',\n    content: INITIAL_MESSAGE\n  }]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const [recognition, setRecognition] = useState(null);\n  const speak = text => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    window.speechSynthesis.speak(utterance);\n  };\n  const handleSendMessage = async (message = inputMessage) => {\n    if (message.trim() === '') return;\n    setMessages(prevMessages => [...prevMessages, {\n      role: 'user',\n      content: message\n    }]);\n    setInputMessage('');\n    try {\n      const response = await client.chat.completions.create({\n        model: \"gpt-4o-mini\",\n        messages: [{\n          role: \"system\",\n          content: SYSTEM_PROMPT\n        }, ...messages, {\n          role: \"user\",\n          content: message\n        }]\n      });\n      const assistantMessage = response.choices[0].message.content;\n      setMessages(prevMessages => [...prevMessages, {\n        role: 'assistant',\n        content: assistantMessage\n      }]);\n      speak(assistantMessage);\n    } catch (error) {\n      console.error('Error calling OpenAI API:', error);\n      const errorMessage = \"I'm sorry, I encountered an error. Please try again.\";\n      setMessages(prevMessages => [...prevMessages, {\n        role: 'assistant',\n        content: errorMessage\n      }]);\n      speak(errorMessage);\n    }\n  };\n  useEffect(() => {\n    if ('webkitSpeechRecognition' in window) {\n      const recognitionInstance = new window.webkitSpeechRecognition();\n      recognitionInstance.continuous = false;\n      recognitionInstance.interimResults = false;\n      recognitionInstance.onresult = event => {\n        const transcript = event.results[0][0].transcript;\n        setInputMessage(transcript);\n        setIsListening(false);\n        // ensure state is updated before sending\n        setTimeout(() => handleSendMessage(transcript), 100);\n      };\n      recognitionInstance.onerror = event => {\n        console.error('Speech recognition error:', event.error);\n        setIsListening(false);\n      };\n      recognitionInstance.onend = () => {\n        setIsListening(false);\n      };\n      setRecognition(recognitionInstance);\n    }\n  }, []);\n  const toggleListening = () => {\n    if (!recognition) {\n      console.error('Speech recognition not supported');\n      return;\n    }\n    if (isListening) {\n      recognition.stop();\n    } else {\n      try {\n        recognition.start();\n        setIsListening(true);\n      } catch (error) {\n        console.error('Error starting recognition:', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `App ${isDarkMode ? 'dark-mode' : 'light-mode'}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Triage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"theme-toggle\",\n          onClick: () => setIsDarkMode(!isDarkMode),\n          children: isDarkMode ? '☀️' : '🌙'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages-container\",\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.role}`,\n          children: message.content\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputMessage,\n          onChange: e => setInputMessage(e.target.value),\n          placeholder: \"Describe your symptoms...\",\n          onKeyPress: e => e.key === 'Enter' && handleSendMessage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSendMessage(),\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleListening,\n          className: `mic-button ${isListening ? 'listening' : ''}`,\n          children: isListening ? '🎤 (Recording...)' : '🎤'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Otibv2TDzFSFzSNrPCMj4gd8718=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","OpenAI","FaissStore","OpenAIEmbeddings","RetrievalQAChain","SYSTEM_PROMPT","INITIAL_MESSAGE","jsxDEV","_jsxDEV","embeddings","openAIApiKey","process","env","REACT_APP_OPENAI_API_KEY","MOCK_GUIDELINES","vectorStore","fromTexts","map","_","i","id","client","apiKey","dangerouslyAllowBrowser","App","_s","messages","setMessages","role","content","inputMessage","setInputMessage","isDarkMode","setIsDarkMode","isListening","setIsListening","recognition","setRecognition","speak","text","utterance","SpeechSynthesisUtterance","window","speechSynthesis","handleSendMessage","message","trim","prevMessages","response","chat","completions","create","model","assistantMessage","choices","error","console","errorMessage","recognitionInstance","webkitSpeechRecognition","continuous","interimResults","onresult","event","transcript","results","setTimeout","onerror","onend","toggleListening","stop","start","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","index","type","value","onChange","e","target","placeholder","onKeyPress","key","_c","$RefreshReg$"],"sources":["/Users/youngchen/Downloads/cs224g-triage/src/App.js"],"sourcesContent":["import './App.css';\nimport { useState, useEffect } from 'react';\nimport OpenAI from 'openai';\nimport { FaissStore } from 'langchain/vectorstores/faiss';\nimport { OpenAIEmbeddings } from 'langchain/embeddings/openai';\nimport { RetrievalQAChain } from 'langchain/chains';\nimport { SYSTEM_PROMPT, INITIAL_MESSAGE } from './prompts';\n\n// Initialize LangChain components (currently not used)\nconst embeddings = new OpenAIEmbeddings({\n  openAIApiKey: process.env.REACT_APP_OPENAI_API_KEY,\n});\n\n// Mock medical guidelines (replace with your actual data later)\nconst MOCK_GUIDELINES = [\n  \"Fever, cough, and shortness of breath may indicate a respiratory infection.\",\n  \"Chest pain and shortness of breath could be signs of a heart condition.\",\n  \"Headache and dizziness may suggest dehydration or migraines.\",\n  \"Abdominal pain and nausea could indicate gastrointestinal issues.\",\n];\n\n// Create an in-memory vector store with mock guidelines\nlet vectorStore;\n(async () => {\n  vectorStore = await FaissStore.fromTexts(\n    MOCK_GUIDELINES, // Documents to store\n    MOCK_GUIDELINES.map((_, i) => ({ id: i })), // Metadata for each document\n    embeddings // Embedding model\n  );\n})();\n\n\nconst client = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true\n});\n\nfunction App() {\n  const [messages, setMessages] = useState([\n    { role: 'assistant', content: INITIAL_MESSAGE }\n  ]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const [recognition, setRecognition] = useState(null);\n\n  const speak = (text) => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    window.speechSynthesis.speak(utterance);\n  };\n\n  const handleSendMessage = async (message = inputMessage) => {\n    if (message.trim() === '') return;\n    \n    setMessages(prevMessages => [...prevMessages, { role: 'user', content: message }]);\n    setInputMessage('');\n\n    try {\n      const response = await client.chat.completions.create({\n        model: \"gpt-4o-mini\",\n        messages: [\n          { role: \"system\", content: SYSTEM_PROMPT },\n          ...messages,\n          { role: \"user\", content: message }\n        ]\n      });\n\n      const assistantMessage = response.choices[0].message.content;\n      setMessages(prevMessages => [...prevMessages, { role: 'assistant', content: assistantMessage }]);\n      speak(assistantMessage);\n    } \n    catch (error) {\n      console.error('Error calling OpenAI API:', error);\n      const errorMessage = \"I'm sorry, I encountered an error. Please try again.\";\n      setMessages(prevMessages => [...prevMessages, { \n        role: 'assistant', \n        content: errorMessage \n      }]);\n      speak(errorMessage);\n    }\n  };\n\n  useEffect(() => {\n    if ('webkitSpeechRecognition' in window) {\n      const recognitionInstance = new window.webkitSpeechRecognition();\n      recognitionInstance.continuous = false;\n      recognitionInstance.interimResults = false;\n      \n      recognitionInstance.onresult = (event) => {\n        const transcript = event.results[0][0].transcript;\n        setInputMessage(transcript);\n        setIsListening(false);\n        // ensure state is updated before sending\n        setTimeout(() => handleSendMessage(transcript), 100);\n      };\n\n      recognitionInstance.onerror = (event) => {\n        console.error('Speech recognition error:', event.error);\n        setIsListening(false);\n      };\n\n      recognitionInstance.onend = () => {\n        setIsListening(false);\n      };\n\n      setRecognition(recognitionInstance);\n    }\n  }, []);\n\n  const toggleListening = () => {\n    if (!recognition) {\n      console.error('Speech recognition not supported');\n      return;\n    }\n\n    if (isListening) {\n      recognition.stop();\n    } else {\n      try {\n        recognition.start();\n        setIsListening(true);\n      } catch (error) {\n        console.error('Error starting recognition:', error);\n      }\n    }\n  };\n\n  return (\n    <div className={`App ${isDarkMode ? 'dark-mode' : 'light-mode'}`}>\n      <div className=\"chat-container\">\n        <header className=\"chat-header\">\n          <h1>Triage</h1>\n          <button \n            className=\"theme-toggle\"\n            onClick={() => setIsDarkMode(!isDarkMode)}\n          >\n            {isDarkMode ? '☀️' : '🌙'}\n          </button>\n        </header>\n        \n        <div className=\"messages-container\">\n          {messages.map((message, index) => (\n            <div key={index} className={`message ${message.role}`}>\n              {message.content}\n            </div>\n          ))}\n        </div>\n\n        <div className=\"input-container\">\n          <input\n            type=\"text\"\n            value={inputMessage}\n            onChange={(e) => setInputMessage(e.target.value)}\n            placeholder=\"Describe your symptoms...\"\n            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n          />\n          <button onClick={() => handleSendMessage()}>Send</button>\n          <button \n            onClick={toggleListening}\n            className={`mic-button ${isListening ? 'listening' : ''}`}\n          >\n            {isListening ? '🎤 (Recording...)' : '🎤'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}