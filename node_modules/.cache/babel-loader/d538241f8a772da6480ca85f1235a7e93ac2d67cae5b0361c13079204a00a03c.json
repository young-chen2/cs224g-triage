{"ast":null,"code":"import { BaseExampleSelector } from \"./base.js\";\n/**\n * Calculates the length of a text based on the number of words and lines.\n */\nfunction getLengthBased(text) {\n  return text.split(/\\n| /).length;\n}\n/**\n * A specialized example selector that selects examples based on their\n * length, ensuring that the total length of the selected examples does\n * not exceed a specified maximum length.\n * @example\n * ```typescript\n * const exampleSelector = new LengthBasedExampleSelector(\n *   [\n *     { input: \"happy\", output: \"sad\" },\n *     { input: \"tall\", output: \"short\" },\n *     { input: \"energetic\", output: \"lethargic\" },\n *     { input: \"sunny\", output: \"gloomy\" },\n *     { input: \"windy\", output: \"calm\" },\n *   ],\n *   {\n *     examplePrompt: new PromptTemplate({\n *       inputVariables: [\"input\", \"output\"],\n *       template: \"Input: {input}\\nOutput: {output}\",\n *     }),\n *     maxLength: 25,\n *   },\n * );\n * const dynamicPrompt = new FewShotPromptTemplate({\n *   exampleSelector,\n *   examplePrompt: new PromptTemplate({\n *     inputVariables: [\"input\", \"output\"],\n *     template: \"Input: {input}\\nOutput: {output}\",\n *   }),\n *   prefix: \"Give the antonym of every input\",\n *   suffix: \"Input: {adjective}\\nOutput:\",\n *   inputVariables: [\"adjective\"],\n * });\n * console.log(dynamicPrompt.format({ adjective: \"big\" }));\n * console.log(\n *   dynamicPrompt.format({\n *     adjective:\n *       \"big and huge and massive and large and gigantic and tall and much much much much much bigger than everything else\",\n *   }),\n * );\n * ```\n */\nexport class LengthBasedExampleSelector extends BaseExampleSelector {\n  constructor(data) {\n    super(data);\n    Object.defineProperty(this, \"examples\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, \"examplePrompt\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"getTextLength\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: getLengthBased\n    });\n    Object.defineProperty(this, \"maxLength\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 2048\n    });\n    Object.defineProperty(this, \"exampleTextLengths\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    this.examplePrompt = data.examplePrompt;\n    this.maxLength = data.maxLength ?? 2048;\n    this.getTextLength = data.getTextLength ?? getLengthBased;\n  }\n  /**\n   * Adds an example to the list of examples and calculates its length.\n   * @param example The example to be added.\n   * @returns Promise that resolves when the example has been added and its length calculated.\n   */\n  async addExample(example) {\n    this.examples.push(example);\n    const stringExample = await this.examplePrompt.format(example);\n    this.exampleTextLengths.push(this.getTextLength(stringExample));\n  }\n  /**\n   * Calculates the lengths of the examples.\n   * @param v Array of lengths of the examples.\n   * @param values Instance of LengthBasedExampleSelector.\n   * @returns Promise that resolves with an array of lengths of the examples.\n   */\n  async calculateExampleTextLengths(v, values) {\n    if (v.length > 0) {\n      return v;\n    }\n    const {\n      examples,\n      examplePrompt\n    } = values;\n    const stringExamples = await Promise.all(examples.map(eg => examplePrompt.format(eg)));\n    return stringExamples.map(eg => this.getTextLength(eg));\n  }\n  /**\n   * Selects examples until the total length of the selected examples\n   * reaches the maxLength.\n   * @param inputVariables The input variables for the examples.\n   * @returns Promise that resolves with an array of selected examples.\n   */\n  async selectExamples(inputVariables) {\n    const inputs = Object.values(inputVariables).join(\" \");\n    let remainingLength = this.maxLength - this.getTextLength(inputs);\n    let i = 0;\n    const examples = [];\n    while (remainingLength > 0 && i < this.examples.length) {\n      const newLength = remainingLength - this.exampleTextLengths[i];\n      if (newLength < 0) {\n        break;\n      } else {\n        examples.push(this.examples[i]);\n        remainingLength = newLength;\n      }\n      i += 1;\n    }\n    return examples;\n  }\n  /**\n   * Creates a new instance of LengthBasedExampleSelector and adds a list of\n   * examples to it.\n   * @param examples Array of examples to be added.\n   * @param args Input parameters for the LengthBasedExampleSelector.\n   * @returns Promise that resolves with a new instance of LengthBasedExampleSelector with the examples added.\n   */\n  static async fromExamples(examples, args) {\n    const selector = new LengthBasedExampleSelector(args);\n    await Promise.all(examples.map(eg => selector.addExample(eg)));\n    return selector;\n  }\n}","map":{"version":3,"names":["BaseExampleSelector","getLengthBased","text","split","length","LengthBasedExampleSelector","constructor","data","Object","defineProperty","enumerable","configurable","writable","value","examplePrompt","maxLength","getTextLength","addExample","example","examples","push","stringExample","format","exampleTextLengths","calculateExampleTextLengths","v","values","stringExamples","Promise","all","map","eg","selectExamples","inputVariables","inputs","join","remainingLength","i","newLength","fromExamples","args","selector"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/@langchain/core/dist/example_selectors/length_based.js"],"sourcesContent":["import { BaseExampleSelector } from \"./base.js\";\n/**\n * Calculates the length of a text based on the number of words and lines.\n */\nfunction getLengthBased(text) {\n    return text.split(/\\n| /).length;\n}\n/**\n * A specialized example selector that selects examples based on their\n * length, ensuring that the total length of the selected examples does\n * not exceed a specified maximum length.\n * @example\n * ```typescript\n * const exampleSelector = new LengthBasedExampleSelector(\n *   [\n *     { input: \"happy\", output: \"sad\" },\n *     { input: \"tall\", output: \"short\" },\n *     { input: \"energetic\", output: \"lethargic\" },\n *     { input: \"sunny\", output: \"gloomy\" },\n *     { input: \"windy\", output: \"calm\" },\n *   ],\n *   {\n *     examplePrompt: new PromptTemplate({\n *       inputVariables: [\"input\", \"output\"],\n *       template: \"Input: {input}\\nOutput: {output}\",\n *     }),\n *     maxLength: 25,\n *   },\n * );\n * const dynamicPrompt = new FewShotPromptTemplate({\n *   exampleSelector,\n *   examplePrompt: new PromptTemplate({\n *     inputVariables: [\"input\", \"output\"],\n *     template: \"Input: {input}\\nOutput: {output}\",\n *   }),\n *   prefix: \"Give the antonym of every input\",\n *   suffix: \"Input: {adjective}\\nOutput:\",\n *   inputVariables: [\"adjective\"],\n * });\n * console.log(dynamicPrompt.format({ adjective: \"big\" }));\n * console.log(\n *   dynamicPrompt.format({\n *     adjective:\n *       \"big and huge and massive and large and gigantic and tall and much much much much much bigger than everything else\",\n *   }),\n * );\n * ```\n */\nexport class LengthBasedExampleSelector extends BaseExampleSelector {\n    constructor(data) {\n        super(data);\n        Object.defineProperty(this, \"examples\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"examplePrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"getTextLength\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: getLengthBased\n        });\n        Object.defineProperty(this, \"maxLength\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 2048\n        });\n        Object.defineProperty(this, \"exampleTextLengths\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        this.examplePrompt = data.examplePrompt;\n        this.maxLength = data.maxLength ?? 2048;\n        this.getTextLength = data.getTextLength ?? getLengthBased;\n    }\n    /**\n     * Adds an example to the list of examples and calculates its length.\n     * @param example The example to be added.\n     * @returns Promise that resolves when the example has been added and its length calculated.\n     */\n    async addExample(example) {\n        this.examples.push(example);\n        const stringExample = await this.examplePrompt.format(example);\n        this.exampleTextLengths.push(this.getTextLength(stringExample));\n    }\n    /**\n     * Calculates the lengths of the examples.\n     * @param v Array of lengths of the examples.\n     * @param values Instance of LengthBasedExampleSelector.\n     * @returns Promise that resolves with an array of lengths of the examples.\n     */\n    async calculateExampleTextLengths(v, values) {\n        if (v.length > 0) {\n            return v;\n        }\n        const { examples, examplePrompt } = values;\n        const stringExamples = await Promise.all(examples.map((eg) => examplePrompt.format(eg)));\n        return stringExamples.map((eg) => this.getTextLength(eg));\n    }\n    /**\n     * Selects examples until the total length of the selected examples\n     * reaches the maxLength.\n     * @param inputVariables The input variables for the examples.\n     * @returns Promise that resolves with an array of selected examples.\n     */\n    async selectExamples(inputVariables) {\n        const inputs = Object.values(inputVariables).join(\" \");\n        let remainingLength = this.maxLength - this.getTextLength(inputs);\n        let i = 0;\n        const examples = [];\n        while (remainingLength > 0 && i < this.examples.length) {\n            const newLength = remainingLength - this.exampleTextLengths[i];\n            if (newLength < 0) {\n                break;\n            }\n            else {\n                examples.push(this.examples[i]);\n                remainingLength = newLength;\n            }\n            i += 1;\n        }\n        return examples;\n    }\n    /**\n     * Creates a new instance of LengthBasedExampleSelector and adds a list of\n     * examples to it.\n     * @param examples Array of examples to be added.\n     * @param args Input parameters for the LengthBasedExampleSelector.\n     * @returns Promise that resolves with a new instance of LengthBasedExampleSelector with the examples added.\n     */\n    static async fromExamples(examples, args) {\n        const selector = new LengthBasedExampleSelector(args);\n        await Promise.all(examples.map((eg) => selector.addExample(eg)));\n        return selector;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}