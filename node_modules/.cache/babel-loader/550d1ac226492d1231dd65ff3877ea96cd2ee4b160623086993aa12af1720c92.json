{"ast":null,"code":"export function parseLiteralDef(def, refs) {\n  const parsedType = typeof def.value;\n  if (parsedType !== \"bigint\" && parsedType !== \"number\" && parsedType !== \"boolean\" && parsedType !== \"string\") {\n    return {\n      type: Array.isArray(def.value) ? \"array\" : \"object\"\n    };\n  }\n  if (refs.target === \"openApi3\") {\n    return {\n      type: parsedType === \"bigint\" ? \"integer\" : parsedType,\n      enum: [def.value]\n    };\n  }\n  return {\n    type: parsedType === \"bigint\" ? \"integer\" : parsedType,\n    const: def.value\n  };\n}","map":{"version":3,"names":["parseLiteralDef","def","refs","parsedType","value","type","Array","isArray","target","enum","const"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/zod-to-json-schema/dist/esm/parsers/literal.js"],"sourcesContent":["export function parseLiteralDef(def, refs) {\n    const parsedType = typeof def.value;\n    if (parsedType !== \"bigint\" &&\n        parsedType !== \"number\" &&\n        parsedType !== \"boolean\" &&\n        parsedType !== \"string\") {\n        return {\n            type: Array.isArray(def.value) ? \"array\" : \"object\",\n        };\n    }\n    if (refs.target === \"openApi3\") {\n        return {\n            type: parsedType === \"bigint\" ? \"integer\" : parsedType,\n            enum: [def.value],\n        };\n    }\n    return {\n        type: parsedType === \"bigint\" ? \"integer\" : parsedType,\n        const: def.value,\n    };\n}\n"],"mappings":"AAAA,OAAO,SAASA,eAAeA,CAACC,GAAG,EAAEC,IAAI,EAAE;EACvC,MAAMC,UAAU,GAAG,OAAOF,GAAG,CAACG,KAAK;EACnC,IAAID,UAAU,KAAK,QAAQ,IACvBA,UAAU,KAAK,QAAQ,IACvBA,UAAU,KAAK,SAAS,IACxBA,UAAU,KAAK,QAAQ,EAAE;IACzB,OAAO;MACHE,IAAI,EAAEC,KAAK,CAACC,OAAO,CAACN,GAAG,CAACG,KAAK,CAAC,GAAG,OAAO,GAAG;IAC/C,CAAC;EACL;EACA,IAAIF,IAAI,CAACM,MAAM,KAAK,UAAU,EAAE;IAC5B,OAAO;MACHH,IAAI,EAAEF,UAAU,KAAK,QAAQ,GAAG,SAAS,GAAGA,UAAU;MACtDM,IAAI,EAAE,CAACR,GAAG,CAACG,KAAK;IACpB,CAAC;EACL;EACA,OAAO;IACHC,IAAI,EAAEF,UAAU,KAAK,QAAQ,GAAG,SAAS,GAAGA,UAAU;IACtDO,KAAK,EAAET,GAAG,CAACG;EACf,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}