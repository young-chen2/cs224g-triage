{"ast":null,"code":"/**\n * Interface for interacting with a document.\n */\nexport class Document {\n  constructor(fields) {\n    Object.defineProperty(this, \"pageContent\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"metadata\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    // The ID field is optional at the moment.\n    // It will likely become required in a future major release after\n    // it has been adopted by enough vectorstore implementations.\n    /**\n     * An optional identifier for the document.\n     *\n     * Ideally this should be unique across the document collection and formatted\n     * as a UUID, but this will not be enforced.\n     */\n    Object.defineProperty(this, \"id\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.pageContent = fields.pageContent !== undefined ? fields.pageContent.toString() : \"\";\n    this.metadata = fields.metadata ?? {};\n    this.id = fields.id;\n  }\n}","map":{"version":3,"names":["Document","constructor","fields","Object","defineProperty","enumerable","configurable","writable","value","pageContent","undefined","toString","metadata","id"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/@langchain/core/dist/documents/document.js"],"sourcesContent":["/**\n * Interface for interacting with a document.\n */\nexport class Document {\n    constructor(fields) {\n        Object.defineProperty(this, \"pageContent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // The ID field is optional at the moment.\n        // It will likely become required in a future major release after\n        // it has been adopted by enough vectorstore implementations.\n        /**\n         * An optional identifier for the document.\n         *\n         * Ideally this should be unique across the document collection and formatted\n         * as a UUID, but this will not be enforced.\n         */\n        Object.defineProperty(this, \"id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.pageContent =\n            fields.pageContent !== undefined ? fields.pageContent.toString() : \"\";\n        this.metadata = fields.metadata ?? {};\n        this.id = fields.id;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,MAAMA,QAAQ,CAAC;EAClBC,WAAWA,CAACC,MAAM,EAAE;IAChBC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,aAAa,EAAE;MACvCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,UAAU,EAAE;MACpCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACF;IACA;IACA;IACA;AACR;AACA;AACA;AACA;AACA;IACQL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,IAAI,EAAE;MAC9BC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACF,IAAI,CAACC,WAAW,GACZP,MAAM,CAACO,WAAW,KAAKC,SAAS,GAAGR,MAAM,CAACO,WAAW,CAACE,QAAQ,CAAC,CAAC,GAAG,EAAE;IACzE,IAAI,CAACC,QAAQ,GAAGV,MAAM,CAACU,QAAQ,IAAI,CAAC,CAAC;IACrC,IAAI,CAACC,EAAE,GAAGX,MAAM,CAACW,EAAE;EACvB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}