{"ast":null,"code":"import { getDefaultOptions } from \"./Options.mjs\";\nimport { zodDef } from \"./util.mjs\";\nexport const getRefs = options => {\n  const _options = getDefaultOptions(options);\n  const currentPath = _options.name !== undefined ? [..._options.basePath, _options.definitionPath, _options.name] : _options.basePath;\n  return {\n    ..._options,\n    currentPath: currentPath,\n    propertyPath: undefined,\n    seenRefs: new Set(),\n    seen: new Map(Object.entries(_options.definitions).map(([name, def]) => [zodDef(def), {\n      def: zodDef(def),\n      path: [..._options.basePath, _options.definitionPath, name],\n      // Resolution of references will be forced even though seen, so it's ok that the schema is undefined here for now.\n      jsonSchema: undefined\n    }]))\n  };\n};","map":{"version":3,"names":["getDefaultOptions","zodDef","getRefs","options","_options","currentPath","name","undefined","basePath","definitionPath","propertyPath","seenRefs","Set","seen","Map","Object","entries","definitions","map","def","path","jsonSchema"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/openai/src/_vendor/zod-to-json-schema/Refs.ts"],"sourcesContent":["import type { ZodTypeDef } from 'zod';\nimport { getDefaultOptions, Options, Targets } from './Options';\nimport { JsonSchema7Type } from './parseDef';\nimport { zodDef } from './util';\n\nexport type Refs = {\n  seen: Map<ZodTypeDef, Seen>;\n  /**\n   * Set of all the `$ref`s we created, e.g. `Set(['#/$defs/ui'])`\n   * this notable does not include any `definitions` that were\n   * explicitly given as an option.\n   */\n  seenRefs: Set<string>;\n  currentPath: string[];\n  propertyPath: string[] | undefined;\n} & Options<Targets>;\n\nexport type Seen = {\n  def: ZodTypeDef;\n  path: string[];\n  jsonSchema: JsonSchema7Type | undefined;\n};\n\nexport const getRefs = (options?: string | Partial<Options<Targets>>): Refs => {\n  const _options = getDefaultOptions(options);\n  const currentPath =\n    _options.name !== undefined ?\n      [..._options.basePath, _options.definitionPath, _options.name]\n    : _options.basePath;\n  return {\n    ..._options,\n    currentPath: currentPath,\n    propertyPath: undefined,\n    seenRefs: new Set(),\n    seen: new Map(\n      Object.entries(_options.definitions).map(([name, def]) => [\n        zodDef(def),\n        {\n          def: zodDef(def),\n          path: [..._options.basePath, _options.definitionPath, name],\n          // Resolution of references will be forced even though seen, so it's ok that the schema is undefined here for now.\n          jsonSchema: undefined,\n        },\n      ]),\n    ),\n  };\n};\n"],"mappings":"SACSA,iBAAiB,QAAoB;SAErCC,MAAM,QAAE;AAoBjB,OAAO,MAAMC,OAAO,GAAIC,OAA4C,IAAU;EAC5E,MAAMC,QAAQ,GAAGJ,iBAAiB,CAACG,OAAO,CAAC;EAC3C,MAAME,WAAW,GACfD,QAAQ,CAACE,IAAI,KAAKC,SAAS,GACzB,CAAC,GAAGH,QAAQ,CAACI,QAAQ,EAAEJ,QAAQ,CAACK,cAAc,EAAEL,QAAQ,CAACE,IAAI,CAAC,GAC9DF,QAAQ,CAACI,QAAQ;EACrB,OAAO;IACL,GAAGJ,QAAQ;IACXC,WAAW,EAAEA,WAAW;IACxBK,YAAY,EAAEH,SAAS;IACvBI,QAAQ,EAAE,IAAIC,GAAG,EAAE;IACnBC,IAAI,EAAE,IAAIC,GAAG,CACXC,MAAM,CAACC,OAAO,CAACZ,QAAQ,CAACa,WAAW,CAAC,CAACC,GAAG,CAAC,CAAC,CAACZ,IAAI,EAAEa,GAAG,CAAC,KAAK,CACxDlB,MAAM,CAACkB,GAAG,CAAC,EACX;MACEA,GAAG,EAAElB,MAAM,CAACkB,GAAG,CAAC;MAChBC,IAAI,EAAE,CAAC,GAAGhB,QAAQ,CAACI,QAAQ,EAAEJ,QAAQ,CAACK,cAAc,EAAEH,IAAI,CAAC;MAC3D;MACAe,UAAU,EAAEd;KACb,CACF,CAAC;GAEL;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}