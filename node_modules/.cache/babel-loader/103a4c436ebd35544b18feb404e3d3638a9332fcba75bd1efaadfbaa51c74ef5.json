{"ast":null,"code":"import { setResponseValueAndErrors } from \"../errorMessages.js\";\nexport function parseDateDef(def, refs, overrideDateStrategy) {\n  const strategy = overrideDateStrategy ?? refs.dateStrategy;\n  if (Array.isArray(strategy)) {\n    return {\n      anyOf: strategy.map((item, i) => parseDateDef(def, refs, item))\n    };\n  }\n  switch (strategy) {\n    case \"string\":\n    case \"format:date-time\":\n      return {\n        type: \"string\",\n        format: \"date-time\"\n      };\n    case \"format:date\":\n      return {\n        type: \"string\",\n        format: \"date\"\n      };\n    case \"integer\":\n      return integerDateParser(def, refs);\n  }\n}\nconst integerDateParser = (def, refs) => {\n  const res = {\n    type: \"integer\",\n    format: \"unix-time\"\n  };\n  if (refs.target === \"openApi3\") {\n    return res;\n  }\n  for (const check of def.checks) {\n    switch (check.kind) {\n      case \"min\":\n        setResponseValueAndErrors(res, \"minimum\", check.value,\n        // This is in milliseconds\n        check.message, refs);\n        break;\n      case \"max\":\n        setResponseValueAndErrors(res, \"maximum\", check.value,\n        // This is in milliseconds\n        check.message, refs);\n        break;\n    }\n  }\n  return res;\n};","map":{"version":3,"names":["setResponseValueAndErrors","parseDateDef","def","refs","overrideDateStrategy","strategy","dateStrategy","Array","isArray","anyOf","map","item","i","type","format","integerDateParser","res","target","check","checks","kind","value","message"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/zod-to-json-schema/dist/esm/parsers/date.js"],"sourcesContent":["import { setResponseValueAndErrors } from \"../errorMessages.js\";\nexport function parseDateDef(def, refs, overrideDateStrategy) {\n    const strategy = overrideDateStrategy ?? refs.dateStrategy;\n    if (Array.isArray(strategy)) {\n        return {\n            anyOf: strategy.map((item, i) => parseDateDef(def, refs, item)),\n        };\n    }\n    switch (strategy) {\n        case \"string\":\n        case \"format:date-time\":\n            return {\n                type: \"string\",\n                format: \"date-time\",\n            };\n        case \"format:date\":\n            return {\n                type: \"string\",\n                format: \"date\",\n            };\n        case \"integer\":\n            return integerDateParser(def, refs);\n    }\n}\nconst integerDateParser = (def, refs) => {\n    const res = {\n        type: \"integer\",\n        format: \"unix-time\",\n    };\n    if (refs.target === \"openApi3\") {\n        return res;\n    }\n    for (const check of def.checks) {\n        switch (check.kind) {\n            case \"min\":\n                setResponseValueAndErrors(res, \"minimum\", check.value, // This is in milliseconds\n                check.message, refs);\n                break;\n            case \"max\":\n                setResponseValueAndErrors(res, \"maximum\", check.value, // This is in milliseconds\n                check.message, refs);\n                break;\n        }\n    }\n    return res;\n};\n"],"mappings":"AAAA,SAASA,yBAAyB,QAAQ,qBAAqB;AAC/D,OAAO,SAASC,YAAYA,CAACC,GAAG,EAAEC,IAAI,EAAEC,oBAAoB,EAAE;EAC1D,MAAMC,QAAQ,GAAGD,oBAAoB,IAAID,IAAI,CAACG,YAAY;EAC1D,IAAIC,KAAK,CAACC,OAAO,CAACH,QAAQ,CAAC,EAAE;IACzB,OAAO;MACHI,KAAK,EAAEJ,QAAQ,CAACK,GAAG,CAAC,CAACC,IAAI,EAAEC,CAAC,KAAKX,YAAY,CAACC,GAAG,EAAEC,IAAI,EAAEQ,IAAI,CAAC;IAClE,CAAC;EACL;EACA,QAAQN,QAAQ;IACZ,KAAK,QAAQ;IACb,KAAK,kBAAkB;MACnB,OAAO;QACHQ,IAAI,EAAE,QAAQ;QACdC,MAAM,EAAE;MACZ,CAAC;IACL,KAAK,aAAa;MACd,OAAO;QACHD,IAAI,EAAE,QAAQ;QACdC,MAAM,EAAE;MACZ,CAAC;IACL,KAAK,SAAS;MACV,OAAOC,iBAAiB,CAACb,GAAG,EAAEC,IAAI,CAAC;EAC3C;AACJ;AACA,MAAMY,iBAAiB,GAAGA,CAACb,GAAG,EAAEC,IAAI,KAAK;EACrC,MAAMa,GAAG,GAAG;IACRH,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE;EACZ,CAAC;EACD,IAAIX,IAAI,CAACc,MAAM,KAAK,UAAU,EAAE;IAC5B,OAAOD,GAAG;EACd;EACA,KAAK,MAAME,KAAK,IAAIhB,GAAG,CAACiB,MAAM,EAAE;IAC5B,QAAQD,KAAK,CAACE,IAAI;MACd,KAAK,KAAK;QACNpB,yBAAyB,CAACgB,GAAG,EAAE,SAAS,EAAEE,KAAK,CAACG,KAAK;QAAE;QACvDH,KAAK,CAACI,OAAO,EAAEnB,IAAI,CAAC;QACpB;MACJ,KAAK,KAAK;QACNH,yBAAyB,CAACgB,GAAG,EAAE,SAAS,EAAEE,KAAK,CAACG,KAAK;QAAE;QACvDH,KAAK,CAACI,OAAO,EAAEnB,IAAI,CAAC;QACpB;IACR;EACJ;EACA,OAAOa,GAAG;AACd,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}