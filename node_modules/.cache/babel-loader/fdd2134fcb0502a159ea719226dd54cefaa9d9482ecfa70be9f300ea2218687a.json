{"ast":null,"code":"var _jsxFileName = \"/Users/youngchen/Downloads/cs224g-triage/src/App.js\",\n  _s = $RefreshSig$();\n// import './App.css';\n// import { useState } from 'react';\n// import OpenAI from 'openai';\n\n// function App() {\n//   const client = new OpenAI({\n//     apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n//   });\n\n//   const [messages, setMessages] = useState([\n//     { role: 'assistant', content: \"Hello! I'm your medical assistant. I'll help assess your symptoms and direct you to the appropriate healthcare professional. Could you please describe what brings you in today?\" }\n//   ]);\n//   const [inputMessage, setInputMessage] = useState('');\n//   const [isDarkMode, setIsDarkMode] = useState(false);\n\n//   const handleSendMessage = async () => {\n//     if (inputMessage.trim() === '') return;\n\n//     setMessages([...messages, { role: 'user', content: inputMessage }]);\n//     setInputMessage('');\n\n//     try {\n//       const response = await client.chat.completions.create({\n//         model: \"gpt-4\",\n//         messages: [\n//           { role: \"system\", content: \"You are a medical assistant helping to triage patients based on their symptoms. You will be given a patient's symptoms and you will need to determine the appropriate care level, specifically, if it should be directed to the ER, a nurse, a physician, or a physician assistant.\" },\n//           ...messages,\n//           { role: \"user\", content: inputMessage }\n//         ]\n//       });\n\n//       const assistantMessage = response.choices[0].message.content;\n//       setMessages(prevMessages => [...prevMessages, { role: 'assistant', content: assistantMessage }]);\n//     } \n//     catch (error) {\n//       console.error('Error calling OpenAI API:', error);\n//       setMessages(prevMessages => [...prevMessages, { \n//         role: 'assistant', \n//         content: \"I'm sorry, I encountered an error. Please try again.\" \n//       }]);\n//     }\n//   };\n\n//   return (\n//     <div className={`App ${isDarkMode ? 'dark-mode' : 'light-mode'}`}>\n//       <div className=\"chat-container\">\n//         <header className=\"chat-header\">\n//           <h1>Triage</h1>\n//           <button \n//             className=\"theme-toggle\"\n//             onClick={() => setIsDarkMode(!isDarkMode)}\n//           >\n//             {isDarkMode ? '☀️' : '🌙'}\n//           </button>\n//         </header>\n\n//         <div className=\"messages-container\">\n//           {messages.map((message, index) => (\n//             <div key={index} className={`message ${message.role}`}>\n//               {message.content}\n//             </div>\n//           ))}\n//         </div>\n\n//         <div className=\"input-container\">\n//           <input\n//             type=\"text\"\n//             value={inputMessage}\n//             onChange={(e) => setInputMessage(e.target.value)}\n//             placeholder=\"Describe your symptoms...\"\n//             onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n//           />\n//           <button onClick={handleSendMessage}>Send</button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport './App.css';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([{\n    role: 'assistant',\n    content: \"Hello! I'm your medical assistant. I'll help assess your symptoms and direct you to the appropriate healthcare professional. Could you please describe what brings you in today?\"\n  }]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const handleSendMessage = () => {\n    if (inputMessage.trim() === '') return;\n    setMessages([...messages, {\n      role: 'user',\n      content: inputMessage\n    }]);\n    setInputMessage('');\n    // Here you would typically make an API call to your LLM service\n    // and handle the response in a proper way\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `App ${isDarkMode ? 'dark-mode' : 'light-mode'}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Triage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"theme-toggle\",\n          onClick: () => setIsDarkMode(!isDarkMode),\n          children: isDarkMode ? '☀️' : '🌙'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages-container\",\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.role}`,\n          children: message.content\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputMessage,\n          onChange: e => setInputMessage(e.target.value),\n          placeholder: \"Describe your symptoms...\",\n          onKeyPress: e => e.key === 'Enter' && handleSendMessage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"0gNBukv0AEyFyTB+2ApMFOFwnmQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","App","_s","messages","setMessages","role","content","inputMessage","setInputMessage","isDarkMode","setIsDarkMode","handleSendMessage","trim","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","message","index","type","value","onChange","e","target","placeholder","onKeyPress","key","_c","$RefreshReg$"],"sources":["/Users/youngchen/Downloads/cs224g-triage/src/App.js"],"sourcesContent":["// import './App.css';\n// import { useState } from 'react';\n// import OpenAI from 'openai';\n\n// function App() {\n//   const client = new OpenAI({\n//     apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n//   });\n\n//   const [messages, setMessages] = useState([\n//     { role: 'assistant', content: \"Hello! I'm your medical assistant. I'll help assess your symptoms and direct you to the appropriate healthcare professional. Could you please describe what brings you in today?\" }\n//   ]);\n//   const [inputMessage, setInputMessage] = useState('');\n//   const [isDarkMode, setIsDarkMode] = useState(false);\n\n//   const handleSendMessage = async () => {\n//     if (inputMessage.trim() === '') return;\n    \n//     setMessages([...messages, { role: 'user', content: inputMessage }]);\n//     setInputMessage('');\n\n//     try {\n//       const response = await client.chat.completions.create({\n//         model: \"gpt-4\",\n//         messages: [\n//           { role: \"system\", content: \"You are a medical assistant helping to triage patients based on their symptoms. You will be given a patient's symptoms and you will need to determine the appropriate care level, specifically, if it should be directed to the ER, a nurse, a physician, or a physician assistant.\" },\n//           ...messages,\n//           { role: \"user\", content: inputMessage }\n//         ]\n//       });\n\n//       const assistantMessage = response.choices[0].message.content;\n//       setMessages(prevMessages => [...prevMessages, { role: 'assistant', content: assistantMessage }]);\n//     } \n//     catch (error) {\n//       console.error('Error calling OpenAI API:', error);\n//       setMessages(prevMessages => [...prevMessages, { \n//         role: 'assistant', \n//         content: \"I'm sorry, I encountered an error. Please try again.\" \n//       }]);\n//     }\n//   };\n\n//   return (\n//     <div className={`App ${isDarkMode ? 'dark-mode' : 'light-mode'}`}>\n//       <div className=\"chat-container\">\n//         <header className=\"chat-header\">\n//           <h1>Triage</h1>\n//           <button \n//             className=\"theme-toggle\"\n//             onClick={() => setIsDarkMode(!isDarkMode)}\n//           >\n//             {isDarkMode ? '☀️' : '🌙'}\n//           </button>\n//         </header>\n        \n//         <div className=\"messages-container\">\n//           {messages.map((message, index) => (\n//             <div key={index} className={`message ${message.role}`}>\n//               {message.content}\n//             </div>\n//           ))}\n//         </div>\n\n//         <div className=\"input-container\">\n//           <input\n//             type=\"text\"\n//             value={inputMessage}\n//             onChange={(e) => setInputMessage(e.target.value)}\n//             placeholder=\"Describe your symptoms...\"\n//             onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n//           />\n//           <button onClick={handleSendMessage}>Send</button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport './App.css';\nimport { useState } from 'react';\n\nfunction App() {\n  const [messages, setMessages] = useState([\n    { role: 'assistant', content: \"Hello! I'm your medical assistant. I'll help assess your symptoms and direct you to the appropriate healthcare professional. Could you please describe what brings you in today?\" }\n  ]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  const handleSendMessage = () => {\n    if (inputMessage.trim() === '') return;\n    \n    setMessages([...messages, { role: 'user', content: inputMessage }]);\n    setInputMessage('');\n    // Here you would typically make an API call to your LLM service\n    // and handle the response in a proper way\n  };\n\n  return (\n    <div className={`App ${isDarkMode ? 'dark-mode' : 'light-mode'}`}>\n      <div className=\"chat-container\">\n        <header className=\"chat-header\">\n          <h1>Triage</h1>\n          <button \n            className=\"theme-toggle\"\n            onClick={() => setIsDarkMode(!isDarkMode)}\n          >\n            {isDarkMode ? '☀️' : '🌙'}\n          </button>\n        </header>\n        \n        <div className=\"messages-container\">\n          {messages.map((message, index) => (\n            <div key={index} className={`message ${message.role}`}>\n              {message.content}\n            </div>\n          ))}\n        </div>\n\n        <div className=\"input-container\">\n          <input\n            type=\"text\"\n            value={inputMessage}\n            onChange={(e) => setInputMessage(e.target.value)}\n            placeholder=\"Describe your symptoms...\"\n            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n          />\n          <button onClick={handleSendMessage}>Send</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}