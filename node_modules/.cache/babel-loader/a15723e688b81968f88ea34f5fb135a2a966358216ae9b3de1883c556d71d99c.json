{"ast":null,"code":"import { RunTree } from \"langsmith/run_trees\";\nimport { getCurrentRunTree } from \"langsmith/singletons/traceable\";\nimport { getEnvironmentVariable, getRuntimeEnvironment } from \"../utils/env.js\";\nimport { BaseTracer } from \"./base.js\";\nimport { getDefaultLangChainClientSingleton } from \"../singletons/tracer.js\";\nexport class LangChainTracer extends BaseTracer {\n  constructor(fields = {}) {\n    super(fields);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"langchain_tracer\"\n    });\n    Object.defineProperty(this, \"projectName\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"exampleId\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"client\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    const {\n      exampleId,\n      projectName,\n      client\n    } = fields;\n    this.projectName = projectName ?? getEnvironmentVariable(\"LANGCHAIN_PROJECT\") ?? getEnvironmentVariable(\"LANGCHAIN_SESSION\");\n    this.exampleId = exampleId;\n    this.client = client ?? getDefaultLangChainClientSingleton();\n    const traceableTree = LangChainTracer.getTraceableRunTree();\n    if (traceableTree) {\n      this.updateFromRunTree(traceableTree);\n    }\n  }\n  async _convertToCreate(run, example_id = undefined) {\n    return {\n      ...run,\n      extra: {\n        ...run.extra,\n        runtime: await getRuntimeEnvironment()\n      },\n      child_runs: undefined,\n      session_name: this.projectName,\n      reference_example_id: run.parent_run_id ? undefined : example_id\n    };\n  }\n  async persistRun(_run) {}\n  async onRunCreate(run) {\n    const persistedRun = await this._convertToCreate(run, this.exampleId);\n    await this.client.createRun(persistedRun);\n  }\n  async onRunUpdate(run) {\n    const runUpdate = {\n      end_time: run.end_time,\n      error: run.error,\n      outputs: run.outputs,\n      events: run.events,\n      inputs: run.inputs,\n      trace_id: run.trace_id,\n      dotted_order: run.dotted_order,\n      parent_run_id: run.parent_run_id,\n      extra: run.extra\n    };\n    await this.client.updateRun(run.id, runUpdate);\n  }\n  getRun(id) {\n    return this.runMap.get(id);\n  }\n  updateFromRunTree(runTree) {\n    let rootRun = runTree;\n    const visited = new Set();\n    while (rootRun.parent_run) {\n      if (visited.has(rootRun.id)) break;\n      visited.add(rootRun.id);\n      if (!rootRun.parent_run) break;\n      rootRun = rootRun.parent_run;\n    }\n    visited.clear();\n    const queue = [rootRun];\n    while (queue.length > 0) {\n      const current = queue.shift();\n      if (!current || visited.has(current.id)) continue;\n      visited.add(current.id);\n      // @ts-expect-error Types of property 'events' are incompatible.\n      this.runMap.set(current.id, current);\n      if (current.child_runs) {\n        queue.push(...current.child_runs);\n      }\n    }\n    this.client = runTree.client ?? this.client;\n    this.projectName = runTree.project_name ?? this.projectName;\n    this.exampleId = runTree.reference_example_id ?? this.exampleId;\n  }\n  convertToRunTree(id) {\n    const runTreeMap = {};\n    const runTreeList = [];\n    for (const [id, run] of this.runMap) {\n      // by converting the run map to a run tree, we are doing a copy\n      // thus, any mutation performed on the run tree will not be reflected\n      // back in the run map\n      // TODO: Stop using `this.runMap` in favour of LangSmith's `RunTree`\n      const runTree = new RunTree({\n        ...run,\n        child_runs: [],\n        parent_run: undefined,\n        // inherited properties\n        client: this.client,\n        project_name: this.projectName,\n        reference_example_id: this.exampleId,\n        tracingEnabled: true\n      });\n      runTreeMap[id] = runTree;\n      runTreeList.push([id, run.dotted_order]);\n    }\n    runTreeList.sort((a, b) => {\n      if (!a[1] || !b[1]) return 0;\n      return a[1].localeCompare(b[1]);\n    });\n    for (const [id] of runTreeList) {\n      const run = this.runMap.get(id);\n      const runTree = runTreeMap[id];\n      if (!run || !runTree) continue;\n      if (run.parent_run_id) {\n        const parentRunTree = runTreeMap[run.parent_run_id];\n        if (parentRunTree) {\n          parentRunTree.child_runs.push(runTree);\n          runTree.parent_run = parentRunTree;\n        }\n      }\n    }\n    return runTreeMap[id];\n  }\n  static getTraceableRunTree() {\n    try {\n      return getCurrentRunTree();\n    } catch {\n      return undefined;\n    }\n  }\n}","map":{"version":3,"names":["RunTree","getCurrentRunTree","getEnvironmentVariable","getRuntimeEnvironment","BaseTracer","getDefaultLangChainClientSingleton","LangChainTracer","constructor","fields","Object","defineProperty","enumerable","configurable","writable","value","exampleId","projectName","client","traceableTree","getTraceableRunTree","updateFromRunTree","_convertToCreate","run","example_id","undefined","extra","runtime","child_runs","session_name","reference_example_id","parent_run_id","persistRun","_run","onRunCreate","persistedRun","createRun","onRunUpdate","runUpdate","end_time","error","outputs","events","inputs","trace_id","dotted_order","updateRun","id","getRun","runMap","get","runTree","rootRun","visited","Set","parent_run","has","add","clear","queue","length","current","shift","set","push","project_name","convertToRunTree","runTreeMap","runTreeList","tracingEnabled","sort","a","b","localeCompare","parentRunTree"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/@langchain/core/dist/tracers/tracer_langchain.js"],"sourcesContent":["import { RunTree } from \"langsmith/run_trees\";\nimport { getCurrentRunTree } from \"langsmith/singletons/traceable\";\nimport { getEnvironmentVariable, getRuntimeEnvironment } from \"../utils/env.js\";\nimport { BaseTracer } from \"./base.js\";\nimport { getDefaultLangChainClientSingleton } from \"../singletons/tracer.js\";\nexport class LangChainTracer extends BaseTracer {\n    constructor(fields = {}) {\n        super(fields);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"langchain_tracer\"\n        });\n        Object.defineProperty(this, \"projectName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"exampleId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const { exampleId, projectName, client } = fields;\n        this.projectName =\n            projectName ??\n                getEnvironmentVariable(\"LANGCHAIN_PROJECT\") ??\n                getEnvironmentVariable(\"LANGCHAIN_SESSION\");\n        this.exampleId = exampleId;\n        this.client = client ?? getDefaultLangChainClientSingleton();\n        const traceableTree = LangChainTracer.getTraceableRunTree();\n        if (traceableTree) {\n            this.updateFromRunTree(traceableTree);\n        }\n    }\n    async _convertToCreate(run, example_id = undefined) {\n        return {\n            ...run,\n            extra: {\n                ...run.extra,\n                runtime: await getRuntimeEnvironment(),\n            },\n            child_runs: undefined,\n            session_name: this.projectName,\n            reference_example_id: run.parent_run_id ? undefined : example_id,\n        };\n    }\n    async persistRun(_run) { }\n    async onRunCreate(run) {\n        const persistedRun = await this._convertToCreate(run, this.exampleId);\n        await this.client.createRun(persistedRun);\n    }\n    async onRunUpdate(run) {\n        const runUpdate = {\n            end_time: run.end_time,\n            error: run.error,\n            outputs: run.outputs,\n            events: run.events,\n            inputs: run.inputs,\n            trace_id: run.trace_id,\n            dotted_order: run.dotted_order,\n            parent_run_id: run.parent_run_id,\n            extra: run.extra,\n        };\n        await this.client.updateRun(run.id, runUpdate);\n    }\n    getRun(id) {\n        return this.runMap.get(id);\n    }\n    updateFromRunTree(runTree) {\n        let rootRun = runTree;\n        const visited = new Set();\n        while (rootRun.parent_run) {\n            if (visited.has(rootRun.id))\n                break;\n            visited.add(rootRun.id);\n            if (!rootRun.parent_run)\n                break;\n            rootRun = rootRun.parent_run;\n        }\n        visited.clear();\n        const queue = [rootRun];\n        while (queue.length > 0) {\n            const current = queue.shift();\n            if (!current || visited.has(current.id))\n                continue;\n            visited.add(current.id);\n            // @ts-expect-error Types of property 'events' are incompatible.\n            this.runMap.set(current.id, current);\n            if (current.child_runs) {\n                queue.push(...current.child_runs);\n            }\n        }\n        this.client = runTree.client ?? this.client;\n        this.projectName = runTree.project_name ?? this.projectName;\n        this.exampleId = runTree.reference_example_id ?? this.exampleId;\n    }\n    convertToRunTree(id) {\n        const runTreeMap = {};\n        const runTreeList = [];\n        for (const [id, run] of this.runMap) {\n            // by converting the run map to a run tree, we are doing a copy\n            // thus, any mutation performed on the run tree will not be reflected\n            // back in the run map\n            // TODO: Stop using `this.runMap` in favour of LangSmith's `RunTree`\n            const runTree = new RunTree({\n                ...run,\n                child_runs: [],\n                parent_run: undefined,\n                // inherited properties\n                client: this.client,\n                project_name: this.projectName,\n                reference_example_id: this.exampleId,\n                tracingEnabled: true,\n            });\n            runTreeMap[id] = runTree;\n            runTreeList.push([id, run.dotted_order]);\n        }\n        runTreeList.sort((a, b) => {\n            if (!a[1] || !b[1])\n                return 0;\n            return a[1].localeCompare(b[1]);\n        });\n        for (const [id] of runTreeList) {\n            const run = this.runMap.get(id);\n            const runTree = runTreeMap[id];\n            if (!run || !runTree)\n                continue;\n            if (run.parent_run_id) {\n                const parentRunTree = runTreeMap[run.parent_run_id];\n                if (parentRunTree) {\n                    parentRunTree.child_runs.push(runTree);\n                    runTree.parent_run = parentRunTree;\n                }\n            }\n        }\n        return runTreeMap[id];\n    }\n    static getTraceableRunTree() {\n        try {\n            return getCurrentRunTree();\n        }\n        catch {\n            return undefined;\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}