{"ast":null,"code":"import { OpenAI as OpenAIClient } from \"openai\";\nimport { calculateMaxTokens } from \"@langchain/core/language_models/base\";\nimport { GenerationChunk } from \"@langchain/core/outputs\";\nimport { getEnvironmentVariable } from \"@langchain/core/utils/env\";\nimport { BaseLLM } from \"@langchain/core/language_models/llms\";\nimport { chunkArray } from \"@langchain/core/utils/chunk_array\";\nimport { getEndpoint } from \"./utils/azure.js\";\nimport { wrapOpenAIClientError } from \"./utils/openai.js\";\n/**\n * Wrapper around OpenAI large language models.\n *\n * To use you should have the `openai` package installed, with the\n * `OPENAI_API_KEY` environment variable set.\n *\n * To use with Azure, import the `AzureOpenAI` class.\n *\n * @remarks\n * Any parameters that are valid to be passed to {@link\n * https://platform.openai.com/docs/api-reference/completions/create |\n * `openai.createCompletion`} can be passed through {@link modelKwargs}, even\n * if not explicitly available on this class.\n * @example\n * ```typescript\n * const model = new OpenAI({\n *   modelName: \"gpt-4\",\n *   temperature: 0.7,\n *   maxTokens: 1000,\n *   maxRetries: 5,\n * });\n *\n * const res = await model.invoke(\n *   \"Question: What would be a good company name for a company that makes colorful socks?\\nAnswer:\"\n * );\n * console.log({ res });\n * ```\n */\nexport class OpenAI extends BaseLLM {\n  static lc_name() {\n    return \"OpenAI\";\n  }\n  get callKeys() {\n    return [...super.callKeys, \"options\"];\n  }\n  get lc_secrets() {\n    return {\n      openAIApiKey: \"OPENAI_API_KEY\",\n      apiKey: \"OPENAI_API_KEY\",\n      organization: \"OPENAI_ORGANIZATION\"\n    };\n  }\n  get lc_aliases() {\n    return {\n      modelName: \"model\",\n      openAIApiKey: \"openai_api_key\",\n      apiKey: \"openai_api_key\"\n    };\n  }\n  constructor(fields) {\n    super(fields ?? {});\n    Object.defineProperty(this, \"lc_serializable\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.defineProperty(this, \"temperature\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"maxTokens\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"topP\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"frequencyPenalty\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"presencePenalty\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"n\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(this, \"bestOf\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"logitBias\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"model\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"gpt-3.5-turbo-instruct\"\n    });\n    /** @deprecated Use \"model\" instead */\n    Object.defineProperty(this, \"modelName\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"modelKwargs\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"batchSize\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 20\n    });\n    Object.defineProperty(this, \"timeout\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"stop\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"stopSequences\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"user\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"streaming\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"openAIApiKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"apiKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"organization\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"client\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"clientConfig\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.openAIApiKey = fields?.apiKey ?? fields?.openAIApiKey ?? getEnvironmentVariable(\"OPENAI_API_KEY\");\n    this.apiKey = this.openAIApiKey;\n    this.organization = fields?.configuration?.organization ?? getEnvironmentVariable(\"OPENAI_ORGANIZATION\");\n    this.model = fields?.model ?? fields?.modelName ?? this.model;\n    if ((this.model?.startsWith(\"gpt-3.5-turbo\") || this.model?.startsWith(\"gpt-4\") || this.model?.startsWith(\"o1\")) && !this.model?.includes(\"-instruct\")) {\n      throw new Error([`Your chosen OpenAI model, \"${this.model}\", is a chat model and not a text-in/text-out LLM.`, `Passing it into the \"OpenAI\" class is no longer supported.`, `Please use the \"ChatOpenAI\" class instead.`, \"\", `See this page for more information:`, \"|\", `â””> https://js.langchain.com/docs/integrations/chat/openai`].join(\"\\n\"));\n    }\n    this.modelName = this.model;\n    this.modelKwargs = fields?.modelKwargs ?? {};\n    this.batchSize = fields?.batchSize ?? this.batchSize;\n    this.timeout = fields?.timeout;\n    this.temperature = fields?.temperature ?? this.temperature;\n    this.maxTokens = fields?.maxTokens ?? this.maxTokens;\n    this.topP = fields?.topP ?? this.topP;\n    this.frequencyPenalty = fields?.frequencyPenalty ?? this.frequencyPenalty;\n    this.presencePenalty = fields?.presencePenalty ?? this.presencePenalty;\n    this.n = fields?.n ?? this.n;\n    this.bestOf = fields?.bestOf ?? this.bestOf;\n    this.logitBias = fields?.logitBias;\n    this.stop = fields?.stopSequences ?? fields?.stop;\n    this.stopSequences = fields?.stopSequences;\n    this.user = fields?.user;\n    this.streaming = fields?.streaming ?? false;\n    if (this.streaming && this.bestOf && this.bestOf > 1) {\n      throw new Error(\"Cannot stream results when bestOf > 1\");\n    }\n    this.clientConfig = {\n      apiKey: this.apiKey,\n      organization: this.organization,\n      dangerouslyAllowBrowser: true,\n      ...fields?.configuration\n    };\n  }\n  /**\n   * Get the parameters used to invoke the model\n   */\n  invocationParams(options) {\n    return {\n      model: this.model,\n      temperature: this.temperature,\n      max_tokens: this.maxTokens,\n      top_p: this.topP,\n      frequency_penalty: this.frequencyPenalty,\n      presence_penalty: this.presencePenalty,\n      n: this.n,\n      best_of: this.bestOf,\n      logit_bias: this.logitBias,\n      stop: options?.stop ?? this.stopSequences,\n      user: this.user,\n      stream: this.streaming,\n      ...this.modelKwargs\n    };\n  }\n  /** @ignore */\n  _identifyingParams() {\n    return {\n      model_name: this.model,\n      ...this.invocationParams(),\n      ...this.clientConfig\n    };\n  }\n  /**\n   * Get the identifying parameters for the model\n   */\n  identifyingParams() {\n    return this._identifyingParams();\n  }\n  /**\n   * Call out to OpenAI's endpoint with k unique prompts\n   *\n   * @param [prompts] - The prompts to pass into the model.\n   * @param [options] - Optional list of stop words to use when generating.\n   * @param [runManager] - Optional callback manager to use when generating.\n   *\n   * @returns The full LLM output.\n   *\n   * @example\n   * ```ts\n   * import { OpenAI } from \"langchain/llms/openai\";\n   * const openai = new OpenAI();\n   * const response = await openai.generate([\"Tell me a joke.\"]);\n   * ```\n   */\n  async _generate(prompts, options, runManager) {\n    const subPrompts = chunkArray(prompts, this.batchSize);\n    const choices = [];\n    const tokenUsage = {};\n    const params = this.invocationParams(options);\n    if (params.max_tokens === -1) {\n      if (prompts.length !== 1) {\n        throw new Error(\"max_tokens set to -1 not supported for multiple inputs\");\n      }\n      params.max_tokens = await calculateMaxTokens({\n        prompt: prompts[0],\n        // Cast here to allow for other models that may not fit the union\n        modelName: this.model\n      });\n    }\n    for (let i = 0; i < subPrompts.length; i += 1) {\n      const data = params.stream ? await (async () => {\n        const choices = [];\n        let response;\n        const stream = await this.completionWithRetry({\n          ...params,\n          stream: true,\n          prompt: subPrompts[i]\n        }, options);\n        for await (const message of stream) {\n          // on the first message set the response properties\n          if (!response) {\n            response = {\n              id: message.id,\n              object: message.object,\n              created: message.created,\n              model: message.model\n            };\n          }\n          // on all messages, update choice\n          for (const part of message.choices) {\n            if (!choices[part.index]) {\n              choices[part.index] = part;\n            } else {\n              const choice = choices[part.index];\n              choice.text += part.text;\n              choice.finish_reason = part.finish_reason;\n              choice.logprobs = part.logprobs;\n            }\n            void runManager?.handleLLMNewToken(part.text, {\n              prompt: Math.floor(part.index / this.n),\n              completion: part.index % this.n\n            });\n          }\n        }\n        if (options.signal?.aborted) {\n          throw new Error(\"AbortError\");\n        }\n        return {\n          ...response,\n          choices\n        };\n      })() : await this.completionWithRetry({\n        ...params,\n        stream: false,\n        prompt: subPrompts[i]\n      }, {\n        signal: options.signal,\n        ...options.options\n      });\n      choices.push(...data.choices);\n      const {\n        completion_tokens: completionTokens,\n        prompt_tokens: promptTokens,\n        total_tokens: totalTokens\n      } = data.usage ? data.usage : {\n        completion_tokens: undefined,\n        prompt_tokens: undefined,\n        total_tokens: undefined\n      };\n      if (completionTokens) {\n        tokenUsage.completionTokens = (tokenUsage.completionTokens ?? 0) + completionTokens;\n      }\n      if (promptTokens) {\n        tokenUsage.promptTokens = (tokenUsage.promptTokens ?? 0) + promptTokens;\n      }\n      if (totalTokens) {\n        tokenUsage.totalTokens = (tokenUsage.totalTokens ?? 0) + totalTokens;\n      }\n    }\n    const generations = chunkArray(choices, this.n).map(promptChoices => promptChoices.map(choice => ({\n      text: choice.text ?? \"\",\n      generationInfo: {\n        finishReason: choice.finish_reason,\n        logprobs: choice.logprobs\n      }\n    })));\n    return {\n      generations,\n      llmOutput: {\n        tokenUsage\n      }\n    };\n  }\n  // TODO(jacoblee): Refactor with _generate(..., {stream: true}) implementation?\n  async *_streamResponseChunks(input, options, runManager) {\n    const params = {\n      ...this.invocationParams(options),\n      prompt: input,\n      stream: true\n    };\n    const stream = await this.completionWithRetry(params, options);\n    for await (const data of stream) {\n      const choice = data?.choices[0];\n      if (!choice) {\n        continue;\n      }\n      const chunk = new GenerationChunk({\n        text: choice.text,\n        generationInfo: {\n          finishReason: choice.finish_reason\n        }\n      });\n      yield chunk;\n      // eslint-disable-next-line no-void\n      void runManager?.handleLLMNewToken(chunk.text ?? \"\");\n    }\n    if (options.signal?.aborted) {\n      throw new Error(\"AbortError\");\n    }\n  }\n  async completionWithRetry(request, options) {\n    const requestOptions = this._getClientOptions(options);\n    return this.caller.call(async () => {\n      try {\n        const res = await this.client.completions.create(request, requestOptions);\n        return res;\n      } catch (e) {\n        const error = wrapOpenAIClientError(e);\n        throw error;\n      }\n    });\n  }\n  /**\n   * Calls the OpenAI API with retry logic in case of failures.\n   * @param request The request to send to the OpenAI API.\n   * @param options Optional configuration for the API call.\n   * @returns The response from the OpenAI API.\n   */\n  _getClientOptions(options) {\n    if (!this.client) {\n      const openAIEndpointConfig = {\n        baseURL: this.clientConfig.baseURL\n      };\n      const endpoint = getEndpoint(openAIEndpointConfig);\n      const params = {\n        ...this.clientConfig,\n        baseURL: endpoint,\n        timeout: this.timeout,\n        maxRetries: 0\n      };\n      if (!params.baseURL) {\n        delete params.baseURL;\n      }\n      this.client = new OpenAIClient(params);\n    }\n    const requestOptions = {\n      ...this.clientConfig,\n      ...options\n    };\n    return requestOptions;\n  }\n  _llmType() {\n    return \"openai\";\n  }\n}","map":{"version":3,"names":["OpenAI","OpenAIClient","calculateMaxTokens","GenerationChunk","getEnvironmentVariable","BaseLLM","chunkArray","getEndpoint","wrapOpenAIClientError","lc_name","callKeys","lc_secrets","openAIApiKey","apiKey","organization","lc_aliases","modelName","constructor","fields","Object","defineProperty","enumerable","configurable","writable","value","configuration","model","startsWith","includes","Error","join","modelKwargs","batchSize","timeout","temperature","maxTokens","topP","frequencyPenalty","presencePenalty","n","bestOf","logitBias","stop","stopSequences","user","streaming","clientConfig","dangerouslyAllowBrowser","invocationParams","options","max_tokens","top_p","frequency_penalty","presence_penalty","best_of","logit_bias","stream","_identifyingParams","model_name","identifyingParams","_generate","prompts","runManager","subPrompts","choices","tokenUsage","params","length","prompt","i","data","response","completionWithRetry","message","id","object","created","part","index","choice","text","finish_reason","logprobs","handleLLMNewToken","Math","floor","completion","signal","aborted","push","completion_tokens","completionTokens","prompt_tokens","promptTokens","total_tokens","totalTokens","usage","undefined","generations","map","promptChoices","generationInfo","finishReason","llmOutput","_streamResponseChunks","input","chunk","request","requestOptions","_getClientOptions","caller","call","res","client","completions","create","e","error","openAIEndpointConfig","baseURL","endpoint","maxRetries","_llmType"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/@langchain/openai/dist/llms.js"],"sourcesContent":["import { OpenAI as OpenAIClient } from \"openai\";\nimport { calculateMaxTokens } from \"@langchain/core/language_models/base\";\nimport { GenerationChunk } from \"@langchain/core/outputs\";\nimport { getEnvironmentVariable } from \"@langchain/core/utils/env\";\nimport { BaseLLM, } from \"@langchain/core/language_models/llms\";\nimport { chunkArray } from \"@langchain/core/utils/chunk_array\";\nimport { getEndpoint } from \"./utils/azure.js\";\nimport { wrapOpenAIClientError } from \"./utils/openai.js\";\n/**\n * Wrapper around OpenAI large language models.\n *\n * To use you should have the `openai` package installed, with the\n * `OPENAI_API_KEY` environment variable set.\n *\n * To use with Azure, import the `AzureOpenAI` class.\n *\n * @remarks\n * Any parameters that are valid to be passed to {@link\n * https://platform.openai.com/docs/api-reference/completions/create |\n * `openai.createCompletion`} can be passed through {@link modelKwargs}, even\n * if not explicitly available on this class.\n * @example\n * ```typescript\n * const model = new OpenAI({\n *   modelName: \"gpt-4\",\n *   temperature: 0.7,\n *   maxTokens: 1000,\n *   maxRetries: 5,\n * });\n *\n * const res = await model.invoke(\n *   \"Question: What would be a good company name for a company that makes colorful socks?\\nAnswer:\"\n * );\n * console.log({ res });\n * ```\n */\nexport class OpenAI extends BaseLLM {\n    static lc_name() {\n        return \"OpenAI\";\n    }\n    get callKeys() {\n        return [...super.callKeys, \"options\"];\n    }\n    get lc_secrets() {\n        return {\n            openAIApiKey: \"OPENAI_API_KEY\",\n            apiKey: \"OPENAI_API_KEY\",\n            organization: \"OPENAI_ORGANIZATION\",\n        };\n    }\n    get lc_aliases() {\n        return {\n            modelName: \"model\",\n            openAIApiKey: \"openai_api_key\",\n            apiKey: \"openai_api_key\",\n        };\n    }\n    constructor(fields) {\n        super(fields ?? {});\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"temperature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"topP\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"frequencyPenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"presencePenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"n\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"bestOf\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"logitBias\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"gpt-3.5-turbo-instruct\"\n        });\n        /** @deprecated Use \"model\" instead */\n        Object.defineProperty(this, \"modelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"modelKwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"batchSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 20\n        });\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"stop\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"stopSequences\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"user\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"openAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"apiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"organization\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"clientConfig\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.openAIApiKey =\n            fields?.apiKey ??\n                fields?.openAIApiKey ??\n                getEnvironmentVariable(\"OPENAI_API_KEY\");\n        this.apiKey = this.openAIApiKey;\n        this.organization =\n            fields?.configuration?.organization ??\n                getEnvironmentVariable(\"OPENAI_ORGANIZATION\");\n        this.model = fields?.model ?? fields?.modelName ?? this.model;\n        if ((this.model?.startsWith(\"gpt-3.5-turbo\") ||\n            this.model?.startsWith(\"gpt-4\") ||\n            this.model?.startsWith(\"o1\")) &&\n            !this.model?.includes(\"-instruct\")) {\n            throw new Error([\n                `Your chosen OpenAI model, \"${this.model}\", is a chat model and not a text-in/text-out LLM.`,\n                `Passing it into the \"OpenAI\" class is no longer supported.`,\n                `Please use the \"ChatOpenAI\" class instead.`,\n                \"\",\n                `See this page for more information:`,\n                \"|\",\n                `â””> https://js.langchain.com/docs/integrations/chat/openai`,\n            ].join(\"\\n\"));\n        }\n        this.modelName = this.model;\n        this.modelKwargs = fields?.modelKwargs ?? {};\n        this.batchSize = fields?.batchSize ?? this.batchSize;\n        this.timeout = fields?.timeout;\n        this.temperature = fields?.temperature ?? this.temperature;\n        this.maxTokens = fields?.maxTokens ?? this.maxTokens;\n        this.topP = fields?.topP ?? this.topP;\n        this.frequencyPenalty = fields?.frequencyPenalty ?? this.frequencyPenalty;\n        this.presencePenalty = fields?.presencePenalty ?? this.presencePenalty;\n        this.n = fields?.n ?? this.n;\n        this.bestOf = fields?.bestOf ?? this.bestOf;\n        this.logitBias = fields?.logitBias;\n        this.stop = fields?.stopSequences ?? fields?.stop;\n        this.stopSequences = fields?.stopSequences;\n        this.user = fields?.user;\n        this.streaming = fields?.streaming ?? false;\n        if (this.streaming && this.bestOf && this.bestOf > 1) {\n            throw new Error(\"Cannot stream results when bestOf > 1\");\n        }\n        this.clientConfig = {\n            apiKey: this.apiKey,\n            organization: this.organization,\n            dangerouslyAllowBrowser: true,\n            ...fields?.configuration,\n        };\n    }\n    /**\n     * Get the parameters used to invoke the model\n     */\n    invocationParams(options) {\n        return {\n            model: this.model,\n            temperature: this.temperature,\n            max_tokens: this.maxTokens,\n            top_p: this.topP,\n            frequency_penalty: this.frequencyPenalty,\n            presence_penalty: this.presencePenalty,\n            n: this.n,\n            best_of: this.bestOf,\n            logit_bias: this.logitBias,\n            stop: options?.stop ?? this.stopSequences,\n            user: this.user,\n            stream: this.streaming,\n            ...this.modelKwargs,\n        };\n    }\n    /** @ignore */\n    _identifyingParams() {\n        return {\n            model_name: this.model,\n            ...this.invocationParams(),\n            ...this.clientConfig,\n        };\n    }\n    /**\n     * Get the identifying parameters for the model\n     */\n    identifyingParams() {\n        return this._identifyingParams();\n    }\n    /**\n     * Call out to OpenAI's endpoint with k unique prompts\n     *\n     * @param [prompts] - The prompts to pass into the model.\n     * @param [options] - Optional list of stop words to use when generating.\n     * @param [runManager] - Optional callback manager to use when generating.\n     *\n     * @returns The full LLM output.\n     *\n     * @example\n     * ```ts\n     * import { OpenAI } from \"langchain/llms/openai\";\n     * const openai = new OpenAI();\n     * const response = await openai.generate([\"Tell me a joke.\"]);\n     * ```\n     */\n    async _generate(prompts, options, runManager) {\n        const subPrompts = chunkArray(prompts, this.batchSize);\n        const choices = [];\n        const tokenUsage = {};\n        const params = this.invocationParams(options);\n        if (params.max_tokens === -1) {\n            if (prompts.length !== 1) {\n                throw new Error(\"max_tokens set to -1 not supported for multiple inputs\");\n            }\n            params.max_tokens = await calculateMaxTokens({\n                prompt: prompts[0],\n                // Cast here to allow for other models that may not fit the union\n                modelName: this.model,\n            });\n        }\n        for (let i = 0; i < subPrompts.length; i += 1) {\n            const data = params.stream\n                ? await (async () => {\n                    const choices = [];\n                    let response;\n                    const stream = await this.completionWithRetry({\n                        ...params,\n                        stream: true,\n                        prompt: subPrompts[i],\n                    }, options);\n                    for await (const message of stream) {\n                        // on the first message set the response properties\n                        if (!response) {\n                            response = {\n                                id: message.id,\n                                object: message.object,\n                                created: message.created,\n                                model: message.model,\n                            };\n                        }\n                        // on all messages, update choice\n                        for (const part of message.choices) {\n                            if (!choices[part.index]) {\n                                choices[part.index] = part;\n                            }\n                            else {\n                                const choice = choices[part.index];\n                                choice.text += part.text;\n                                choice.finish_reason = part.finish_reason;\n                                choice.logprobs = part.logprobs;\n                            }\n                            void runManager?.handleLLMNewToken(part.text, {\n                                prompt: Math.floor(part.index / this.n),\n                                completion: part.index % this.n,\n                            });\n                        }\n                    }\n                    if (options.signal?.aborted) {\n                        throw new Error(\"AbortError\");\n                    }\n                    return { ...response, choices };\n                })()\n                : await this.completionWithRetry({\n                    ...params,\n                    stream: false,\n                    prompt: subPrompts[i],\n                }, {\n                    signal: options.signal,\n                    ...options.options,\n                });\n            choices.push(...data.choices);\n            const { completion_tokens: completionTokens, prompt_tokens: promptTokens, total_tokens: totalTokens, } = data.usage\n                ? data.usage\n                : {\n                    completion_tokens: undefined,\n                    prompt_tokens: undefined,\n                    total_tokens: undefined,\n                };\n            if (completionTokens) {\n                tokenUsage.completionTokens =\n                    (tokenUsage.completionTokens ?? 0) + completionTokens;\n            }\n            if (promptTokens) {\n                tokenUsage.promptTokens = (tokenUsage.promptTokens ?? 0) + promptTokens;\n            }\n            if (totalTokens) {\n                tokenUsage.totalTokens = (tokenUsage.totalTokens ?? 0) + totalTokens;\n            }\n        }\n        const generations = chunkArray(choices, this.n).map((promptChoices) => promptChoices.map((choice) => ({\n            text: choice.text ?? \"\",\n            generationInfo: {\n                finishReason: choice.finish_reason,\n                logprobs: choice.logprobs,\n            },\n        })));\n        return {\n            generations,\n            llmOutput: { tokenUsage },\n        };\n    }\n    // TODO(jacoblee): Refactor with _generate(..., {stream: true}) implementation?\n    async *_streamResponseChunks(input, options, runManager) {\n        const params = {\n            ...this.invocationParams(options),\n            prompt: input,\n            stream: true,\n        };\n        const stream = await this.completionWithRetry(params, options);\n        for await (const data of stream) {\n            const choice = data?.choices[0];\n            if (!choice) {\n                continue;\n            }\n            const chunk = new GenerationChunk({\n                text: choice.text,\n                generationInfo: {\n                    finishReason: choice.finish_reason,\n                },\n            });\n            yield chunk;\n            // eslint-disable-next-line no-void\n            void runManager?.handleLLMNewToken(chunk.text ?? \"\");\n        }\n        if (options.signal?.aborted) {\n            throw new Error(\"AbortError\");\n        }\n    }\n    async completionWithRetry(request, options) {\n        const requestOptions = this._getClientOptions(options);\n        return this.caller.call(async () => {\n            try {\n                const res = await this.client.completions.create(request, requestOptions);\n                return res;\n            }\n            catch (e) {\n                const error = wrapOpenAIClientError(e);\n                throw error;\n            }\n        });\n    }\n    /**\n     * Calls the OpenAI API with retry logic in case of failures.\n     * @param request The request to send to the OpenAI API.\n     * @param options Optional configuration for the API call.\n     * @returns The response from the OpenAI API.\n     */\n    _getClientOptions(options) {\n        if (!this.client) {\n            const openAIEndpointConfig = {\n                baseURL: this.clientConfig.baseURL,\n            };\n            const endpoint = getEndpoint(openAIEndpointConfig);\n            const params = {\n                ...this.clientConfig,\n                baseURL: endpoint,\n                timeout: this.timeout,\n                maxRetries: 0,\n            };\n            if (!params.baseURL) {\n                delete params.baseURL;\n            }\n            this.client = new OpenAIClient(params);\n        }\n        const requestOptions = {\n            ...this.clientConfig,\n            ...options,\n        };\n        return requestOptions;\n    }\n    _llmType() {\n        return \"openai\";\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}