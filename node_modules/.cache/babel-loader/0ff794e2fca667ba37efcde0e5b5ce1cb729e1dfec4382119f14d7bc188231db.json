{"ast":null,"code":"// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function zipEntries(...arrays) {\n  // Check for empty input\n  if (arrays.length === 0) {\n    return [];\n  }\n  // Find the length of the first input array\n  const firstArrayLength = arrays[0].length;\n  // Ensure all input arrays have the same length\n  for (const array of arrays) {\n    if (array.length !== firstArrayLength) {\n      throw new Error(\"All input arrays must have the same length.\");\n    }\n  }\n  // Create an empty array to store the zipped arrays\n  const zipped = [];\n  // Iterate through each element of the first input array\n  for (let i = 0; i < firstArrayLength; i += 1) {\n    // Create an array to store the zipped elements at the current index\n    const zippedElement = [];\n    // Iterate through each input array\n    for (const array of arrays) {\n      // Add the element at the current index to the zipped element array\n      zippedElement.push(array[i]);\n    }\n    // Add the zipped element array to the zipped array\n    zipped.push(zippedElement);\n  }\n  return zipped;\n}","map":{"version":3,"names":["zipEntries","arrays","length","firstArrayLength","array","Error","zipped","i","zippedElement","push"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/langchain/dist/chains/router/utils.js"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function zipEntries(...arrays) {\n    // Check for empty input\n    if (arrays.length === 0) {\n        return [];\n    }\n    // Find the length of the first input array\n    const firstArrayLength = arrays[0].length;\n    // Ensure all input arrays have the same length\n    for (const array of arrays) {\n        if (array.length !== firstArrayLength) {\n            throw new Error(\"All input arrays must have the same length.\");\n        }\n    }\n    // Create an empty array to store the zipped arrays\n    const zipped = [];\n    // Iterate through each element of the first input array\n    for (let i = 0; i < firstArrayLength; i += 1) {\n        // Create an array to store the zipped elements at the current index\n        const zippedElement = [];\n        // Iterate through each input array\n        for (const array of arrays) {\n            // Add the element at the current index to the zipped element array\n            zippedElement.push(array[i]);\n        }\n        // Add the zipped element array to the zipped array\n        zipped.push(zippedElement);\n    }\n    return zipped;\n}\n"],"mappings":"AAAA;AACA,OAAO,SAASA,UAAUA,CAAC,GAAGC,MAAM,EAAE;EAClC;EACA,IAAIA,MAAM,CAACC,MAAM,KAAK,CAAC,EAAE;IACrB,OAAO,EAAE;EACb;EACA;EACA,MAAMC,gBAAgB,GAAGF,MAAM,CAAC,CAAC,CAAC,CAACC,MAAM;EACzC;EACA,KAAK,MAAME,KAAK,IAAIH,MAAM,EAAE;IACxB,IAAIG,KAAK,CAACF,MAAM,KAAKC,gBAAgB,EAAE;MACnC,MAAM,IAAIE,KAAK,CAAC,6CAA6C,CAAC;IAClE;EACJ;EACA;EACA,MAAMC,MAAM,GAAG,EAAE;EACjB;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,gBAAgB,EAAEI,CAAC,IAAI,CAAC,EAAE;IAC1C;IACA,MAAMC,aAAa,GAAG,EAAE;IACxB;IACA,KAAK,MAAMJ,KAAK,IAAIH,MAAM,EAAE;MACxB;MACAO,aAAa,CAACC,IAAI,CAACL,KAAK,CAACG,CAAC,CAAC,CAAC;IAChC;IACA;IACAD,MAAM,CAACG,IAAI,CAACD,aAAa,CAAC;EAC9B;EACA,OAAOF,MAAM;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}