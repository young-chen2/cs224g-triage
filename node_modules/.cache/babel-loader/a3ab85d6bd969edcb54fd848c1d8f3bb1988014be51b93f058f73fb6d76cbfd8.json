{"ast":null,"code":"export const ignoreOverride = Symbol('Let zodToJsonSchema decide on which parser to use');\nconst defaultOptions = {\n  name: undefined,\n  $refStrategy: 'root',\n  effectStrategy: 'input',\n  pipeStrategy: 'all',\n  dateStrategy: 'format:date-time',\n  mapStrategy: 'entries',\n  nullableStrategy: 'from-target',\n  removeAdditionalStrategy: 'passthrough',\n  definitionPath: 'definitions',\n  target: 'jsonSchema7',\n  strictUnions: false,\n  errorMessages: false,\n  markdownDescription: false,\n  patternStrategy: 'escape',\n  applyRegexFlags: false,\n  emailStrategy: 'format:email',\n  base64Strategy: 'contentEncoding:base64',\n  nameStrategy: 'ref'\n};\nexport const getDefaultOptions = options => {\n  // We need to add `definitions` here as we may mutate it\n  return typeof options === 'string' ? {\n    ...defaultOptions,\n    basePath: ['#'],\n    definitions: {},\n    name: options\n  } : {\n    ...defaultOptions,\n    basePath: ['#'],\n    definitions: {},\n    ...options\n  };\n};","map":{"version":3,"names":["ignoreOverride","Symbol","defaultOptions","name","undefined","$refStrategy","effectStrategy","pipeStrategy","dateStrategy","mapStrategy","nullableStrategy","removeAdditionalStrategy","definitionPath","target","strictUnions","errorMessages","markdownDescription","patternStrategy","applyRegexFlags","emailStrategy","base64Strategy","nameStrategy","getDefaultOptions","options","basePath","definitions"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/openai/src/_vendor/zod-to-json-schema/Options.ts"],"sourcesContent":["import { ZodSchema, ZodTypeDef } from 'zod';\nimport { Refs, Seen } from './Refs';\nimport { JsonSchema7Type } from './parseDef';\n\nexport type Targets = 'jsonSchema7' | 'jsonSchema2019-09' | 'openApi3';\n\nexport type DateStrategy = 'format:date-time' | 'format:date' | 'string' | 'integer';\n\nexport const ignoreOverride = Symbol('Let zodToJsonSchema decide on which parser to use');\n\nexport type Options<Target extends Targets = 'jsonSchema7'> = {\n  name: string | undefined;\n  $refStrategy: 'root' | 'relative' | 'none' | 'seen' | 'extract-to-root';\n  basePath: string[];\n  effectStrategy: 'input' | 'any';\n  pipeStrategy: 'input' | 'output' | 'all';\n  dateStrategy: DateStrategy | DateStrategy[];\n  mapStrategy: 'entries' | 'record';\n  removeAdditionalStrategy: 'passthrough' | 'strict';\n  nullableStrategy: 'from-target' | 'property';\n  target: Target;\n  strictUnions: boolean;\n  definitionPath: string;\n  definitions: Record<string, ZodSchema | ZodTypeDef>;\n  errorMessages: boolean;\n  markdownDescription: boolean;\n  patternStrategy: 'escape' | 'preserve';\n  applyRegexFlags: boolean;\n  emailStrategy: 'format:email' | 'format:idn-email' | 'pattern:zod';\n  base64Strategy: 'format:binary' | 'contentEncoding:base64' | 'pattern:zod';\n  nameStrategy: 'ref' | 'duplicate-ref' | 'title';\n  override?: (\n    def: ZodTypeDef,\n    refs: Refs,\n    seen: Seen | undefined,\n    forceResolution?: boolean,\n  ) => JsonSchema7Type | undefined | typeof ignoreOverride;\n  openaiStrictMode?: boolean;\n};\n\nconst defaultOptions: Omit<Options, 'definitions' | 'basePath'> = {\n  name: undefined,\n  $refStrategy: 'root',\n  effectStrategy: 'input',\n  pipeStrategy: 'all',\n  dateStrategy: 'format:date-time',\n  mapStrategy: 'entries',\n  nullableStrategy: 'from-target',\n  removeAdditionalStrategy: 'passthrough',\n  definitionPath: 'definitions',\n  target: 'jsonSchema7',\n  strictUnions: false,\n  errorMessages: false,\n  markdownDescription: false,\n  patternStrategy: 'escape',\n  applyRegexFlags: false,\n  emailStrategy: 'format:email',\n  base64Strategy: 'contentEncoding:base64',\n  nameStrategy: 'ref',\n};\n\nexport const getDefaultOptions = <Target extends Targets>(\n  options: Partial<Options<Target>> | string | undefined,\n) => {\n  // We need to add `definitions` here as we may mutate it\n  return (\n    typeof options === 'string' ?\n      {\n        ...defaultOptions,\n        basePath: ['#'],\n        definitions: {},\n        name: options,\n      }\n    : {\n        ...defaultOptions,\n        basePath: ['#'],\n        definitions: {},\n        ...options,\n      }) as Options<Target>;\n};\n"],"mappings":"AAQA,OAAO,MAAMA,cAAc,GAAGC,MAAM,CAAC,mDAAmD,CAAC;AAgCzF,MAAMC,cAAc,GAA8C;EAChEC,IAAI,EAAEC,SAAS;EACfC,YAAY,EAAE,MAAM;EACpBC,cAAc,EAAE,OAAO;EACvBC,YAAY,EAAE,KAAK;EACnBC,YAAY,EAAE,kBAAkB;EAChCC,WAAW,EAAE,SAAS;EACtBC,gBAAgB,EAAE,aAAa;EAC/BC,wBAAwB,EAAE,aAAa;EACvCC,cAAc,EAAE,aAAa;EAC7BC,MAAM,EAAE,aAAa;EACrBC,YAAY,EAAE,KAAK;EACnBC,aAAa,EAAE,KAAK;EACpBC,mBAAmB,EAAE,KAAK;EAC1BC,eAAe,EAAE,QAAQ;EACzBC,eAAe,EAAE,KAAK;EACtBC,aAAa,EAAE,cAAc;EAC7BC,cAAc,EAAE,wBAAwB;EACxCC,YAAY,EAAE;CACf;AAED,OAAO,MAAMC,iBAAiB,GAC5BC,OAAsD,IACpD;EACF;EACA,OACE,OAAOA,OAAO,KAAK,QAAQ,GACzB;IACE,GAAGrB,cAAc;IACjBsB,QAAQ,EAAE,CAAC,GAAG,CAAC;IACfC,WAAW,EAAE,EAAE;IACftB,IAAI,EAAEoB;GACP,GACD;IACE,GAAGrB,cAAc;IACjBsB,QAAQ,EAAE,CAAC,GAAG,CAAC;IACfC,WAAW,EAAE,EAAE;IACf,GAAGF;GACJ;AACP,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}