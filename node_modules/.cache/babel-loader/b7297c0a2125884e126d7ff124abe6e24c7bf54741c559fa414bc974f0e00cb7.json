{"ast":null,"code":"import { z } from \"zod\";\nimport { interpolateFString, PromptTemplate } from \"@langchain/core/prompts\";\nimport { MultiRouteChain } from \"./multi_route.js\";\nimport { LLMRouterChain } from \"./llm_router.js\";\nimport { ConversationChain, DEFAULT_TEMPLATE } from \"../../chains/conversation.js\";\nimport { STRUCTURED_MULTI_RETRIEVAL_ROUTER_TEMPLATE } from \"./multi_retrieval_prompt.js\";\nimport { zipEntries } from \"./utils.js\";\nimport { RetrievalQAChain } from \"../../chains/retrieval_qa.js\";\nimport { RouterOutputParser } from \"../../output_parsers/router.js\";\n/**\n * A class that represents a multi-retrieval question answering chain in\n * the LangChain framework. It extends the MultiRouteChain class and\n * provides additional functionality specific to multi-retrieval QA\n * chains.\n * @example\n * ```typescript\n * const multiRetrievalQAChain = MultiRetrievalQAChain.fromLLMAndRetrievers(\n *   new ChatOpenAI(),\n *   {\n *     retrieverNames: [\"aqua teen\", \"mst3k\", \"animaniacs\"],\n *     retrieverDescriptions: [\n *       \"Good for answering questions about Aqua Teen Hunger Force theme song\",\n *       \"Good for answering questions about Mystery Science Theater 3000 theme song\",\n *       \"Good for answering questions about Animaniacs theme song\",\n *     ],\n *     retrievers: [\n *       new MemoryVectorStore().asRetriever(3),\n *       new MemoryVectorStore().asRetriever(3),\n *       new MemoryVectorStore().asRetriever(3),\n *     ],\n *     retrievalQAChainOpts: {\n *       returnSourceDocuments: true,\n *     },\n *   },\n * );\n *\n * const result = await multiRetrievalQAChain.call({\n *   input:\n *     \"In the Aqua Teen Hunger Force theme song, who calls himself the mike rula?\",\n * });\n *\n * console.log(result.sourceDocuments, result.text);\n * ```\n */\nexport class MultiRetrievalQAChain extends MultiRouteChain {\n  get outputKeys() {\n    return [\"result\"];\n  }\n  /**\n   * @deprecated Use `fromRetrieversAndPrompts` instead\n   */\n  static fromRetrievers(llm, retrieverNames, retrieverDescriptions, retrievers, retrieverPrompts, defaults, options) {\n    return MultiRetrievalQAChain.fromLLMAndRetrievers(llm, {\n      retrieverNames,\n      retrieverDescriptions,\n      retrievers,\n      retrieverPrompts,\n      defaults,\n      multiRetrievalChainOpts: options\n    });\n  }\n  /**\n   * A static method that creates an instance of MultiRetrievalQAChain from\n   * a BaseLanguageModel and a set of retrievers. It takes in optional\n   * parameters for the retriever names, descriptions, prompts, defaults,\n   * and additional options. It is an alternative method to fromRetrievers\n   * and provides more flexibility in configuring the underlying chains.\n   * @param llm A BaseLanguageModel instance.\n   * @param retrieverNames An array of retriever names.\n   * @param retrieverDescriptions An array of retriever descriptions.\n   * @param retrievers An array of BaseRetrieverInterface instances.\n   * @param retrieverPrompts An optional array of PromptTemplate instances for the retrievers.\n   * @param defaults An optional MultiRetrievalDefaults instance.\n   * @param multiRetrievalChainOpts Additional optional parameters for the multi-retrieval chain.\n   * @param retrievalQAChainOpts Additional optional parameters for the retrieval QA chain.\n   * @returns A new instance of MultiRetrievalQAChain.\n   */\n  static fromLLMAndRetrievers(llm, {\n    retrieverNames,\n    retrieverDescriptions,\n    retrievers,\n    retrieverPrompts,\n    defaults,\n    multiRetrievalChainOpts,\n    retrievalQAChainOpts\n  }) {\n    const {\n      defaultRetriever,\n      defaultPrompt,\n      defaultChain\n    } = defaults ?? {};\n    if (defaultPrompt && !defaultRetriever) {\n      throw new Error(\"`default_retriever` must be specified if `default_prompt` is \\nprovided. Received only `default_prompt`.\");\n    }\n    const destinations = zipEntries(retrieverNames, retrieverDescriptions).map(([name, desc]) => `${name}: ${desc}`);\n    const structuredOutputParserSchema = z.object({\n      destination: z.string().optional().describe('name of the question answering system to use or \"DEFAULT\"'),\n      next_inputs: z.object({\n        query: z.string().describe(\"a potentially modified version of the original input\")\n      }).describe(\"input to be fed to the next model\")\n    });\n    const outputParser = new RouterOutputParser(structuredOutputParserSchema);\n    const destinationsStr = destinations.join(\"\\n\");\n    const routerTemplate = interpolateFString(STRUCTURED_MULTI_RETRIEVAL_ROUTER_TEMPLATE(outputParser.getFormatInstructions({\n      interpolationDepth: 4\n    })), {\n      destinations: destinationsStr\n    });\n    const routerPrompt = new PromptTemplate({\n      template: routerTemplate,\n      inputVariables: [\"input\"],\n      outputParser\n    });\n    const routerChain = LLMRouterChain.fromLLM(llm, routerPrompt);\n    const prompts = retrieverPrompts ?? retrievers.map(() => null);\n    const destinationChains = zipEntries(retrieverNames, retrievers, prompts).reduce((acc, [name, retriever, prompt]) => {\n      const opt = retrievalQAChainOpts ?? {};\n      if (prompt) {\n        opt.prompt = prompt;\n      }\n      acc[name] = RetrievalQAChain.fromLLM(llm, retriever, opt);\n      return acc;\n    }, {});\n    let _defaultChain;\n    if (defaultChain) {\n      _defaultChain = defaultChain;\n    } else if (defaultRetriever) {\n      _defaultChain = RetrievalQAChain.fromLLM(llm, defaultRetriever, {\n        ...retrievalQAChainOpts,\n        prompt: defaultPrompt\n      });\n    } else {\n      const promptTemplate = DEFAULT_TEMPLATE.replace(\"input\", \"query\");\n      const prompt = new PromptTemplate({\n        template: promptTemplate,\n        inputVariables: [\"history\", \"query\"]\n      });\n      _defaultChain = new ConversationChain({\n        llm,\n        prompt,\n        outputKey: \"result\"\n      });\n    }\n    return new MultiRetrievalQAChain({\n      ...multiRetrievalChainOpts,\n      routerChain,\n      destinationChains,\n      defaultChain: _defaultChain\n    });\n  }\n  _chainType() {\n    return \"multi_retrieval_qa_chain\";\n  }\n}","map":{"version":3,"names":["z","interpolateFString","PromptTemplate","MultiRouteChain","LLMRouterChain","ConversationChain","DEFAULT_TEMPLATE","STRUCTURED_MULTI_RETRIEVAL_ROUTER_TEMPLATE","zipEntries","RetrievalQAChain","RouterOutputParser","MultiRetrievalQAChain","outputKeys","fromRetrievers","llm","retrieverNames","retrieverDescriptions","retrievers","retrieverPrompts","defaults","options","fromLLMAndRetrievers","multiRetrievalChainOpts","retrievalQAChainOpts","defaultRetriever","defaultPrompt","defaultChain","Error","destinations","map","name","desc","structuredOutputParserSchema","object","destination","string","optional","describe","next_inputs","query","outputParser","destinationsStr","join","routerTemplate","getFormatInstructions","interpolationDepth","routerPrompt","template","inputVariables","routerChain","fromLLM","prompts","destinationChains","reduce","acc","retriever","prompt","opt","_defaultChain","promptTemplate","replace","outputKey","_chainType"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/langchain/dist/chains/router/multi_retrieval_qa.js"],"sourcesContent":["import { z } from \"zod\";\nimport { interpolateFString, PromptTemplate } from \"@langchain/core/prompts\";\nimport { MultiRouteChain } from \"./multi_route.js\";\nimport { LLMRouterChain } from \"./llm_router.js\";\nimport { ConversationChain, DEFAULT_TEMPLATE, } from \"../../chains/conversation.js\";\nimport { STRUCTURED_MULTI_RETRIEVAL_ROUTER_TEMPLATE } from \"./multi_retrieval_prompt.js\";\nimport { zipEntries } from \"./utils.js\";\nimport { RetrievalQAChain, } from \"../../chains/retrieval_qa.js\";\nimport { RouterOutputParser } from \"../../output_parsers/router.js\";\n/**\n * A class that represents a multi-retrieval question answering chain in\n * the LangChain framework. It extends the MultiRouteChain class and\n * provides additional functionality specific to multi-retrieval QA\n * chains.\n * @example\n * ```typescript\n * const multiRetrievalQAChain = MultiRetrievalQAChain.fromLLMAndRetrievers(\n *   new ChatOpenAI(),\n *   {\n *     retrieverNames: [\"aqua teen\", \"mst3k\", \"animaniacs\"],\n *     retrieverDescriptions: [\n *       \"Good for answering questions about Aqua Teen Hunger Force theme song\",\n *       \"Good for answering questions about Mystery Science Theater 3000 theme song\",\n *       \"Good for answering questions about Animaniacs theme song\",\n *     ],\n *     retrievers: [\n *       new MemoryVectorStore().asRetriever(3),\n *       new MemoryVectorStore().asRetriever(3),\n *       new MemoryVectorStore().asRetriever(3),\n *     ],\n *     retrievalQAChainOpts: {\n *       returnSourceDocuments: true,\n *     },\n *   },\n * );\n *\n * const result = await multiRetrievalQAChain.call({\n *   input:\n *     \"In the Aqua Teen Hunger Force theme song, who calls himself the mike rula?\",\n * });\n *\n * console.log(result.sourceDocuments, result.text);\n * ```\n */\nexport class MultiRetrievalQAChain extends MultiRouteChain {\n    get outputKeys() {\n        return [\"result\"];\n    }\n    /**\n     * @deprecated Use `fromRetrieversAndPrompts` instead\n     */\n    static fromRetrievers(llm, retrieverNames, retrieverDescriptions, retrievers, retrieverPrompts, defaults, options) {\n        return MultiRetrievalQAChain.fromLLMAndRetrievers(llm, {\n            retrieverNames,\n            retrieverDescriptions,\n            retrievers,\n            retrieverPrompts,\n            defaults,\n            multiRetrievalChainOpts: options,\n        });\n    }\n    /**\n     * A static method that creates an instance of MultiRetrievalQAChain from\n     * a BaseLanguageModel and a set of retrievers. It takes in optional\n     * parameters for the retriever names, descriptions, prompts, defaults,\n     * and additional options. It is an alternative method to fromRetrievers\n     * and provides more flexibility in configuring the underlying chains.\n     * @param llm A BaseLanguageModel instance.\n     * @param retrieverNames An array of retriever names.\n     * @param retrieverDescriptions An array of retriever descriptions.\n     * @param retrievers An array of BaseRetrieverInterface instances.\n     * @param retrieverPrompts An optional array of PromptTemplate instances for the retrievers.\n     * @param defaults An optional MultiRetrievalDefaults instance.\n     * @param multiRetrievalChainOpts Additional optional parameters for the multi-retrieval chain.\n     * @param retrievalQAChainOpts Additional optional parameters for the retrieval QA chain.\n     * @returns A new instance of MultiRetrievalQAChain.\n     */\n    static fromLLMAndRetrievers(llm, { retrieverNames, retrieverDescriptions, retrievers, retrieverPrompts, defaults, multiRetrievalChainOpts, retrievalQAChainOpts, }) {\n        const { defaultRetriever, defaultPrompt, defaultChain } = defaults ?? {};\n        if (defaultPrompt && !defaultRetriever) {\n            throw new Error(\"`default_retriever` must be specified if `default_prompt` is \\nprovided. Received only `default_prompt`.\");\n        }\n        const destinations = zipEntries(retrieverNames, retrieverDescriptions).map(([name, desc]) => `${name}: ${desc}`);\n        const structuredOutputParserSchema = z.object({\n            destination: z\n                .string()\n                .optional()\n                .describe('name of the question answering system to use or \"DEFAULT\"'),\n            next_inputs: z\n                .object({\n                query: z\n                    .string()\n                    .describe(\"a potentially modified version of the original input\"),\n            })\n                .describe(\"input to be fed to the next model\"),\n        });\n        const outputParser = new RouterOutputParser(structuredOutputParserSchema);\n        const destinationsStr = destinations.join(\"\\n\");\n        const routerTemplate = interpolateFString(STRUCTURED_MULTI_RETRIEVAL_ROUTER_TEMPLATE(outputParser.getFormatInstructions({ interpolationDepth: 4 })), {\n            destinations: destinationsStr,\n        });\n        const routerPrompt = new PromptTemplate({\n            template: routerTemplate,\n            inputVariables: [\"input\"],\n            outputParser,\n        });\n        const routerChain = LLMRouterChain.fromLLM(llm, routerPrompt);\n        const prompts = retrieverPrompts ?? retrievers.map(() => null);\n        const destinationChains = zipEntries(retrieverNames, retrievers, prompts).reduce((acc, [name, retriever, prompt]) => {\n            const opt = retrievalQAChainOpts ?? {};\n            if (prompt) {\n                opt.prompt = prompt;\n            }\n            acc[name] = RetrievalQAChain.fromLLM(llm, retriever, opt);\n            return acc;\n        }, {});\n        let _defaultChain;\n        if (defaultChain) {\n            _defaultChain = defaultChain;\n        }\n        else if (defaultRetriever) {\n            _defaultChain = RetrievalQAChain.fromLLM(llm, defaultRetriever, {\n                ...retrievalQAChainOpts,\n                prompt: defaultPrompt,\n            });\n        }\n        else {\n            const promptTemplate = DEFAULT_TEMPLATE.replace(\"input\", \"query\");\n            const prompt = new PromptTemplate({\n                template: promptTemplate,\n                inputVariables: [\"history\", \"query\"],\n            });\n            _defaultChain = new ConversationChain({\n                llm,\n                prompt,\n                outputKey: \"result\",\n            });\n        }\n        return new MultiRetrievalQAChain({\n            ...multiRetrievalChainOpts,\n            routerChain,\n            destinationChains,\n            defaultChain: _defaultChain,\n        });\n    }\n    _chainType() {\n        return \"multi_retrieval_qa_chain\";\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}