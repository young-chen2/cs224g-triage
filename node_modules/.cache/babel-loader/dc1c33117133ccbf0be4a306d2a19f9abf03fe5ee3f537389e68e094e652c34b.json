{"ast":null,"code":"import { getBufferString } from \"@langchain/core/messages\";\nimport { BaseChatMemory } from \"./chat_memory.js\";\n/**\n * The `BufferMemory` class is a type of memory component used for storing\n * and managing previous chat messages. It is a wrapper around\n * `ChatMessageHistory` that extracts the messages into an input variable.\n * This class is particularly useful in applications like chatbots where\n * it is essential to remember previous interactions. Note: The memory\n * instance represents the history of a single conversation. Therefore, it\n * is not recommended to share the same history or memory instance between\n * two different chains. If you deploy your LangChain app on a serverless\n * environment, do not store memory instances in a variable, as your\n * hosting provider may reset it by the next time the function is called.\n * @example\n * ```typescript\n * // Initialize the memory to store chat history and set up the language model with a specific temperature.\n * const memory = new BufferMemory({ memoryKey: \"chat_history\" });\n * const model = new ChatOpenAI({ temperature: 0.9 });\n *\n * // Create a prompt template for a friendly conversation between a human and an AI.\n * const prompt =\n *   PromptTemplate.fromTemplate(`The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n *\n * Current conversation:\n * {chat_history}\n * Human: {input}\n * AI:`);\n *\n * // Set up the chain with the language model, prompt, and memory.\n * const chain = new LLMChain({ llm: model, prompt, memory });\n *\n * // Example usage of the chain to continue the conversation.\n * // The `call` method sends the input to the model and returns the AI's response.\n * const res = await chain.call({ input: \"Hi! I'm Jim.\" });\n * console.log({ res });\n *\n * ```\n */\nexport class BufferMemory extends BaseChatMemory {\n  constructor(fields) {\n    super({\n      chatHistory: fields?.chatHistory,\n      returnMessages: fields?.returnMessages ?? false,\n      inputKey: fields?.inputKey,\n      outputKey: fields?.outputKey\n    });\n    Object.defineProperty(this, \"humanPrefix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"Human\"\n    });\n    Object.defineProperty(this, \"aiPrefix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"AI\"\n    });\n    Object.defineProperty(this, \"memoryKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"history\"\n    });\n    this.humanPrefix = fields?.humanPrefix ?? this.humanPrefix;\n    this.aiPrefix = fields?.aiPrefix ?? this.aiPrefix;\n    this.memoryKey = fields?.memoryKey ?? this.memoryKey;\n  }\n  get memoryKeys() {\n    return [this.memoryKey];\n  }\n  /**\n   * Loads the memory variables. It takes an `InputValues` object as a\n   * parameter and returns a `Promise` that resolves with a\n   * `MemoryVariables` object.\n   * @param _values `InputValues` object.\n   * @returns A `Promise` that resolves with a `MemoryVariables` object.\n   */\n  async loadMemoryVariables(_values) {\n    const messages = await this.chatHistory.getMessages();\n    if (this.returnMessages) {\n      const result = {\n        [this.memoryKey]: messages\n      };\n      return result;\n    }\n    const result = {\n      [this.memoryKey]: getBufferString(messages, this.humanPrefix, this.aiPrefix)\n    };\n    return result;\n  }\n}","map":{"version":3,"names":["getBufferString","BaseChatMemory","BufferMemory","constructor","fields","chatHistory","returnMessages","inputKey","outputKey","Object","defineProperty","enumerable","configurable","writable","value","humanPrefix","aiPrefix","memoryKey","memoryKeys","loadMemoryVariables","_values","messages","getMessages","result"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/langchain/dist/memory/buffer_memory.js"],"sourcesContent":["import { getBufferString } from \"@langchain/core/messages\";\nimport { BaseChatMemory } from \"./chat_memory.js\";\n/**\n * The `BufferMemory` class is a type of memory component used for storing\n * and managing previous chat messages. It is a wrapper around\n * `ChatMessageHistory` that extracts the messages into an input variable.\n * This class is particularly useful in applications like chatbots where\n * it is essential to remember previous interactions. Note: The memory\n * instance represents the history of a single conversation. Therefore, it\n * is not recommended to share the same history or memory instance between\n * two different chains. If you deploy your LangChain app on a serverless\n * environment, do not store memory instances in a variable, as your\n * hosting provider may reset it by the next time the function is called.\n * @example\n * ```typescript\n * // Initialize the memory to store chat history and set up the language model with a specific temperature.\n * const memory = new BufferMemory({ memoryKey: \"chat_history\" });\n * const model = new ChatOpenAI({ temperature: 0.9 });\n *\n * // Create a prompt template for a friendly conversation between a human and an AI.\n * const prompt =\n *   PromptTemplate.fromTemplate(`The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n *\n * Current conversation:\n * {chat_history}\n * Human: {input}\n * AI:`);\n *\n * // Set up the chain with the language model, prompt, and memory.\n * const chain = new LLMChain({ llm: model, prompt, memory });\n *\n * // Example usage of the chain to continue the conversation.\n * // The `call` method sends the input to the model and returns the AI's response.\n * const res = await chain.call({ input: \"Hi! I'm Jim.\" });\n * console.log({ res });\n *\n * ```\n */\nexport class BufferMemory extends BaseChatMemory {\n    constructor(fields) {\n        super({\n            chatHistory: fields?.chatHistory,\n            returnMessages: fields?.returnMessages ?? false,\n            inputKey: fields?.inputKey,\n            outputKey: fields?.outputKey,\n        });\n        Object.defineProperty(this, \"humanPrefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Human\"\n        });\n        Object.defineProperty(this, \"aiPrefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"AI\"\n        });\n        Object.defineProperty(this, \"memoryKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"history\"\n        });\n        this.humanPrefix = fields?.humanPrefix ?? this.humanPrefix;\n        this.aiPrefix = fields?.aiPrefix ?? this.aiPrefix;\n        this.memoryKey = fields?.memoryKey ?? this.memoryKey;\n    }\n    get memoryKeys() {\n        return [this.memoryKey];\n    }\n    /**\n     * Loads the memory variables. It takes an `InputValues` object as a\n     * parameter and returns a `Promise` that resolves with a\n     * `MemoryVariables` object.\n     * @param _values `InputValues` object.\n     * @returns A `Promise` that resolves with a `MemoryVariables` object.\n     */\n    async loadMemoryVariables(_values) {\n        const messages = await this.chatHistory.getMessages();\n        if (this.returnMessages) {\n            const result = {\n                [this.memoryKey]: messages,\n            };\n            return result;\n        }\n        const result = {\n            [this.memoryKey]: getBufferString(messages, this.humanPrefix, this.aiPrefix),\n        };\n        return result;\n    }\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,0BAA0B;AAC1D,SAASC,cAAc,QAAQ,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,SAASD,cAAc,CAAC;EAC7CE,WAAWA,CAACC,MAAM,EAAE;IAChB,KAAK,CAAC;MACFC,WAAW,EAAED,MAAM,EAAEC,WAAW;MAChCC,cAAc,EAAEF,MAAM,EAAEE,cAAc,IAAI,KAAK;MAC/CC,QAAQ,EAAEH,MAAM,EAAEG,QAAQ;MAC1BC,SAAS,EAAEJ,MAAM,EAAEI;IACvB,CAAC,CAAC;IACFC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,aAAa,EAAE;MACvCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE;IACX,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,UAAU,EAAE;MACpCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE;IACX,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,WAAW,EAAE;MACrCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE;IACX,CAAC,CAAC;IACF,IAAI,CAACC,WAAW,GAAGX,MAAM,EAAEW,WAAW,IAAI,IAAI,CAACA,WAAW;IAC1D,IAAI,CAACC,QAAQ,GAAGZ,MAAM,EAAEY,QAAQ,IAAI,IAAI,CAACA,QAAQ;IACjD,IAAI,CAACC,SAAS,GAAGb,MAAM,EAAEa,SAAS,IAAI,IAAI,CAACA,SAAS;EACxD;EACA,IAAIC,UAAUA,CAAA,EAAG;IACb,OAAO,CAAC,IAAI,CAACD,SAAS,CAAC;EAC3B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,MAAME,mBAAmBA,CAACC,OAAO,EAAE;IAC/B,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAAChB,WAAW,CAACiB,WAAW,CAAC,CAAC;IACrD,IAAI,IAAI,CAAChB,cAAc,EAAE;MACrB,MAAMiB,MAAM,GAAG;QACX,CAAC,IAAI,CAACN,SAAS,GAAGI;MACtB,CAAC;MACD,OAAOE,MAAM;IACjB;IACA,MAAMA,MAAM,GAAG;MACX,CAAC,IAAI,CAACN,SAAS,GAAGjB,eAAe,CAACqB,QAAQ,EAAE,IAAI,CAACN,WAAW,EAAE,IAAI,CAACC,QAAQ;IAC/E,CAAC;IACD,OAAOO,MAAM;EACjB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}