{"ast":null,"code":"import { setResponseValueAndErrors } from \"../errorMessages.mjs\";\nexport function parseDateDef(def, refs, overrideDateStrategy) {\n  const strategy = overrideDateStrategy ?? refs.dateStrategy;\n  if (Array.isArray(strategy)) {\n    return {\n      anyOf: strategy.map((item, i) => parseDateDef(def, refs, item))\n    };\n  }\n  switch (strategy) {\n    case 'string':\n    case 'format:date-time':\n      return {\n        type: 'string',\n        format: 'date-time'\n      };\n    case 'format:date':\n      return {\n        type: 'string',\n        format: 'date'\n      };\n    case 'integer':\n      return integerDateParser(def, refs);\n  }\n}\nconst integerDateParser = (def, refs) => {\n  const res = {\n    type: 'integer',\n    format: 'unix-time'\n  };\n  if (refs.target === 'openApi3') {\n    return res;\n  }\n  for (const check of def.checks) {\n    switch (check.kind) {\n      case 'min':\n        setResponseValueAndErrors(res, 'minimum', check.value,\n        // This is in milliseconds\n        check.message, refs);\n        break;\n      case 'max':\n        setResponseValueAndErrors(res, 'maximum', check.value,\n        // This is in milliseconds\n        check.message, refs);\n        break;\n    }\n  }\n  return res;\n};","map":{"version":3,"names":["setResponseValueAndErrors","parseDateDef","def","refs","overrideDateStrategy","strategy","dateStrategy","Array","isArray","anyOf","map","item","i","type","format","integerDateParser","res","target","check","checks","kind","value","message"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/openai/src/_vendor/zod-to-json-schema/parsers/date.ts"],"sourcesContent":["import { ZodDateDef } from 'zod';\nimport { Refs } from '../Refs';\nimport { ErrorMessages, setResponseValueAndErrors } from '../errorMessages';\nimport { JsonSchema7NumberType } from './number';\nimport { DateStrategy } from '../Options';\n\nexport type JsonSchema7DateType =\n  | {\n      type: 'integer' | 'string';\n      format: 'unix-time' | 'date-time' | 'date';\n      minimum?: number;\n      maximum?: number;\n      errorMessage?: ErrorMessages<JsonSchema7NumberType>;\n    }\n  | {\n      anyOf: JsonSchema7DateType[];\n    };\n\nexport function parseDateDef(\n  def: ZodDateDef,\n  refs: Refs,\n  overrideDateStrategy?: DateStrategy,\n): JsonSchema7DateType {\n  const strategy = overrideDateStrategy ?? refs.dateStrategy;\n\n  if (Array.isArray(strategy)) {\n    return {\n      anyOf: strategy.map((item, i) => parseDateDef(def, refs, item)),\n    };\n  }\n\n  switch (strategy) {\n    case 'string':\n    case 'format:date-time':\n      return {\n        type: 'string',\n        format: 'date-time',\n      };\n    case 'format:date':\n      return {\n        type: 'string',\n        format: 'date',\n      };\n    case 'integer':\n      return integerDateParser(def, refs);\n  }\n}\n\nconst integerDateParser = (def: ZodDateDef, refs: Refs) => {\n  const res: JsonSchema7DateType = {\n    type: 'integer',\n    format: 'unix-time',\n  };\n\n  if (refs.target === 'openApi3') {\n    return res;\n  }\n\n  for (const check of def.checks) {\n    switch (check.kind) {\n      case 'min':\n        setResponseValueAndErrors(\n          res,\n          'minimum',\n          check.value, // This is in milliseconds\n          check.message,\n          refs,\n        );\n        break;\n      case 'max':\n        setResponseValueAndErrors(\n          res,\n          'maximum',\n          check.value, // This is in milliseconds\n          check.message,\n          refs,\n        );\n        break;\n    }\n  }\n\n  return res;\n};\n"],"mappings":"SAEwBA,yBAAyB,QAAE;AAgBnD,OAAM,SAAUC,YAAYA,CAC1BC,GAAe,EACfC,IAAU,EACVC,oBAAmC;EAEnC,MAAMC,QAAQ,GAAGD,oBAAoB,IAAID,IAAI,CAACG,YAAY;EAE1D,IAAIC,KAAK,CAACC,OAAO,CAACH,QAAQ,CAAC,EAAE;IAC3B,OAAO;MACLI,KAAK,EAAEJ,QAAQ,CAACK,GAAG,CAAC,CAACC,IAAI,EAAEC,CAAC,KAAKX,YAAY,CAACC,GAAG,EAAEC,IAAI,EAAEQ,IAAI,CAAC;KAC/D;;EAGH,QAAQN,QAAQ;IACd,KAAK,QAAQ;IACb,KAAK,kBAAkB;MACrB,OAAO;QACLQ,IAAI,EAAE,QAAQ;QACdC,MAAM,EAAE;OACT;IACH,KAAK,aAAa;MAChB,OAAO;QACLD,IAAI,EAAE,QAAQ;QACdC,MAAM,EAAE;OACT;IACH,KAAK,SAAS;MACZ,OAAOC,iBAAiB,CAACb,GAAG,EAAEC,IAAI,CAAC;;AAEzC;AAEA,MAAMY,iBAAiB,GAAGA,CAACb,GAAe,EAAEC,IAAU,KAAI;EACxD,MAAMa,GAAG,GAAwB;IAC/BH,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE;GACT;EAED,IAAIX,IAAI,CAACc,MAAM,KAAK,UAAU,EAAE;IAC9B,OAAOD,GAAG;;EAGZ,KAAK,MAAME,KAAK,IAAIhB,GAAG,CAACiB,MAAM,EAAE;IAC9B,QAAQD,KAAK,CAACE,IAAI;MAChB,KAAK,KAAK;QACRpB,yBAAyB,CACvBgB,GAAG,EACH,SAAS,EACTE,KAAK,CAACG,KAAK;QAAE;QACbH,KAAK,CAACI,OAAO,EACbnB,IAAI,CACL;QACD;MACF,KAAK,KAAK;QACRH,yBAAyB,CACvBgB,GAAG,EACH,SAAS,EACTE,KAAK,CAACG,KAAK;QAAE;QACbH,KAAK,CAACI,OAAO,EACbnB,IAAI,CACL;QACD;;;EAIN,OAAOa,GAAG;AACZ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}