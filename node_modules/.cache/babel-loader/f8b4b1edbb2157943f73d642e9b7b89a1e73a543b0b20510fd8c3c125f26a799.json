{"ast":null,"code":"import { Serializable } from \"./load/serializable.js\";\nimport { HumanMessage, AIMessage } from \"./messages/index.js\";\n// TODO: Combine into one class for 0.2\n/**\n * Base class for all chat message histories. All chat message histories\n * should extend this class.\n */\nexport class BaseChatMessageHistory extends Serializable {\n  /**\n   * Add a list of messages.\n   *\n   * Implementations should override this method to handle bulk addition of messages\n   * in an efficient manner to avoid unnecessary round-trips to the underlying store.\n   *\n   * @param messages - A list of BaseMessage objects to store.\n   */\n  async addMessages(messages) {\n    for (const message of messages) {\n      await this.addMessage(message);\n    }\n  }\n}\n/**\n * Base class for all list chat message histories. All list chat message\n * histories should extend this class.\n */\nexport class BaseListChatMessageHistory extends Serializable {\n  /**\n   * This is a convenience method for adding a human message string to the store.\n   * Please note that this is a convenience method. Code should favor the\n   * bulk addMessages interface instead to save on round-trips to the underlying\n   * persistence layer.\n   * This method may be deprecated in a future release.\n   */\n  addUserMessage(message) {\n    return this.addMessage(new HumanMessage(message));\n  }\n  /** @deprecated Use addAIMessage instead */\n  addAIChatMessage(message) {\n    return this.addMessage(new AIMessage(message));\n  }\n  /**\n   * This is a convenience method for adding an AI message string to the store.\n   * Please note that this is a convenience method. Code should favor the bulk\n   * addMessages interface instead to save on round-trips to the underlying\n   * persistence layer.\n   * This method may be deprecated in a future release.\n   */\n  addAIMessage(message) {\n    return this.addMessage(new AIMessage(message));\n  }\n  /**\n   * Add a list of messages.\n   *\n   * Implementations should override this method to handle bulk addition of messages\n   * in an efficient manner to avoid unnecessary round-trips to the underlying store.\n   *\n   * @param messages - A list of BaseMessage objects to store.\n   */\n  async addMessages(messages) {\n    for (const message of messages) {\n      await this.addMessage(message);\n    }\n  }\n  /**\n   * Remove all messages from the store.\n   */\n  clear() {\n    throw new Error(\"Not implemented.\");\n  }\n}\n/**\n * Class for storing chat message history in-memory. It extends the\n * BaseListChatMessageHistory class and provides methods to get, add, and\n * clear messages.\n */\nexport class InMemoryChatMessageHistory extends BaseListChatMessageHistory {\n  constructor(messages) {\n    super(...arguments);\n    Object.defineProperty(this, \"lc_namespace\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [\"langchain\", \"stores\", \"message\", \"in_memory\"]\n    });\n    Object.defineProperty(this, \"messages\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    this.messages = messages ?? [];\n  }\n  /**\n   * Method to get all the messages stored in the ChatMessageHistory\n   * instance.\n   * @returns Array of stored BaseMessage instances.\n   */\n  async getMessages() {\n    return this.messages;\n  }\n  /**\n   * Method to add a new message to the ChatMessageHistory instance.\n   * @param message The BaseMessage instance to add.\n   * @returns A promise that resolves when the message has been added.\n   */\n  async addMessage(message) {\n    this.messages.push(message);\n  }\n  /**\n   * Method to clear all the messages from the ChatMessageHistory instance.\n   * @returns A promise that resolves when all messages have been cleared.\n   */\n  async clear() {\n    this.messages = [];\n  }\n}","map":{"version":3,"names":["Serializable","HumanMessage","AIMessage","BaseChatMessageHistory","addMessages","messages","message","addMessage","BaseListChatMessageHistory","addUserMessage","addAIChatMessage","addAIMessage","clear","Error","InMemoryChatMessageHistory","constructor","arguments","Object","defineProperty","enumerable","configurable","writable","value","getMessages","push"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/@langchain/core/dist/chat_history.js"],"sourcesContent":["import { Serializable } from \"./load/serializable.js\";\nimport { HumanMessage, AIMessage } from \"./messages/index.js\";\n// TODO: Combine into one class for 0.2\n/**\n * Base class for all chat message histories. All chat message histories\n * should extend this class.\n */\nexport class BaseChatMessageHistory extends Serializable {\n    /**\n     * Add a list of messages.\n     *\n     * Implementations should override this method to handle bulk addition of messages\n     * in an efficient manner to avoid unnecessary round-trips to the underlying store.\n     *\n     * @param messages - A list of BaseMessage objects to store.\n     */\n    async addMessages(messages) {\n        for (const message of messages) {\n            await this.addMessage(message);\n        }\n    }\n}\n/**\n * Base class for all list chat message histories. All list chat message\n * histories should extend this class.\n */\nexport class BaseListChatMessageHistory extends Serializable {\n    /**\n     * This is a convenience method for adding a human message string to the store.\n     * Please note that this is a convenience method. Code should favor the\n     * bulk addMessages interface instead to save on round-trips to the underlying\n     * persistence layer.\n     * This method may be deprecated in a future release.\n     */\n    addUserMessage(message) {\n        return this.addMessage(new HumanMessage(message));\n    }\n    /** @deprecated Use addAIMessage instead */\n    addAIChatMessage(message) {\n        return this.addMessage(new AIMessage(message));\n    }\n    /**\n     * This is a convenience method for adding an AI message string to the store.\n     * Please note that this is a convenience method. Code should favor the bulk\n     * addMessages interface instead to save on round-trips to the underlying\n     * persistence layer.\n     * This method may be deprecated in a future release.\n     */\n    addAIMessage(message) {\n        return this.addMessage(new AIMessage(message));\n    }\n    /**\n     * Add a list of messages.\n     *\n     * Implementations should override this method to handle bulk addition of messages\n     * in an efficient manner to avoid unnecessary round-trips to the underlying store.\n     *\n     * @param messages - A list of BaseMessage objects to store.\n     */\n    async addMessages(messages) {\n        for (const message of messages) {\n            await this.addMessage(message);\n        }\n    }\n    /**\n     * Remove all messages from the store.\n     */\n    clear() {\n        throw new Error(\"Not implemented.\");\n    }\n}\n/**\n * Class for storing chat message history in-memory. It extends the\n * BaseListChatMessageHistory class and provides methods to get, add, and\n * clear messages.\n */\nexport class InMemoryChatMessageHistory extends BaseListChatMessageHistory {\n    constructor(messages) {\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"stores\", \"message\", \"in_memory\"]\n        });\n        Object.defineProperty(this, \"messages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        this.messages = messages ?? [];\n    }\n    /**\n     * Method to get all the messages stored in the ChatMessageHistory\n     * instance.\n     * @returns Array of stored BaseMessage instances.\n     */\n    async getMessages() {\n        return this.messages;\n    }\n    /**\n     * Method to add a new message to the ChatMessageHistory instance.\n     * @param message The BaseMessage instance to add.\n     * @returns A promise that resolves when the message has been added.\n     */\n    async addMessage(message) {\n        this.messages.push(message);\n    }\n    /**\n     * Method to clear all the messages from the ChatMessageHistory instance.\n     * @returns A promise that resolves when all messages have been cleared.\n     */\n    async clear() {\n        this.messages = [];\n    }\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,wBAAwB;AACrD,SAASC,YAAY,EAAEC,SAAS,QAAQ,qBAAqB;AAC7D;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,sBAAsB,SAASH,YAAY,CAAC;EACrD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMI,WAAWA,CAACC,QAAQ,EAAE;IACxB,KAAK,MAAMC,OAAO,IAAID,QAAQ,EAAE;MAC5B,MAAM,IAAI,CAACE,UAAU,CAACD,OAAO,CAAC;IAClC;EACJ;AACJ;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,0BAA0B,SAASR,YAAY,CAAC;EACzD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIS,cAAcA,CAACH,OAAO,EAAE;IACpB,OAAO,IAAI,CAACC,UAAU,CAAC,IAAIN,YAAY,CAACK,OAAO,CAAC,CAAC;EACrD;EACA;EACAI,gBAAgBA,CAACJ,OAAO,EAAE;IACtB,OAAO,IAAI,CAACC,UAAU,CAAC,IAAIL,SAAS,CAACI,OAAO,CAAC,CAAC;EAClD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIK,YAAYA,CAACL,OAAO,EAAE;IAClB,OAAO,IAAI,CAACC,UAAU,CAAC,IAAIL,SAAS,CAACI,OAAO,CAAC,CAAC;EAClD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMF,WAAWA,CAACC,QAAQ,EAAE;IACxB,KAAK,MAAMC,OAAO,IAAID,QAAQ,EAAE;MAC5B,MAAM,IAAI,CAACE,UAAU,CAACD,OAAO,CAAC;IAClC;EACJ;EACA;AACJ;AACA;EACIM,KAAKA,CAAA,EAAG;IACJ,MAAM,IAAIC,KAAK,CAAC,kBAAkB,CAAC;EACvC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,0BAA0B,SAASN,0BAA0B,CAAC;EACvEO,WAAWA,CAACV,QAAQ,EAAE;IAClB,KAAK,CAAC,GAAGW,SAAS,CAAC;IACnBC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,cAAc,EAAE;MACxCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,CAAC,WAAW,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW;IACzD,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,UAAU,EAAE;MACpCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE;IACX,CAAC,CAAC;IACF,IAAI,CAACjB,QAAQ,GAAGA,QAAQ,IAAI,EAAE;EAClC;EACA;AACJ;AACA;AACA;AACA;EACI,MAAMkB,WAAWA,CAAA,EAAG;IAChB,OAAO,IAAI,CAAClB,QAAQ;EACxB;EACA;AACJ;AACA;AACA;AACA;EACI,MAAME,UAAUA,CAACD,OAAO,EAAE;IACtB,IAAI,CAACD,QAAQ,CAACmB,IAAI,CAAClB,OAAO,CAAC;EAC/B;EACA;AACJ;AACA;AACA;EACI,MAAMM,KAAKA,CAAA,EAAG;IACV,IAAI,CAACP,QAAQ,GAAG,EAAE;EACtB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}