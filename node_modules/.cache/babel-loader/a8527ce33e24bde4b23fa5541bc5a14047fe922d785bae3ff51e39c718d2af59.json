{"ast":null,"code":"import { parseDef } from \"../parseDef.mjs\";\nexport function parseTupleDef(def, refs) {\n  if (def.rest) {\n    return {\n      type: 'array',\n      minItems: def.items.length,\n      items: def.items.map((x, i) => parseDef(x._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, 'items', `${i}`]\n      })).reduce((acc, x) => x === undefined ? acc : [...acc, x], []),\n      additionalItems: parseDef(def.rest._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, 'additionalItems']\n      })\n    };\n  } else {\n    return {\n      type: 'array',\n      minItems: def.items.length,\n      maxItems: def.items.length,\n      items: def.items.map((x, i) => parseDef(x._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, 'items', `${i}`]\n      })).reduce((acc, x) => x === undefined ? acc : [...acc, x], [])\n    };\n  }\n}","map":{"version":3,"names":["parseDef","parseTupleDef","def","refs","rest","type","minItems","items","length","map","x","i","_def","currentPath","reduce","acc","undefined","additionalItems","maxItems"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/openai/src/_vendor/zod-to-json-schema/parsers/tuple.ts"],"sourcesContent":["import { ZodTupleDef, ZodTupleItems, ZodTypeAny } from 'zod';\nimport { JsonSchema7Type, parseDef } from '../parseDef';\nimport { Refs } from '../Refs';\n\nexport type JsonSchema7TupleType = {\n  type: 'array';\n  minItems: number;\n  items: JsonSchema7Type[];\n} & (\n  | {\n      maxItems: number;\n    }\n  | {\n      additionalItems?: JsonSchema7Type | undefined;\n    }\n);\n\nexport function parseTupleDef(\n  def: ZodTupleDef<ZodTupleItems | [], ZodTypeAny | null>,\n  refs: Refs,\n): JsonSchema7TupleType {\n  if (def.rest) {\n    return {\n      type: 'array',\n      minItems: def.items.length,\n      items: def.items\n        .map((x, i) =>\n          parseDef(x._def, {\n            ...refs,\n            currentPath: [...refs.currentPath, 'items', `${i}`],\n          }),\n        )\n        .reduce((acc: JsonSchema7Type[], x) => (x === undefined ? acc : [...acc, x]), []),\n      additionalItems: parseDef(def.rest._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, 'additionalItems'],\n      }),\n    };\n  } else {\n    return {\n      type: 'array',\n      minItems: def.items.length,\n      maxItems: def.items.length,\n      items: def.items\n        .map((x, i) =>\n          parseDef(x._def, {\n            ...refs,\n            currentPath: [...refs.currentPath, 'items', `${i}`],\n          }),\n        )\n        .reduce((acc: JsonSchema7Type[], x) => (x === undefined ? acc : [...acc, x]), []),\n    };\n  }\n}\n"],"mappings":"SAC0BA,QAAQ,QAAE;AAgBpC,OAAM,SAAUC,aAAaA,CAC3BC,GAAuD,EACvDC,IAAU;EAEV,IAAID,GAAG,CAACE,IAAI,EAAE;IACZ,OAAO;MACLC,IAAI,EAAE,OAAO;MACbC,QAAQ,EAAEJ,GAAG,CAACK,KAAK,CAACC,MAAM;MAC1BD,KAAK,EAAEL,GAAG,CAACK,KAAK,CACbE,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KACRX,QAAQ,CAACU,CAAC,CAACE,IAAI,EAAE;QACf,GAAGT,IAAI;QACPU,WAAW,EAAE,CAAC,GAAGV,IAAI,CAACU,WAAW,EAAE,OAAO,EAAE,GAAGF,CAAC,EAAE;OACnD,CAAC,CACH,CACAG,MAAM,CAAC,CAACC,GAAsB,EAAEL,CAAC,KAAMA,CAAC,KAAKM,SAAS,GAAGD,GAAG,GAAG,CAAC,GAAGA,GAAG,EAAEL,CAAC,CAAE,EAAE,EAAE,CAAC;MACnFO,eAAe,EAAEjB,QAAQ,CAACE,GAAG,CAACE,IAAI,CAACQ,IAAI,EAAE;QACvC,GAAGT,IAAI;QACPU,WAAW,EAAE,CAAC,GAAGV,IAAI,CAACU,WAAW,EAAE,iBAAiB;OACrD;KACF;GACF,MAAM;IACL,OAAO;MACLR,IAAI,EAAE,OAAO;MACbC,QAAQ,EAAEJ,GAAG,CAACK,KAAK,CAACC,MAAM;MAC1BU,QAAQ,EAAEhB,GAAG,CAACK,KAAK,CAACC,MAAM;MAC1BD,KAAK,EAAEL,GAAG,CAACK,KAAK,CACbE,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KACRX,QAAQ,CAACU,CAAC,CAACE,IAAI,EAAE;QACf,GAAGT,IAAI;QACPU,WAAW,EAAE,CAAC,GAAGV,IAAI,CAACU,WAAW,EAAE,OAAO,EAAE,GAAGF,CAAC,EAAE;OACnD,CAAC,CACH,CACAG,MAAM,CAAC,CAACC,GAAsB,EAAEL,CAAC,KAAMA,CAAC,KAAKM,SAAS,GAAGD,GAAG,GAAG,CAAC,GAAGA,GAAG,EAAEL,CAAC,CAAE,EAAE,EAAE;KACnF;;AAEL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}