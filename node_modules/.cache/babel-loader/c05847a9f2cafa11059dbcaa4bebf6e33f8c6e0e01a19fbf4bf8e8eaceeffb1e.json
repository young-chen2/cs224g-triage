{"ast":null,"code":"import { Document } from \"../documents/document.js\";\nimport { BaseExampleSelector } from \"./base.js\";\nfunction sortedValues(values) {\n  return Object.keys(values).sort().map(key => values[key]);\n}\n/**\n * Class that selects examples based on semantic similarity. It extends\n * the BaseExampleSelector class.\n * @example\n * ```typescript\n * const exampleSelector = await SemanticSimilarityExampleSelector.fromExamples(\n *   [\n *     { input: \"happy\", output: \"sad\" },\n *     { input: \"tall\", output: \"short\" },\n *     { input: \"energetic\", output: \"lethargic\" },\n *     { input: \"sunny\", output: \"gloomy\" },\n *     { input: \"windy\", output: \"calm\" },\n *   ],\n *   new OpenAIEmbeddings(),\n *   HNSWLib,\n *   { k: 1 },\n * );\n * const dynamicPrompt = new FewShotPromptTemplate({\n *   exampleSelector,\n *   examplePrompt: PromptTemplate.fromTemplate(\n *     \"Input: {input}\\nOutput: {output}\",\n *   ),\n *   prefix: \"Give the antonym of every input\",\n *   suffix: \"Input: {adjective}\\nOutput:\",\n *   inputVariables: [\"adjective\"],\n * });\n * console.log(await dynamicPrompt.format({ adjective: \"rainy\" }));\n * ```\n */\nexport class SemanticSimilarityExampleSelector extends BaseExampleSelector {\n  constructor(data) {\n    super(data);\n    Object.defineProperty(this, \"vectorStoreRetriever\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"exampleKeys\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"inputKeys\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.exampleKeys = data.exampleKeys;\n    this.inputKeys = data.inputKeys;\n    if (data.vectorStore !== undefined) {\n      this.vectorStoreRetriever = data.vectorStore.asRetriever({\n        k: data.k ?? 4,\n        filter: data.filter\n      });\n    } else if (data.vectorStoreRetriever) {\n      this.vectorStoreRetriever = data.vectorStoreRetriever;\n    } else {\n      throw new Error(`You must specify one of \"vectorStore\" and \"vectorStoreRetriever\".`);\n    }\n  }\n  /**\n   * Method that adds a new example to the vectorStore. The example is\n   * converted to a string and added to the vectorStore as a document.\n   * @param example The example to be added to the vectorStore.\n   * @returns Promise that resolves when the example has been added to the vectorStore.\n   */\n  async addExample(example) {\n    const inputKeys = this.inputKeys ?? Object.keys(example);\n    const stringExample = sortedValues(inputKeys.reduce((acc, key) => ({\n      ...acc,\n      [key]: example[key]\n    }), {})).join(\" \");\n    await this.vectorStoreRetriever.addDocuments([new Document({\n      pageContent: stringExample,\n      metadata: example\n    })]);\n  }\n  /**\n   * Method that selects which examples to use based on semantic similarity.\n   * It performs a similarity search in the vectorStore using the input\n   * variables and returns the examples with the highest similarity.\n   * @param inputVariables The input variables used for the similarity search.\n   * @returns Promise that resolves with an array of the selected examples.\n   */\n  async selectExamples(inputVariables) {\n    const inputKeys = this.inputKeys ?? Object.keys(inputVariables);\n    const query = sortedValues(inputKeys.reduce((acc, key) => ({\n      ...acc,\n      [key]: inputVariables[key]\n    }), {})).join(\" \");\n    const exampleDocs = await this.vectorStoreRetriever.invoke(query);\n    const examples = exampleDocs.map(doc => doc.metadata);\n    if (this.exampleKeys) {\n      // If example keys are provided, filter examples to those keys.\n      return examples.map(example => this.exampleKeys.reduce((acc, key) => ({\n        ...acc,\n        [key]: example[key]\n      }), {}));\n    }\n    return examples;\n  }\n  /**\n   * Static method that creates a new instance of\n   * SemanticSimilarityExampleSelector. It takes a list of examples, an\n   * instance of Embeddings, a VectorStore class, and an options object as\n   * parameters. It converts the examples to strings, creates a VectorStore\n   * from the strings and the embeddings, and returns a new\n   * SemanticSimilarityExampleSelector with the created VectorStore and the\n   * options provided.\n   * @param examples The list of examples to be used.\n   * @param embeddings The instance of Embeddings to be used.\n   * @param vectorStoreCls The VectorStore class to be used.\n   * @param options The options object for the SemanticSimilarityExampleSelector.\n   * @returns Promise that resolves with a new instance of SemanticSimilarityExampleSelector.\n   */\n  static async fromExamples(examples, embeddings, vectorStoreCls, options = {}) {\n    const inputKeys = options.inputKeys ?? null;\n    const stringExamples = examples.map(example => sortedValues(inputKeys ? inputKeys.reduce((acc, key) => ({\n      ...acc,\n      [key]: example[key]\n    }), {}) : example).join(\" \"));\n    const vectorStore = await vectorStoreCls.fromTexts(stringExamples, examples,\n    // metadatas\n    embeddings, options);\n    return new SemanticSimilarityExampleSelector({\n      vectorStore,\n      k: options.k ?? 4,\n      exampleKeys: options.exampleKeys,\n      inputKeys: options.inputKeys\n    });\n  }\n}","map":{"version":3,"names":["Document","BaseExampleSelector","sortedValues","values","Object","keys","sort","map","key","SemanticSimilarityExampleSelector","constructor","data","defineProperty","enumerable","configurable","writable","value","exampleKeys","inputKeys","vectorStore","undefined","vectorStoreRetriever","asRetriever","k","filter","Error","addExample","example","stringExample","reduce","acc","join","addDocuments","pageContent","metadata","selectExamples","inputVariables","query","exampleDocs","invoke","examples","doc","fromExamples","embeddings","vectorStoreCls","options","stringExamples","fromTexts"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/@langchain/core/dist/example_selectors/semantic_similarity.js"],"sourcesContent":["import { Document } from \"../documents/document.js\";\nimport { BaseExampleSelector } from \"./base.js\";\nfunction sortedValues(values) {\n    return Object.keys(values)\n        .sort()\n        .map((key) => values[key]);\n}\n/**\n * Class that selects examples based on semantic similarity. It extends\n * the BaseExampleSelector class.\n * @example\n * ```typescript\n * const exampleSelector = await SemanticSimilarityExampleSelector.fromExamples(\n *   [\n *     { input: \"happy\", output: \"sad\" },\n *     { input: \"tall\", output: \"short\" },\n *     { input: \"energetic\", output: \"lethargic\" },\n *     { input: \"sunny\", output: \"gloomy\" },\n *     { input: \"windy\", output: \"calm\" },\n *   ],\n *   new OpenAIEmbeddings(),\n *   HNSWLib,\n *   { k: 1 },\n * );\n * const dynamicPrompt = new FewShotPromptTemplate({\n *   exampleSelector,\n *   examplePrompt: PromptTemplate.fromTemplate(\n *     \"Input: {input}\\nOutput: {output}\",\n *   ),\n *   prefix: \"Give the antonym of every input\",\n *   suffix: \"Input: {adjective}\\nOutput:\",\n *   inputVariables: [\"adjective\"],\n * });\n * console.log(await dynamicPrompt.format({ adjective: \"rainy\" }));\n * ```\n */\nexport class SemanticSimilarityExampleSelector extends BaseExampleSelector {\n    constructor(data) {\n        super(data);\n        Object.defineProperty(this, \"vectorStoreRetriever\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"exampleKeys\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKeys\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.exampleKeys = data.exampleKeys;\n        this.inputKeys = data.inputKeys;\n        if (data.vectorStore !== undefined) {\n            this.vectorStoreRetriever = data.vectorStore.asRetriever({\n                k: data.k ?? 4,\n                filter: data.filter,\n            });\n        }\n        else if (data.vectorStoreRetriever) {\n            this.vectorStoreRetriever = data.vectorStoreRetriever;\n        }\n        else {\n            throw new Error(`You must specify one of \"vectorStore\" and \"vectorStoreRetriever\".`);\n        }\n    }\n    /**\n     * Method that adds a new example to the vectorStore. The example is\n     * converted to a string and added to the vectorStore as a document.\n     * @param example The example to be added to the vectorStore.\n     * @returns Promise that resolves when the example has been added to the vectorStore.\n     */\n    async addExample(example) {\n        const inputKeys = this.inputKeys ?? Object.keys(example);\n        const stringExample = sortedValues(inputKeys.reduce((acc, key) => ({ ...acc, [key]: example[key] }), {})).join(\" \");\n        await this.vectorStoreRetriever.addDocuments([\n            new Document({\n                pageContent: stringExample,\n                metadata: example,\n            }),\n        ]);\n    }\n    /**\n     * Method that selects which examples to use based on semantic similarity.\n     * It performs a similarity search in the vectorStore using the input\n     * variables and returns the examples with the highest similarity.\n     * @param inputVariables The input variables used for the similarity search.\n     * @returns Promise that resolves with an array of the selected examples.\n     */\n    async selectExamples(inputVariables) {\n        const inputKeys = this.inputKeys ?? Object.keys(inputVariables);\n        const query = sortedValues(inputKeys.reduce((acc, key) => ({ ...acc, [key]: inputVariables[key] }), {})).join(\" \");\n        const exampleDocs = await this.vectorStoreRetriever.invoke(query);\n        const examples = exampleDocs.map((doc) => doc.metadata);\n        if (this.exampleKeys) {\n            // If example keys are provided, filter examples to those keys.\n            return examples.map((example) => this.exampleKeys.reduce((acc, key) => ({ ...acc, [key]: example[key] }), {}));\n        }\n        return examples;\n    }\n    /**\n     * Static method that creates a new instance of\n     * SemanticSimilarityExampleSelector. It takes a list of examples, an\n     * instance of Embeddings, a VectorStore class, and an options object as\n     * parameters. It converts the examples to strings, creates a VectorStore\n     * from the strings and the embeddings, and returns a new\n     * SemanticSimilarityExampleSelector with the created VectorStore and the\n     * options provided.\n     * @param examples The list of examples to be used.\n     * @param embeddings The instance of Embeddings to be used.\n     * @param vectorStoreCls The VectorStore class to be used.\n     * @param options The options object for the SemanticSimilarityExampleSelector.\n     * @returns Promise that resolves with a new instance of SemanticSimilarityExampleSelector.\n     */\n    static async fromExamples(examples, embeddings, vectorStoreCls, options = {}) {\n        const inputKeys = options.inputKeys ?? null;\n        const stringExamples = examples.map((example) => sortedValues(inputKeys\n            ? inputKeys.reduce((acc, key) => ({ ...acc, [key]: example[key] }), {})\n            : example).join(\" \"));\n        const vectorStore = await vectorStoreCls.fromTexts(stringExamples, examples, // metadatas\n        embeddings, options);\n        return new SemanticSimilarityExampleSelector({\n            vectorStore,\n            k: options.k ?? 4,\n            exampleKeys: options.exampleKeys,\n            inputKeys: options.inputKeys,\n        });\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}