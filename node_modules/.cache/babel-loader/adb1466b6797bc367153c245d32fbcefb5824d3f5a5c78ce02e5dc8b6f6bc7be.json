{"ast":null,"code":"import { BaseCumulativeTransformOutputParser } from \"./transform.js\";\nimport { compare } from \"../utils/json_patch.js\";\nimport { parseJsonMarkdown, parsePartialJson } from \"../utils/json.js\";\n/**\n * Class for parsing the output of an LLM into a JSON object.\n */\nexport class JsonOutputParser extends BaseCumulativeTransformOutputParser {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"lc_namespace\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [\"langchain_core\", \"output_parsers\"]\n    });\n    Object.defineProperty(this, \"lc_serializable\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n  }\n  static lc_name() {\n    return \"JsonOutputParser\";\n  }\n  _diff(prev, next) {\n    if (!next) {\n      return undefined;\n    }\n    if (!prev) {\n      return [{\n        op: \"replace\",\n        path: \"\",\n        value: next\n      }];\n    }\n    return compare(prev, next);\n  }\n  // This should actually return Partial<T>, but there's no way\n  // to specify emitted chunks as instances separate from the main output type.\n  async parsePartialResult(generations) {\n    return parseJsonMarkdown(generations[0].text);\n  }\n  async parse(text) {\n    return parseJsonMarkdown(text, JSON.parse);\n  }\n  getFormatInstructions() {\n    return \"\";\n  }\n}\nexport { parsePartialJson, parseJsonMarkdown };","map":{"version":3,"names":["BaseCumulativeTransformOutputParser","compare","parseJsonMarkdown","parsePartialJson","JsonOutputParser","constructor","arguments","Object","defineProperty","enumerable","configurable","writable","value","lc_name","_diff","prev","next","undefined","op","path","parsePartialResult","generations","text","parse","JSON","getFormatInstructions"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/@langchain/core/dist/output_parsers/json.js"],"sourcesContent":["import { BaseCumulativeTransformOutputParser } from \"./transform.js\";\nimport { compare } from \"../utils/json_patch.js\";\nimport { parseJsonMarkdown, parsePartialJson } from \"../utils/json.js\";\n/**\n * Class for parsing the output of an LLM into a JSON object.\n */\nexport class JsonOutputParser extends BaseCumulativeTransformOutputParser {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"output_parsers\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n    }\n    static lc_name() {\n        return \"JsonOutputParser\";\n    }\n    _diff(prev, next) {\n        if (!next) {\n            return undefined;\n        }\n        if (!prev) {\n            return [{ op: \"replace\", path: \"\", value: next }];\n        }\n        return compare(prev, next);\n    }\n    // This should actually return Partial<T>, but there's no way\n    // to specify emitted chunks as instances separate from the main output type.\n    async parsePartialResult(generations) {\n        return parseJsonMarkdown(generations[0].text);\n    }\n    async parse(text) {\n        return parseJsonMarkdown(text, JSON.parse);\n    }\n    getFormatInstructions() {\n        return \"\";\n    }\n}\nexport { parsePartialJson, parseJsonMarkdown };\n"],"mappings":"AAAA,SAASA,mCAAmC,QAAQ,gBAAgB;AACpE,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,iBAAiB,EAAEC,gBAAgB,QAAQ,kBAAkB;AACtE;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,SAASJ,mCAAmC,CAAC;EACtEK,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,GAAGC,SAAS,CAAC;IACnBC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,cAAc,EAAE;MACxCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,CAAC,gBAAgB,EAAE,gBAAgB;IAC9C,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,iBAAiB,EAAE;MAC3CC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE;IACX,CAAC,CAAC;EACN;EACA,OAAOC,OAAOA,CAAA,EAAG;IACb,OAAO,kBAAkB;EAC7B;EACAC,KAAKA,CAACC,IAAI,EAAEC,IAAI,EAAE;IACd,IAAI,CAACA,IAAI,EAAE;MACP,OAAOC,SAAS;IACpB;IACA,IAAI,CAACF,IAAI,EAAE;MACP,OAAO,CAAC;QAAEG,EAAE,EAAE,SAAS;QAAEC,IAAI,EAAE,EAAE;QAAEP,KAAK,EAAEI;MAAK,CAAC,CAAC;IACrD;IACA,OAAOf,OAAO,CAACc,IAAI,EAAEC,IAAI,CAAC;EAC9B;EACA;EACA;EACA,MAAMI,kBAAkBA,CAACC,WAAW,EAAE;IAClC,OAAOnB,iBAAiB,CAACmB,WAAW,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC;EACjD;EACA,MAAMC,KAAKA,CAACD,IAAI,EAAE;IACd,OAAOpB,iBAAiB,CAACoB,IAAI,EAAEE,IAAI,CAACD,KAAK,CAAC;EAC9C;EACAE,qBAAqBA,CAAA,EAAG;IACpB,OAAO,EAAE;EACb;AACJ;AACA,SAAStB,gBAAgB,EAAED,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}