{"ast":null,"code":"import { BaseChain } from \"./base.js\";\nimport { RecursiveCharacterTextSplitter } from \"../text_splitter.js\";\n/**\n * Chain that combines documents by stuffing into context.\n * @augments BaseChain\n * @augments StuffDocumentsChainInput\n * @example\n * ```typescript\n * const model = new ChatOpenAI({ temperature: 0 });\n * const combineDocsChain = loadSummarizationChain(model);\n * const chain = new AnalyzeDocumentChain({\n *   combineDocumentsChain: combineDocsChain,\n * });\n *\n * // Read the text from a file (this is a placeholder for actual file reading)\n * const text = readTextFromFile(\"state_of_the_union.txt\");\n *\n * // Invoke the chain to analyze the document\n * const res = await chain.call({\n *   input_document: text,\n * });\n *\n * console.log({ res });\n * ```\n */\nexport class AnalyzeDocumentChain extends BaseChain {\n  static lc_name() {\n    return \"AnalyzeDocumentChain\";\n  }\n  constructor(fields) {\n    super(fields);\n    Object.defineProperty(this, \"inputKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"input_document\"\n    });\n    Object.defineProperty(this, \"combineDocumentsChain\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"textSplitter\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.combineDocumentsChain = fields.combineDocumentsChain;\n    this.inputKey = fields.inputKey ?? this.inputKey;\n    this.textSplitter = fields.textSplitter ?? new RecursiveCharacterTextSplitter();\n  }\n  get inputKeys() {\n    return [this.inputKey];\n  }\n  get outputKeys() {\n    return this.combineDocumentsChain.outputKeys;\n  }\n  /** @ignore */\n  async _call(values, runManager) {\n    if (!(this.inputKey in values)) {\n      throw new Error(`Document key ${this.inputKey} not found.`);\n    }\n    const {\n      [this.inputKey]: doc,\n      ...rest\n    } = values;\n    const currentDoc = doc;\n    const currentDocs = await this.textSplitter.createDocuments([currentDoc]);\n    const newInputs = {\n      input_documents: currentDocs,\n      ...rest\n    };\n    const result = await this.combineDocumentsChain.call(newInputs, runManager?.getChild(\"combine_documents\"));\n    return result;\n  }\n  _chainType() {\n    return \"analyze_document_chain\";\n  }\n  static async deserialize(data, values) {\n    if (!(\"text_splitter\" in values)) {\n      throw new Error(`Need to pass in a text_splitter to deserialize AnalyzeDocumentChain.`);\n    }\n    const {\n      text_splitter\n    } = values;\n    if (!data.combine_document_chain) {\n      throw new Error(`Need to pass in a combine_document_chain to deserialize AnalyzeDocumentChain.`);\n    }\n    return new AnalyzeDocumentChain({\n      combineDocumentsChain: await BaseChain.deserialize(data.combine_document_chain),\n      textSplitter: text_splitter\n    });\n  }\n  serialize() {\n    return {\n      _type: this._chainType(),\n      combine_document_chain: this.combineDocumentsChain.serialize()\n    };\n  }\n}","map":{"version":3,"names":["BaseChain","RecursiveCharacterTextSplitter","AnalyzeDocumentChain","lc_name","constructor","fields","Object","defineProperty","enumerable","configurable","writable","value","combineDocumentsChain","inputKey","textSplitter","inputKeys","outputKeys","_call","values","runManager","Error","doc","rest","currentDoc","currentDocs","createDocuments","newInputs","input_documents","result","call","getChild","_chainType","deserialize","data","text_splitter","combine_document_chain","serialize","_type"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/langchain/dist/chains/analyze_documents_chain.js"],"sourcesContent":["import { BaseChain } from \"./base.js\";\nimport { RecursiveCharacterTextSplitter, } from \"../text_splitter.js\";\n/**\n * Chain that combines documents by stuffing into context.\n * @augments BaseChain\n * @augments StuffDocumentsChainInput\n * @example\n * ```typescript\n * const model = new ChatOpenAI({ temperature: 0 });\n * const combineDocsChain = loadSummarizationChain(model);\n * const chain = new AnalyzeDocumentChain({\n *   combineDocumentsChain: combineDocsChain,\n * });\n *\n * // Read the text from a file (this is a placeholder for actual file reading)\n * const text = readTextFromFile(\"state_of_the_union.txt\");\n *\n * // Invoke the chain to analyze the document\n * const res = await chain.call({\n *   input_document: text,\n * });\n *\n * console.log({ res });\n * ```\n */\nexport class AnalyzeDocumentChain extends BaseChain {\n    static lc_name() {\n        return \"AnalyzeDocumentChain\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input_document\"\n        });\n        Object.defineProperty(this, \"combineDocumentsChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"textSplitter\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.combineDocumentsChain = fields.combineDocumentsChain;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.textSplitter =\n            fields.textSplitter ?? new RecursiveCharacterTextSplitter();\n    }\n    get inputKeys() {\n        return [this.inputKey];\n    }\n    get outputKeys() {\n        return this.combineDocumentsChain.outputKeys;\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Document key ${this.inputKey} not found.`);\n        }\n        const { [this.inputKey]: doc, ...rest } = values;\n        const currentDoc = doc;\n        const currentDocs = await this.textSplitter.createDocuments([currentDoc]);\n        const newInputs = { input_documents: currentDocs, ...rest };\n        const result = await this.combineDocumentsChain.call(newInputs, runManager?.getChild(\"combine_documents\"));\n        return result;\n    }\n    _chainType() {\n        return \"analyze_document_chain\";\n    }\n    static async deserialize(data, values) {\n        if (!(\"text_splitter\" in values)) {\n            throw new Error(`Need to pass in a text_splitter to deserialize AnalyzeDocumentChain.`);\n        }\n        const { text_splitter } = values;\n        if (!data.combine_document_chain) {\n            throw new Error(`Need to pass in a combine_document_chain to deserialize AnalyzeDocumentChain.`);\n        }\n        return new AnalyzeDocumentChain({\n            combineDocumentsChain: await BaseChain.deserialize(data.combine_document_chain),\n            textSplitter: text_splitter,\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            combine_document_chain: this.combineDocumentsChain.serialize(),\n        };\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}