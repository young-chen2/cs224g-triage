{"ast":null,"code":"/**\n * Abstract class that defines the interface for selecting a prompt for a\n * given language model.\n */\nexport class BasePromptSelector {\n  /**\n   * Asynchronous version of `getPrompt` that also accepts an options object\n   * for partial variables.\n   * @param llm The language model for which to get a prompt.\n   * @param options Optional object for partial variables.\n   * @returns A Promise that resolves to a prompt template.\n   */\n  async getPromptAsync(llm, options) {\n    const prompt = this.getPrompt(llm);\n    return prompt.partial(options?.partialVariables ?? {});\n  }\n}\n/**\n * Concrete implementation of `BasePromptSelector` that selects a prompt\n * based on a set of conditions. It has a default prompt that it returns\n * if none of the conditions are met.\n */\nexport class ConditionalPromptSelector extends BasePromptSelector {\n  constructor(default_prompt, conditionals = []) {\n    super();\n    Object.defineProperty(this, \"defaultPrompt\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"conditionals\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.defaultPrompt = default_prompt;\n    this.conditionals = conditionals;\n  }\n  /**\n   * Method that selects a prompt based on a set of conditions. If none of\n   * the conditions are met, it returns the default prompt.\n   * @param llm The language model for which to get a prompt.\n   * @returns A prompt template.\n   */\n  getPrompt(llm) {\n    for (const [condition, prompt] of this.conditionals) {\n      if (condition(llm)) {\n        return prompt;\n      }\n    }\n    return this.defaultPrompt;\n  }\n}\n/**\n * Type guard function that checks if a given language model is of type\n * `BaseLLM`.\n */\nexport function isLLM(llm) {\n  return llm._modelType() === \"base_llm\";\n}\n/**\n * Type guard function that checks if a given language model is of type\n * `BaseChatModel`.\n */\nexport function isChatModel(llm) {\n  return llm._modelType() === \"base_chat_model\";\n}","map":{"version":3,"names":["BasePromptSelector","getPromptAsync","llm","options","prompt","getPrompt","partial","partialVariables","ConditionalPromptSelector","constructor","default_prompt","conditionals","Object","defineProperty","enumerable","configurable","writable","value","defaultPrompt","condition","isLLM","_modelType","isChatModel"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/@langchain/core/dist/example_selectors/conditional.js"],"sourcesContent":["/**\n * Abstract class that defines the interface for selecting a prompt for a\n * given language model.\n */\nexport class BasePromptSelector {\n    /**\n     * Asynchronous version of `getPrompt` that also accepts an options object\n     * for partial variables.\n     * @param llm The language model for which to get a prompt.\n     * @param options Optional object for partial variables.\n     * @returns A Promise that resolves to a prompt template.\n     */\n    async getPromptAsync(llm, options) {\n        const prompt = this.getPrompt(llm);\n        return prompt.partial(options?.partialVariables ?? {});\n    }\n}\n/**\n * Concrete implementation of `BasePromptSelector` that selects a prompt\n * based on a set of conditions. It has a default prompt that it returns\n * if none of the conditions are met.\n */\nexport class ConditionalPromptSelector extends BasePromptSelector {\n    constructor(default_prompt, conditionals = []) {\n        super();\n        Object.defineProperty(this, \"defaultPrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"conditionals\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.defaultPrompt = default_prompt;\n        this.conditionals = conditionals;\n    }\n    /**\n     * Method that selects a prompt based on a set of conditions. If none of\n     * the conditions are met, it returns the default prompt.\n     * @param llm The language model for which to get a prompt.\n     * @returns A prompt template.\n     */\n    getPrompt(llm) {\n        for (const [condition, prompt] of this.conditionals) {\n            if (condition(llm)) {\n                return prompt;\n            }\n        }\n        return this.defaultPrompt;\n    }\n}\n/**\n * Type guard function that checks if a given language model is of type\n * `BaseLLM`.\n */\nexport function isLLM(llm) {\n    return llm._modelType() === \"base_llm\";\n}\n/**\n * Type guard function that checks if a given language model is of type\n * `BaseChatModel`.\n */\nexport function isChatModel(llm) {\n    return llm._modelType() === \"base_chat_model\";\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,kBAAkB,CAAC;EAC5B;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,cAAcA,CAACC,GAAG,EAAEC,OAAO,EAAE;IAC/B,MAAMC,MAAM,GAAG,IAAI,CAACC,SAAS,CAACH,GAAG,CAAC;IAClC,OAAOE,MAAM,CAACE,OAAO,CAACH,OAAO,EAAEI,gBAAgB,IAAI,CAAC,CAAC,CAAC;EAC1D;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,yBAAyB,SAASR,kBAAkB,CAAC;EAC9DS,WAAWA,CAACC,cAAc,EAAEC,YAAY,GAAG,EAAE,EAAE;IAC3C,KAAK,CAAC,CAAC;IACPC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,eAAe,EAAE;MACzCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,cAAc,EAAE;MACxCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACF,IAAI,CAACC,aAAa,GAAGR,cAAc;IACnC,IAAI,CAACC,YAAY,GAAGA,YAAY;EACpC;EACA;AACJ;AACA;AACA;AACA;AACA;EACIN,SAASA,CAACH,GAAG,EAAE;IACX,KAAK,MAAM,CAACiB,SAAS,EAAEf,MAAM,CAAC,IAAI,IAAI,CAACO,YAAY,EAAE;MACjD,IAAIQ,SAAS,CAACjB,GAAG,CAAC,EAAE;QAChB,OAAOE,MAAM;MACjB;IACJ;IACA,OAAO,IAAI,CAACc,aAAa;EAC7B;AACJ;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,KAAKA,CAAClB,GAAG,EAAE;EACvB,OAAOA,GAAG,CAACmB,UAAU,CAAC,CAAC,KAAK,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACpB,GAAG,EAAE;EAC7B,OAAOA,GAAG,CAACmB,UAAU,CAAC,CAAC,KAAK,iBAAiB;AACjD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}