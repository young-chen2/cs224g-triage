{"ast":null,"code":"import { ZodFirstPartyTypeKind } from 'zod';\nimport { parseDef } from \"../parseDef.mjs\";\nimport { parseStringDef } from \"./string.mjs\";\nexport function parseRecordDef(def, refs) {\n  if (refs.target === 'openApi3' && def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodEnum) {\n    return {\n      type: 'object',\n      required: def.keyType._def.values,\n      properties: def.keyType._def.values.reduce((acc, key) => ({\n        ...acc,\n        [key]: parseDef(def.valueType._def, {\n          ...refs,\n          currentPath: [...refs.currentPath, 'properties', key]\n        }) ?? {}\n      }), {}),\n      additionalProperties: false\n    };\n  }\n  const schema = {\n    type: 'object',\n    additionalProperties: parseDef(def.valueType._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, 'additionalProperties']\n    }) ?? {}\n  };\n  if (refs.target === 'openApi3') {\n    return schema;\n  }\n  if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodString && def.keyType._def.checks?.length) {\n    const keyType = Object.entries(parseStringDef(def.keyType._def, refs)).reduce((acc, [key, value]) => key === 'type' ? acc : {\n      ...acc,\n      [key]: value\n    }, {});\n    return {\n      ...schema,\n      propertyNames: keyType\n    };\n  } else if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodEnum) {\n    return {\n      ...schema,\n      propertyNames: {\n        enum: def.keyType._def.values\n      }\n    };\n  }\n  return schema;\n}","map":{"version":3,"names":["ZodFirstPartyTypeKind","parseDef","parseStringDef","parseRecordDef","def","refs","target","keyType","_def","typeName","ZodEnum","type","required","values","properties","reduce","acc","key","valueType","currentPath","additionalProperties","schema","ZodString","checks","length","Object","entries","value","propertyNames","enum"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/openai/src/_vendor/zod-to-json-schema/parsers/record.ts"],"sourcesContent":["import { ZodFirstPartyTypeKind, ZodMapDef, ZodRecordDef, ZodTypeAny } from 'zod';\nimport { JsonSchema7Type, parseDef } from '../parseDef';\nimport { Refs } from '../Refs';\nimport { JsonSchema7EnumType } from './enum';\nimport { JsonSchema7ObjectType } from './object';\nimport { JsonSchema7StringType, parseStringDef } from './string';\n\ntype JsonSchema7RecordPropertyNamesType =\n  | Omit<JsonSchema7StringType, 'type'>\n  | Omit<JsonSchema7EnumType, 'type'>;\n\nexport type JsonSchema7RecordType = {\n  type: 'object';\n  additionalProperties: JsonSchema7Type;\n  propertyNames?: JsonSchema7RecordPropertyNamesType;\n};\n\nexport function parseRecordDef(\n  def: ZodRecordDef<ZodTypeAny, ZodTypeAny> | ZodMapDef,\n  refs: Refs,\n): JsonSchema7RecordType {\n  if (refs.target === 'openApi3' && def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodEnum) {\n    return {\n      type: 'object',\n      required: def.keyType._def.values,\n      properties: def.keyType._def.values.reduce(\n        (acc: Record<string, JsonSchema7Type>, key: string) => ({\n          ...acc,\n          [key]:\n            parseDef(def.valueType._def, {\n              ...refs,\n              currentPath: [...refs.currentPath, 'properties', key],\n            }) ?? {},\n        }),\n        {},\n      ),\n      additionalProperties: false,\n    } satisfies JsonSchema7ObjectType as any;\n  }\n\n  const schema: JsonSchema7RecordType = {\n    type: 'object',\n    additionalProperties:\n      parseDef(def.valueType._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, 'additionalProperties'],\n      }) ?? {},\n  };\n\n  if (refs.target === 'openApi3') {\n    return schema;\n  }\n\n  if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodString && def.keyType._def.checks?.length) {\n    const keyType: JsonSchema7RecordPropertyNamesType = Object.entries(\n      parseStringDef(def.keyType._def, refs),\n    ).reduce((acc, [key, value]) => (key === 'type' ? acc : { ...acc, [key]: value }), {});\n\n    return {\n      ...schema,\n      propertyNames: keyType,\n    };\n  } else if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodEnum) {\n    return {\n      ...schema,\n      propertyNames: {\n        enum: def.keyType._def.values,\n      },\n    };\n  }\n\n  return schema;\n}\n"],"mappings":"SAASA,qBAAqB,QAA6C,KAAK;SACtDC,QAAQ,QAAE;SAIJC,cAAc,QAAE;AAYhD,OAAM,SAAUC,cAAcA,CAC5BC,GAAqD,EACrDC,IAAU;EAEV,IAAIA,IAAI,CAACC,MAAM,KAAK,UAAU,IAAIF,GAAG,CAACG,OAAO,EAAEC,IAAI,CAACC,QAAQ,KAAKT,qBAAqB,CAACU,OAAO,EAAE;IAC9F,OAAO;MACLC,IAAI,EAAE,QAAQ;MACdC,QAAQ,EAAER,GAAG,CAACG,OAAO,CAACC,IAAI,CAACK,MAAM;MACjCC,UAAU,EAAEV,GAAG,CAACG,OAAO,CAACC,IAAI,CAACK,MAAM,CAACE,MAAM,CACxC,CAACC,GAAoC,EAAEC,GAAW,MAAM;QACtD,GAAGD,GAAG;QACN,CAACC,GAAG,GACFhB,QAAQ,CAACG,GAAG,CAACc,SAAS,CAACV,IAAI,EAAE;UAC3B,GAAGH,IAAI;UACPc,WAAW,EAAE,CAAC,GAAGd,IAAI,CAACc,WAAW,EAAE,YAAY,EAAEF,GAAG;SACrD,CAAC,IAAI;OACT,CAAC,EACF,EAAE,CACH;MACDG,oBAAoB,EAAE;KACgB;;EAG1C,MAAMC,MAAM,GAA0B;IACpCV,IAAI,EAAE,QAAQ;IACdS,oBAAoB,EAClBnB,QAAQ,CAACG,GAAG,CAACc,SAAS,CAACV,IAAI,EAAE;MAC3B,GAAGH,IAAI;MACPc,WAAW,EAAE,CAAC,GAAGd,IAAI,CAACc,WAAW,EAAE,sBAAsB;KAC1D,CAAC,IAAI;GACT;EAED,IAAId,IAAI,CAACC,MAAM,KAAK,UAAU,EAAE;IAC9B,OAAOe,MAAM;;EAGf,IAAIjB,GAAG,CAACG,OAAO,EAAEC,IAAI,CAACC,QAAQ,KAAKT,qBAAqB,CAACsB,SAAS,IAAIlB,GAAG,CAACG,OAAO,CAACC,IAAI,CAACe,MAAM,EAAEC,MAAM,EAAE;IACrG,MAAMjB,OAAO,GAAuCkB,MAAM,CAACC,OAAO,CAChExB,cAAc,CAACE,GAAG,CAACG,OAAO,CAACC,IAAI,EAAEH,IAAI,CAAC,CACvC,CAACU,MAAM,CAAC,CAACC,GAAG,EAAE,CAACC,GAAG,EAAEU,KAAK,CAAC,KAAMV,GAAG,KAAK,MAAM,GAAGD,GAAG,GAAG;MAAE,GAAGA,GAAG;MAAE,CAACC,GAAG,GAAGU;IAAK,CAAG,EAAE,EAAE,CAAC;IAEtF,OAAO;MACL,GAAGN,MAAM;MACTO,aAAa,EAAErB;KAChB;GACF,MAAM,IAAIH,GAAG,CAACG,OAAO,EAAEC,IAAI,CAACC,QAAQ,KAAKT,qBAAqB,CAACU,OAAO,EAAE;IACvE,OAAO;MACL,GAAGW,MAAM;MACTO,aAAa,EAAE;QACbC,IAAI,EAAEzB,GAAG,CAACG,OAAO,CAACC,IAAI,CAACK;;KAE1B;;EAGH,OAAOQ,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}