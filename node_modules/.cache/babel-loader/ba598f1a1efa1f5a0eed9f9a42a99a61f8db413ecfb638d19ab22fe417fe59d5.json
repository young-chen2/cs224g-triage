{"ast":null,"code":"import { keyToJson, mapKeys } from \"./map_keys.js\";\nfunction shallowCopy(obj) {\n  return Array.isArray(obj) ? [...obj] : {\n    ...obj\n  };\n}\nfunction replaceSecrets(root, secretsMap) {\n  const result = shallowCopy(root);\n  for (const [path, secretId] of Object.entries(secretsMap)) {\n    const [last, ...partsReverse] = path.split(\".\").reverse();\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let current = result;\n    for (const part of partsReverse.reverse()) {\n      if (current[part] === undefined) {\n        break;\n      }\n      current[part] = shallowCopy(current[part]);\n      current = current[part];\n    }\n    if (current[last] !== undefined) {\n      current[last] = {\n        lc: 1,\n        type: \"secret\",\n        id: [secretId]\n      };\n    }\n  }\n  return result;\n}\n/**\n * Get a unique name for the module, rather than parent class implementations.\n * Should not be subclassed, subclass lc_name above instead.\n */\nexport function get_lc_unique_name(\n// eslint-disable-next-line @typescript-eslint/no-use-before-define\nserializableClass) {\n  // \"super\" here would refer to the parent class of Serializable,\n  // when we want the parent class of the module actually calling this method.\n  const parentClass = Object.getPrototypeOf(serializableClass);\n  const lcNameIsSubclassed = typeof serializableClass.lc_name === \"function\" && (typeof parentClass.lc_name !== \"function\" || serializableClass.lc_name() !== parentClass.lc_name());\n  if (lcNameIsSubclassed) {\n    return serializableClass.lc_name();\n  } else {\n    return serializableClass.name;\n  }\n}\nexport class Serializable {\n  /**\n   * The name of the serializable. Override to provide an alias or\n   * to preserve the serialized module name in minified environments.\n   *\n   * Implemented as a static method to support loading logic.\n   */\n  static lc_name() {\n    return this.name;\n  }\n  /**\n   * The final serialized identifier for the module.\n   */\n  get lc_id() {\n    return [...this.lc_namespace, get_lc_unique_name(this.constructor)];\n  }\n  /**\n   * A map of secrets, which will be omitted from serialization.\n   * Keys are paths to the secret in constructor args, e.g. \"foo.bar.baz\".\n   * Values are the secret ids, which will be used when deserializing.\n   */\n  get lc_secrets() {\n    return undefined;\n  }\n  /**\n   * A map of additional attributes to merge with constructor args.\n   * Keys are the attribute names, e.g. \"foo\".\n   * Values are the attribute values, which will be serialized.\n   * These attributes need to be accepted by the constructor as arguments.\n   */\n  get lc_attributes() {\n    return undefined;\n  }\n  /**\n   * A map of aliases for constructor args.\n   * Keys are the attribute names, e.g. \"foo\".\n   * Values are the alias that will replace the key in serialization.\n   * This is used to eg. make argument names match Python.\n   */\n  get lc_aliases() {\n    return undefined;\n  }\n  constructor(kwargs, ..._args) {\n    Object.defineProperty(this, \"lc_serializable\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"lc_kwargs\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.lc_kwargs = kwargs || {};\n  }\n  toJSON() {\n    if (!this.lc_serializable) {\n      return this.toJSONNotImplemented();\n    }\n    if (\n    // eslint-disable-next-line no-instanceof/no-instanceof\n    this.lc_kwargs instanceof Serializable || typeof this.lc_kwargs !== \"object\" || Array.isArray(this.lc_kwargs)) {\n      // We do not support serialization of classes with arg not a POJO\n      // I'm aware the check above isn't as strict as it could be\n      return this.toJSONNotImplemented();\n    }\n    const aliases = {};\n    const secrets = {};\n    const kwargs = Object.keys(this.lc_kwargs).reduce((acc, key) => {\n      acc[key] = key in this ? this[key] : this.lc_kwargs[key];\n      return acc;\n    }, {});\n    // get secrets, attributes and aliases from all superclasses\n    for (\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let current = Object.getPrototypeOf(this); current; current = Object.getPrototypeOf(current)) {\n      Object.assign(aliases, Reflect.get(current, \"lc_aliases\", this));\n      Object.assign(secrets, Reflect.get(current, \"lc_secrets\", this));\n      Object.assign(kwargs, Reflect.get(current, \"lc_attributes\", this));\n    }\n    // include all secrets used, even if not in kwargs,\n    // will be replaced with sentinel value in replaceSecrets\n    Object.keys(secrets).forEach(keyPath => {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias, @typescript-eslint/no-explicit-any\n      let read = this;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      let write = kwargs;\n      const [last, ...partsReverse] = keyPath.split(\".\").reverse();\n      for (const key of partsReverse.reverse()) {\n        if (!(key in read) || read[key] === undefined) return;\n        if (!(key in write) || write[key] === undefined) {\n          if (typeof read[key] === \"object\" && read[key] != null) {\n            write[key] = {};\n          } else if (Array.isArray(read[key])) {\n            write[key] = [];\n          }\n        }\n        read = read[key];\n        write = write[key];\n      }\n      if (last in read && read[last] !== undefined) {\n        write[last] = write[last] || read[last];\n      }\n    });\n    return {\n      lc: 1,\n      type: \"constructor\",\n      id: this.lc_id,\n      kwargs: mapKeys(Object.keys(secrets).length ? replaceSecrets(kwargs, secrets) : kwargs, keyToJson, aliases)\n    };\n  }\n  toJSONNotImplemented() {\n    return {\n      lc: 1,\n      type: \"not_implemented\",\n      id: this.lc_id\n    };\n  }\n}","map":{"version":3,"names":["keyToJson","mapKeys","shallowCopy","obj","Array","isArray","replaceSecrets","root","secretsMap","result","path","secretId","Object","entries","last","partsReverse","split","reverse","current","part","undefined","lc","type","id","get_lc_unique_name","serializableClass","parentClass","getPrototypeOf","lcNameIsSubclassed","lc_name","name","Serializable","lc_id","lc_namespace","constructor","lc_secrets","lc_attributes","lc_aliases","kwargs","_args","defineProperty","enumerable","configurable","writable","value","lc_kwargs","toJSON","lc_serializable","toJSONNotImplemented","aliases","secrets","keys","reduce","acc","key","assign","Reflect","get","forEach","keyPath","read","write","length"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/@langchain/core/dist/load/serializable.js"],"sourcesContent":["import { keyToJson, mapKeys } from \"./map_keys.js\";\nfunction shallowCopy(obj) {\n    return Array.isArray(obj) ? [...obj] : { ...obj };\n}\nfunction replaceSecrets(root, secretsMap) {\n    const result = shallowCopy(root);\n    for (const [path, secretId] of Object.entries(secretsMap)) {\n        const [last, ...partsReverse] = path.split(\".\").reverse();\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let current = result;\n        for (const part of partsReverse.reverse()) {\n            if (current[part] === undefined) {\n                break;\n            }\n            current[part] = shallowCopy(current[part]);\n            current = current[part];\n        }\n        if (current[last] !== undefined) {\n            current[last] = {\n                lc: 1,\n                type: \"secret\",\n                id: [secretId],\n            };\n        }\n    }\n    return result;\n}\n/**\n * Get a unique name for the module, rather than parent class implementations.\n * Should not be subclassed, subclass lc_name above instead.\n */\nexport function get_lc_unique_name(\n// eslint-disable-next-line @typescript-eslint/no-use-before-define\nserializableClass) {\n    // \"super\" here would refer to the parent class of Serializable,\n    // when we want the parent class of the module actually calling this method.\n    const parentClass = Object.getPrototypeOf(serializableClass);\n    const lcNameIsSubclassed = typeof serializableClass.lc_name === \"function\" &&\n        (typeof parentClass.lc_name !== \"function\" ||\n            serializableClass.lc_name() !== parentClass.lc_name());\n    if (lcNameIsSubclassed) {\n        return serializableClass.lc_name();\n    }\n    else {\n        return serializableClass.name;\n    }\n}\nexport class Serializable {\n    /**\n     * The name of the serializable. Override to provide an alias or\n     * to preserve the serialized module name in minified environments.\n     *\n     * Implemented as a static method to support loading logic.\n     */\n    static lc_name() {\n        return this.name;\n    }\n    /**\n     * The final serialized identifier for the module.\n     */\n    get lc_id() {\n        return [\n            ...this.lc_namespace,\n            get_lc_unique_name(this.constructor),\n        ];\n    }\n    /**\n     * A map of secrets, which will be omitted from serialization.\n     * Keys are paths to the secret in constructor args, e.g. \"foo.bar.baz\".\n     * Values are the secret ids, which will be used when deserializing.\n     */\n    get lc_secrets() {\n        return undefined;\n    }\n    /**\n     * A map of additional attributes to merge with constructor args.\n     * Keys are the attribute names, e.g. \"foo\".\n     * Values are the attribute values, which will be serialized.\n     * These attributes need to be accepted by the constructor as arguments.\n     */\n    get lc_attributes() {\n        return undefined;\n    }\n    /**\n     * A map of aliases for constructor args.\n     * Keys are the attribute names, e.g. \"foo\".\n     * Values are the alias that will replace the key in serialization.\n     * This is used to eg. make argument names match Python.\n     */\n    get lc_aliases() {\n        return undefined;\n    }\n    constructor(kwargs, ..._args) {\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.lc_kwargs = kwargs || {};\n    }\n    toJSON() {\n        if (!this.lc_serializable) {\n            return this.toJSONNotImplemented();\n        }\n        if (\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        this.lc_kwargs instanceof Serializable ||\n            typeof this.lc_kwargs !== \"object\" ||\n            Array.isArray(this.lc_kwargs)) {\n            // We do not support serialization of classes with arg not a POJO\n            // I'm aware the check above isn't as strict as it could be\n            return this.toJSONNotImplemented();\n        }\n        const aliases = {};\n        const secrets = {};\n        const kwargs = Object.keys(this.lc_kwargs).reduce((acc, key) => {\n            acc[key] = key in this ? this[key] : this.lc_kwargs[key];\n            return acc;\n        }, {});\n        // get secrets, attributes and aliases from all superclasses\n        for (\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let current = Object.getPrototypeOf(this); current; current = Object.getPrototypeOf(current)) {\n            Object.assign(aliases, Reflect.get(current, \"lc_aliases\", this));\n            Object.assign(secrets, Reflect.get(current, \"lc_secrets\", this));\n            Object.assign(kwargs, Reflect.get(current, \"lc_attributes\", this));\n        }\n        // include all secrets used, even if not in kwargs,\n        // will be replaced with sentinel value in replaceSecrets\n        Object.keys(secrets).forEach((keyPath) => {\n            // eslint-disable-next-line @typescript-eslint/no-this-alias, @typescript-eslint/no-explicit-any\n            let read = this;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            let write = kwargs;\n            const [last, ...partsReverse] = keyPath.split(\".\").reverse();\n            for (const key of partsReverse.reverse()) {\n                if (!(key in read) || read[key] === undefined)\n                    return;\n                if (!(key in write) || write[key] === undefined) {\n                    if (typeof read[key] === \"object\" && read[key] != null) {\n                        write[key] = {};\n                    }\n                    else if (Array.isArray(read[key])) {\n                        write[key] = [];\n                    }\n                }\n                read = read[key];\n                write = write[key];\n            }\n            if (last in read && read[last] !== undefined) {\n                write[last] = write[last] || read[last];\n            }\n        });\n        return {\n            lc: 1,\n            type: \"constructor\",\n            id: this.lc_id,\n            kwargs: mapKeys(Object.keys(secrets).length ? replaceSecrets(kwargs, secrets) : kwargs, keyToJson, aliases),\n        };\n    }\n    toJSONNotImplemented() {\n        return {\n            lc: 1,\n            type: \"not_implemented\",\n            id: this.lc_id,\n        };\n    }\n}\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,OAAO,QAAQ,eAAe;AAClD,SAASC,WAAWA,CAACC,GAAG,EAAE;EACtB,OAAOC,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,GAAG,CAAC,GAAGA,GAAG,CAAC,GAAG;IAAE,GAAGA;EAAI,CAAC;AACrD;AACA,SAASG,cAAcA,CAACC,IAAI,EAAEC,UAAU,EAAE;EACtC,MAAMC,MAAM,GAAGP,WAAW,CAACK,IAAI,CAAC;EAChC,KAAK,MAAM,CAACG,IAAI,EAAEC,QAAQ,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACL,UAAU,CAAC,EAAE;IACvD,MAAM,CAACM,IAAI,EAAE,GAAGC,YAAY,CAAC,GAAGL,IAAI,CAACM,KAAK,CAAC,GAAG,CAAC,CAACC,OAAO,CAAC,CAAC;IACzD;IACA,IAAIC,OAAO,GAAGT,MAAM;IACpB,KAAK,MAAMU,IAAI,IAAIJ,YAAY,CAACE,OAAO,CAAC,CAAC,EAAE;MACvC,IAAIC,OAAO,CAACC,IAAI,CAAC,KAAKC,SAAS,EAAE;QAC7B;MACJ;MACAF,OAAO,CAACC,IAAI,CAAC,GAAGjB,WAAW,CAACgB,OAAO,CAACC,IAAI,CAAC,CAAC;MAC1CD,OAAO,GAAGA,OAAO,CAACC,IAAI,CAAC;IAC3B;IACA,IAAID,OAAO,CAACJ,IAAI,CAAC,KAAKM,SAAS,EAAE;MAC7BF,OAAO,CAACJ,IAAI,CAAC,GAAG;QACZO,EAAE,EAAE,CAAC;QACLC,IAAI,EAAE,QAAQ;QACdC,EAAE,EAAE,CAACZ,QAAQ;MACjB,CAAC;IACL;EACJ;EACA,OAAOF,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA,OAAO,SAASe,kBAAkBA;AAClC;AACAC,iBAAiB,EAAE;EACf;EACA;EACA,MAAMC,WAAW,GAAGd,MAAM,CAACe,cAAc,CAACF,iBAAiB,CAAC;EAC5D,MAAMG,kBAAkB,GAAG,OAAOH,iBAAiB,CAACI,OAAO,KAAK,UAAU,KACrE,OAAOH,WAAW,CAACG,OAAO,KAAK,UAAU,IACtCJ,iBAAiB,CAACI,OAAO,CAAC,CAAC,KAAKH,WAAW,CAACG,OAAO,CAAC,CAAC,CAAC;EAC9D,IAAID,kBAAkB,EAAE;IACpB,OAAOH,iBAAiB,CAACI,OAAO,CAAC,CAAC;EACtC,CAAC,MACI;IACD,OAAOJ,iBAAiB,CAACK,IAAI;EACjC;AACJ;AACA,OAAO,MAAMC,YAAY,CAAC;EACtB;AACJ;AACA;AACA;AACA;AACA;EACI,OAAOF,OAAOA,CAAA,EAAG;IACb,OAAO,IAAI,CAACC,IAAI;EACpB;EACA;AACJ;AACA;EACI,IAAIE,KAAKA,CAAA,EAAG;IACR,OAAO,CACH,GAAG,IAAI,CAACC,YAAY,EACpBT,kBAAkB,CAAC,IAAI,CAACU,WAAW,CAAC,CACvC;EACL;EACA;AACJ;AACA;AACA;AACA;EACI,IAAIC,UAAUA,CAAA,EAAG;IACb,OAAOf,SAAS;EACpB;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,IAAIgB,aAAaA,CAAA,EAAG;IAChB,OAAOhB,SAAS;EACpB;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,IAAIiB,UAAUA,CAAA,EAAG;IACb,OAAOjB,SAAS;EACpB;EACAc,WAAWA,CAACI,MAAM,EAAE,GAAGC,KAAK,EAAE;IAC1B3B,MAAM,CAAC4B,cAAc,CAAC,IAAI,EAAE,iBAAiB,EAAE;MAC3CC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE;IACX,CAAC,CAAC;IACFhC,MAAM,CAAC4B,cAAc,CAAC,IAAI,EAAE,WAAW,EAAE;MACrCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACF,IAAI,CAACC,SAAS,GAAGP,MAAM,IAAI,CAAC,CAAC;EACjC;EACAQ,MAAMA,CAAA,EAAG;IACL,IAAI,CAAC,IAAI,CAACC,eAAe,EAAE;MACvB,OAAO,IAAI,CAACC,oBAAoB,CAAC,CAAC;IACtC;IACA;IACA;IACA,IAAI,CAACH,SAAS,YAAYd,YAAY,IAClC,OAAO,IAAI,CAACc,SAAS,KAAK,QAAQ,IAClCzC,KAAK,CAACC,OAAO,CAAC,IAAI,CAACwC,SAAS,CAAC,EAAE;MAC/B;MACA;MACA,OAAO,IAAI,CAACG,oBAAoB,CAAC,CAAC;IACtC;IACA,MAAMC,OAAO,GAAG,CAAC,CAAC;IAClB,MAAMC,OAAO,GAAG,CAAC,CAAC;IAClB,MAAMZ,MAAM,GAAG1B,MAAM,CAACuC,IAAI,CAAC,IAAI,CAACN,SAAS,CAAC,CAACO,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;MAC5DD,GAAG,CAACC,GAAG,CAAC,GAAGA,GAAG,IAAI,IAAI,GAAG,IAAI,CAACA,GAAG,CAAC,GAAG,IAAI,CAACT,SAAS,CAACS,GAAG,CAAC;MACxD,OAAOD,GAAG;IACd,CAAC,EAAE,CAAC,CAAC,CAAC;IACN;IACA;IACA;IACA,IAAInC,OAAO,GAAGN,MAAM,CAACe,cAAc,CAAC,IAAI,CAAC,EAAET,OAAO,EAAEA,OAAO,GAAGN,MAAM,CAACe,cAAc,CAACT,OAAO,CAAC,EAAE;MAC1FN,MAAM,CAAC2C,MAAM,CAACN,OAAO,EAAEO,OAAO,CAACC,GAAG,CAACvC,OAAO,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;MAChEN,MAAM,CAAC2C,MAAM,CAACL,OAAO,EAAEM,OAAO,CAACC,GAAG,CAACvC,OAAO,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;MAChEN,MAAM,CAAC2C,MAAM,CAACjB,MAAM,EAAEkB,OAAO,CAACC,GAAG,CAACvC,OAAO,EAAE,eAAe,EAAE,IAAI,CAAC,CAAC;IACtE;IACA;IACA;IACAN,MAAM,CAACuC,IAAI,CAACD,OAAO,CAAC,CAACQ,OAAO,CAAEC,OAAO,IAAK;MACtC;MACA,IAAIC,IAAI,GAAG,IAAI;MACf;MACA,IAAIC,KAAK,GAAGvB,MAAM;MAClB,MAAM,CAACxB,IAAI,EAAE,GAAGC,YAAY,CAAC,GAAG4C,OAAO,CAAC3C,KAAK,CAAC,GAAG,CAAC,CAACC,OAAO,CAAC,CAAC;MAC5D,KAAK,MAAMqC,GAAG,IAAIvC,YAAY,CAACE,OAAO,CAAC,CAAC,EAAE;QACtC,IAAI,EAAEqC,GAAG,IAAIM,IAAI,CAAC,IAAIA,IAAI,CAACN,GAAG,CAAC,KAAKlC,SAAS,EACzC;QACJ,IAAI,EAAEkC,GAAG,IAAIO,KAAK,CAAC,IAAIA,KAAK,CAACP,GAAG,CAAC,KAAKlC,SAAS,EAAE;UAC7C,IAAI,OAAOwC,IAAI,CAACN,GAAG,CAAC,KAAK,QAAQ,IAAIM,IAAI,CAACN,GAAG,CAAC,IAAI,IAAI,EAAE;YACpDO,KAAK,CAACP,GAAG,CAAC,GAAG,CAAC,CAAC;UACnB,CAAC,MACI,IAAIlD,KAAK,CAACC,OAAO,CAACuD,IAAI,CAACN,GAAG,CAAC,CAAC,EAAE;YAC/BO,KAAK,CAACP,GAAG,CAAC,GAAG,EAAE;UACnB;QACJ;QACAM,IAAI,GAAGA,IAAI,CAACN,GAAG,CAAC;QAChBO,KAAK,GAAGA,KAAK,CAACP,GAAG,CAAC;MACtB;MACA,IAAIxC,IAAI,IAAI8C,IAAI,IAAIA,IAAI,CAAC9C,IAAI,CAAC,KAAKM,SAAS,EAAE;QAC1CyC,KAAK,CAAC/C,IAAI,CAAC,GAAG+C,KAAK,CAAC/C,IAAI,CAAC,IAAI8C,IAAI,CAAC9C,IAAI,CAAC;MAC3C;IACJ,CAAC,CAAC;IACF,OAAO;MACHO,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,aAAa;MACnBC,EAAE,EAAE,IAAI,CAACS,KAAK;MACdM,MAAM,EAAErC,OAAO,CAACW,MAAM,CAACuC,IAAI,CAACD,OAAO,CAAC,CAACY,MAAM,GAAGxD,cAAc,CAACgC,MAAM,EAAEY,OAAO,CAAC,GAAGZ,MAAM,EAAEtC,SAAS,EAAEiD,OAAO;IAC9G,CAAC;EACL;EACAD,oBAAoBA,CAAA,EAAG;IACnB,OAAO;MACH3B,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,iBAAiB;MACvBC,EAAE,EAAE,IAAI,CAACS;IACb,CAAC;EACL;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}