{"ast":null,"code":"import { Runnable } from \"./base.js\";\nimport { ensureConfig } from \"./config.js\";\n/**\n * A runnable that routes to a set of runnables based on Input['key'].\n * Returns the output of the selected runnable.\n * @example\n * ```typescript\n * import { RouterRunnable, RunnableLambda } from \"@langchain/core/runnables\";\n *\n * const router = new RouterRunnable({\n *   runnables: {\n *     toUpperCase: RunnableLambda.from((text: string) => text.toUpperCase()),\n *     reverseText: RunnableLambda.from((text: string) =>\n *       text.split(\"\").reverse().join(\"\")\n *     ),\n *   },\n * });\n *\n * // Invoke the 'reverseText' runnable\n * const result1 = router.invoke({ key: \"reverseText\", input: \"Hello World\" });\n *\n * // \"dlroW olleH\"\n *\n * // Invoke the 'toUpperCase' runnable\n * const result2 = router.invoke({ key: \"toUpperCase\", input: \"Hello World\" });\n *\n * // \"HELLO WORLD\"\n * ```\n */\nexport class RouterRunnable extends Runnable {\n  static lc_name() {\n    return \"RouterRunnable\";\n  }\n  constructor(fields) {\n    super(fields);\n    Object.defineProperty(this, \"lc_namespace\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [\"langchain_core\", \"runnables\"]\n    });\n    Object.defineProperty(this, \"lc_serializable\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.defineProperty(this, \"runnables\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.runnables = fields.runnables;\n  }\n  async invoke(input, options) {\n    const {\n      key,\n      input: actualInput\n    } = input;\n    const runnable = this.runnables[key];\n    if (runnable === undefined) {\n      throw new Error(`No runnable associated with key \"${key}\".`);\n    }\n    return runnable.invoke(actualInput, ensureConfig(options));\n  }\n  async batch(inputs, options, batchOptions) {\n    const keys = inputs.map(input => input.key);\n    const actualInputs = inputs.map(input => input.input);\n    const missingKey = keys.find(key => this.runnables[key] === undefined);\n    if (missingKey !== undefined) {\n      throw new Error(`One or more keys do not have a corresponding runnable.`);\n    }\n    const runnables = keys.map(key => this.runnables[key]);\n    const optionsList = this._getOptionsList(options ?? {}, inputs.length);\n    const maxConcurrency = optionsList[0]?.maxConcurrency ?? batchOptions?.maxConcurrency;\n    const batchSize = maxConcurrency && maxConcurrency > 0 ? maxConcurrency : inputs.length;\n    const batchResults = [];\n    for (let i = 0; i < actualInputs.length; i += batchSize) {\n      const batchPromises = actualInputs.slice(i, i + batchSize).map((actualInput, i) => runnables[i].invoke(actualInput, optionsList[i]));\n      const batchResult = await Promise.all(batchPromises);\n      batchResults.push(batchResult);\n    }\n    return batchResults.flat();\n  }\n  async stream(input, options) {\n    const {\n      key,\n      input: actualInput\n    } = input;\n    const runnable = this.runnables[key];\n    if (runnable === undefined) {\n      throw new Error(`No runnable associated with key \"${key}\".`);\n    }\n    return runnable.stream(actualInput, options);\n  }\n}","map":{"version":3,"names":["Runnable","ensureConfig","RouterRunnable","lc_name","constructor","fields","Object","defineProperty","enumerable","configurable","writable","value","runnables","invoke","input","options","key","actualInput","runnable","undefined","Error","batch","inputs","batchOptions","keys","map","actualInputs","missingKey","find","optionsList","_getOptionsList","length","maxConcurrency","batchSize","batchResults","i","batchPromises","slice","batchResult","Promise","all","push","flat","stream"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/@langchain/core/dist/runnables/router.js"],"sourcesContent":["import { Runnable } from \"./base.js\";\nimport { ensureConfig } from \"./config.js\";\n/**\n * A runnable that routes to a set of runnables based on Input['key'].\n * Returns the output of the selected runnable.\n * @example\n * ```typescript\n * import { RouterRunnable, RunnableLambda } from \"@langchain/core/runnables\";\n *\n * const router = new RouterRunnable({\n *   runnables: {\n *     toUpperCase: RunnableLambda.from((text: string) => text.toUpperCase()),\n *     reverseText: RunnableLambda.from((text: string) =>\n *       text.split(\"\").reverse().join(\"\")\n *     ),\n *   },\n * });\n *\n * // Invoke the 'reverseText' runnable\n * const result1 = router.invoke({ key: \"reverseText\", input: \"Hello World\" });\n *\n * // \"dlroW olleH\"\n *\n * // Invoke the 'toUpperCase' runnable\n * const result2 = router.invoke({ key: \"toUpperCase\", input: \"Hello World\" });\n *\n * // \"HELLO WORLD\"\n * ```\n */\nexport class RouterRunnable extends Runnable {\n    static lc_name() {\n        return \"RouterRunnable\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"runnables\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"runnables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.runnables = fields.runnables;\n    }\n    async invoke(input, options) {\n        const { key, input: actualInput } = input;\n        const runnable = this.runnables[key];\n        if (runnable === undefined) {\n            throw new Error(`No runnable associated with key \"${key}\".`);\n        }\n        return runnable.invoke(actualInput, ensureConfig(options));\n    }\n    async batch(inputs, options, batchOptions) {\n        const keys = inputs.map((input) => input.key);\n        const actualInputs = inputs.map((input) => input.input);\n        const missingKey = keys.find((key) => this.runnables[key] === undefined);\n        if (missingKey !== undefined) {\n            throw new Error(`One or more keys do not have a corresponding runnable.`);\n        }\n        const runnables = keys.map((key) => this.runnables[key]);\n        const optionsList = this._getOptionsList(options ?? {}, inputs.length);\n        const maxConcurrency = optionsList[0]?.maxConcurrency ?? batchOptions?.maxConcurrency;\n        const batchSize = maxConcurrency && maxConcurrency > 0 ? maxConcurrency : inputs.length;\n        const batchResults = [];\n        for (let i = 0; i < actualInputs.length; i += batchSize) {\n            const batchPromises = actualInputs\n                .slice(i, i + batchSize)\n                .map((actualInput, i) => runnables[i].invoke(actualInput, optionsList[i]));\n            const batchResult = await Promise.all(batchPromises);\n            batchResults.push(batchResult);\n        }\n        return batchResults.flat();\n    }\n    async stream(input, options) {\n        const { key, input: actualInput } = input;\n        const runnable = this.runnables[key];\n        if (runnable === undefined) {\n            throw new Error(`No runnable associated with key \"${key}\".`);\n        }\n        return runnable.stream(actualInput, options);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}