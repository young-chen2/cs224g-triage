{"ast":null,"code":"var _jsxFileName = \"/Users/youngchen/Downloads/cs224g-triage/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport OpenAI from 'openai';\nimport { SYSTEM_PROMPT, INITIAL_MESSAGE } from './prompts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true\n});\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([{\n    role: 'assistant',\n    content: INITIAL_MESSAGE\n  }]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const [recognition, setRecognition] = useState(null);\n  useEffect(() => {\n    // Initialize speech recognition\n    if ('webkitSpeechRecognition' in window) {\n      const recognition = new window.webkitSpeechRecognition();\n      recognition.continuous = false;\n      recognition.interimResults = false;\n      recognition.onresult = event => {\n        const transcript = event.results[0][0].transcript;\n        setInputMessage(transcript);\n        setIsListening(false);\n        // Automatically send message after speech recognition\n        handleSendMessage(transcript);\n      };\n      recognition.onerror = event => {\n        console.error('Speech recognition error:', event.error);\n        setIsListening(false);\n      };\n      setRecognition(recognition);\n    }\n  }, []);\n  const toggleListening = () => {\n    if (isListening) {\n      recognition.stop();\n      setIsListening(false);\n    } else {\n      recognition.start();\n      setIsListening(true);\n    }\n  };\n  const speak = text => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    window.speechSynthesis.speak(utterance);\n  };\n  const handleSendMessage = async (message = inputMessage) => {\n    if (message.trim() === '') return;\n    setMessages([...messages, {\n      role: 'user',\n      content: message\n    }]);\n    setInputMessage('');\n    try {\n      const response = await client.chat.completions.create({\n        model: \"gpt-4o-mini\",\n        messages: [{\n          role: \"system\",\n          content: SYSTEM_PROMPT\n        }, ...messages, {\n          role: \"user\",\n          content: message\n        }]\n      });\n      const assistantMessage = response.choices[0].message.content;\n      setMessages(prevMessages => [...prevMessages, {\n        role: 'assistant',\n        content: assistantMessage\n      }]);\n      // Speak the assistant's response\n      speak(assistantMessage);\n    } catch (error) {\n      console.error('Error calling OpenAI API:', error);\n      const errorMessage = \"I'm sorry, I encountered an error. Please try again.\";\n      setMessages(prevMessages => [...prevMessages, {\n        role: 'assistant',\n        content: errorMessage\n      }]);\n      speak(errorMessage);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `App ${isDarkMode ? 'dark-mode' : 'light-mode'}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Triage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"theme-toggle\",\n          onClick: () => setIsDarkMode(!isDarkMode),\n          children: isDarkMode ? '☀️' : '🌙'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages-container\",\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.role}`,\n          children: message.content\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputMessage,\n          onChange: e => setInputMessage(e.target.value),\n          placeholder: \"Describe your symptoms...\",\n          onKeyPress: e => e.key === 'Enter' && handleSendMessage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSendMessage(),\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleListening,\n          className: `mic-button ${isListening ? 'listening' : ''}`,\n          children: isListening ? '🎤 (Recording...)' : '🎤'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Otibv2TDzFSFzSNrPCMj4gd8718=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","OpenAI","SYSTEM_PROMPT","INITIAL_MESSAGE","jsxDEV","_jsxDEV","client","apiKey","process","env","REACT_APP_OPENAI_API_KEY","dangerouslyAllowBrowser","App","_s","messages","setMessages","role","content","inputMessage","setInputMessage","isDarkMode","setIsDarkMode","isListening","setIsListening","recognition","setRecognition","window","webkitSpeechRecognition","continuous","interimResults","onresult","event","transcript","results","handleSendMessage","onerror","console","error","toggleListening","stop","start","speak","text","utterance","SpeechSynthesisUtterance","speechSynthesis","message","trim","response","chat","completions","create","model","assistantMessage","choices","prevMessages","errorMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","index","type","value","onChange","e","target","placeholder","onKeyPress","key","_c","$RefreshReg$"],"sources":["/Users/youngchen/Downloads/cs224g-triage/src/App.js"],"sourcesContent":["import './App.css';\nimport { useState, useEffect } from 'react';\nimport OpenAI from 'openai';\nimport { SYSTEM_PROMPT, INITIAL_MESSAGE } from './prompts';\n\nconst client = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true\n});\n\nfunction App() {\n  const [messages, setMessages] = useState([\n    { role: 'assistant', content: INITIAL_MESSAGE }\n  ]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const [recognition, setRecognition] = useState(null);\n\n  useEffect(() => {\n    // Initialize speech recognition\n    if ('webkitSpeechRecognition' in window) {\n      const recognition = new window.webkitSpeechRecognition();\n      recognition.continuous = false;\n      recognition.interimResults = false;\n      \n      recognition.onresult = (event) => {\n        const transcript = event.results[0][0].transcript;\n        setInputMessage(transcript);\n        setIsListening(false);\n        // Automatically send message after speech recognition\n        handleSendMessage(transcript);\n      };\n\n      recognition.onerror = (event) => {\n        console.error('Speech recognition error:', event.error);\n        setIsListening(false);\n      };\n\n      setRecognition(recognition);\n    }\n  }, []);\n\n  const toggleListening = () => {\n    if (isListening) {\n      recognition.stop();\n      setIsListening(false);\n    } else {\n      recognition.start();\n      setIsListening(true);\n    }\n  };\n\n  const speak = (text) => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    window.speechSynthesis.speak(utterance);\n  };\n\n  const handleSendMessage = async (message = inputMessage) => {\n    if (message.trim() === '') return;\n    \n    setMessages([...messages, { role: 'user', content: message }]);\n    setInputMessage('');\n\n    try {\n      const response = await client.chat.completions.create({\n        model: \"gpt-4o-mini\",\n        messages: [\n          { role: \"system\", content: SYSTEM_PROMPT },\n          ...messages,\n          { role: \"user\", content: message }\n        ]\n      });\n\n      const assistantMessage = response.choices[0].message.content;\n      setMessages(prevMessages => [...prevMessages, { role: 'assistant', content: assistantMessage }]);\n      // Speak the assistant's response\n      speak(assistantMessage);\n    } \n    catch (error) {\n      console.error('Error calling OpenAI API:', error);\n      const errorMessage = \"I'm sorry, I encountered an error. Please try again.\";\n      setMessages(prevMessages => [...prevMessages, { \n        role: 'assistant', \n        content: errorMessage \n      }]);\n      speak(errorMessage);\n    }\n  };\n\n  return (\n    <div className={`App ${isDarkMode ? 'dark-mode' : 'light-mode'}`}>\n      <div className=\"chat-container\">\n        <header className=\"chat-header\">\n          <h1>Triage</h1>\n          <button \n            className=\"theme-toggle\"\n            onClick={() => setIsDarkMode(!isDarkMode)}\n          >\n            {isDarkMode ? '☀️' : '🌙'}\n          </button>\n        </header>\n        \n        <div className=\"messages-container\">\n          {messages.map((message, index) => (\n            <div key={index} className={`message ${message.role}`}>\n              {message.content}\n            </div>\n          ))}\n        </div>\n\n        <div className=\"input-container\">\n          <input\n            type=\"text\"\n            value={inputMessage}\n            onChange={(e) => setInputMessage(e.target.value)}\n            placeholder=\"Describe your symptoms...\"\n            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n          />\n          <button onClick={() => handleSendMessage()}>Send</button>\n          <button \n            onClick={toggleListening}\n            className={`mic-button ${isListening ? 'listening' : ''}`}\n          >\n            {isListening ? '🎤 (Recording...)' : '🎤'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}