{"ast":null,"code":"import { AzureOpenAI as AzureOpenAIClient } from \"openai\";\nimport { getEnvironmentVariable } from \"@langchain/core/utils/env\";\nimport { OpenAIEmbeddings } from \"../embeddings.js\";\nimport { getEndpoint } from \"../utils/azure.js\";\nimport { wrapOpenAIClientError } from \"../utils/openai.js\";\nexport class AzureOpenAIEmbeddings extends OpenAIEmbeddings {\n  constructor(fields) {\n    super(fields);\n    Object.defineProperty(this, \"azureOpenAIApiVersion\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"azureOpenAIApiKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"azureADTokenProvider\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"azureOpenAIApiInstanceName\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"azureOpenAIApiDeploymentName\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"azureOpenAIBasePath\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.batchSize = fields?.batchSize ?? 1;\n    this.azureOpenAIApiKey = fields?.azureOpenAIApiKey ?? fields?.apiKey ?? getEnvironmentVariable(\"AZURE_OPENAI_API_KEY\");\n    this.azureOpenAIApiVersion = fields?.azureOpenAIApiVersion ?? fields?.openAIApiVersion ?? getEnvironmentVariable(\"AZURE_OPENAI_API_VERSION\");\n    this.azureOpenAIBasePath = fields?.azureOpenAIBasePath ?? getEnvironmentVariable(\"AZURE_OPENAI_BASE_PATH\");\n    this.azureOpenAIApiInstanceName = fields?.azureOpenAIApiInstanceName ?? getEnvironmentVariable(\"AZURE_OPENAI_API_INSTANCE_NAME\");\n    this.azureOpenAIApiDeploymentName = (fields?.azureOpenAIApiEmbeddingsDeploymentName || fields?.azureOpenAIApiDeploymentName) ?? (getEnvironmentVariable(\"AZURE_OPENAI_API_EMBEDDINGS_DEPLOYMENT_NAME\") || getEnvironmentVariable(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\"));\n    this.azureADTokenProvider = fields?.azureADTokenProvider;\n  }\n  async embeddingWithRetry(request) {\n    if (!this.client) {\n      const openAIEndpointConfig = {\n        azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n        azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n        azureOpenAIApiKey: this.azureOpenAIApiKey,\n        azureOpenAIBasePath: this.azureOpenAIBasePath,\n        azureADTokenProvider: this.azureADTokenProvider,\n        baseURL: this.clientConfig.baseURL\n      };\n      const endpoint = getEndpoint(openAIEndpointConfig);\n      const params = {\n        ...this.clientConfig,\n        baseURL: endpoint,\n        timeout: this.timeout,\n        maxRetries: 0\n      };\n      if (!this.azureADTokenProvider) {\n        params.apiKey = openAIEndpointConfig.azureOpenAIApiKey;\n      }\n      if (!params.baseURL) {\n        delete params.baseURL;\n      }\n      params.defaultHeaders = {\n        ...params.defaultHeaders,\n        \"User-Agent\": params.defaultHeaders?.[\"User-Agent\"] ? `${params.defaultHeaders[\"User-Agent\"]}: langchainjs-azure-openai-v2` : `langchainjs-azure-openai-v2`\n      };\n      this.client = new AzureOpenAIClient({\n        apiVersion: this.azureOpenAIApiVersion,\n        azureADTokenProvider: this.azureADTokenProvider,\n        deployment: this.azureOpenAIApiDeploymentName,\n        ...params\n      });\n    }\n    const requestOptions = {};\n    if (this.azureOpenAIApiKey) {\n      requestOptions.headers = {\n        \"api-key\": this.azureOpenAIApiKey,\n        ...requestOptions.headers\n      };\n      requestOptions.query = {\n        \"api-version\": this.azureOpenAIApiVersion,\n        ...requestOptions.query\n      };\n    }\n    return this.caller.call(async () => {\n      try {\n        const res = await this.client.embeddings.create(request, requestOptions);\n        return res;\n      } catch (e) {\n        const error = wrapOpenAIClientError(e);\n        throw error;\n      }\n    });\n  }\n}","map":{"version":3,"names":["AzureOpenAI","AzureOpenAIClient","getEnvironmentVariable","OpenAIEmbeddings","getEndpoint","wrapOpenAIClientError","AzureOpenAIEmbeddings","constructor","fields","Object","defineProperty","enumerable","configurable","writable","value","batchSize","azureOpenAIApiKey","apiKey","azureOpenAIApiVersion","openAIApiVersion","azureOpenAIBasePath","azureOpenAIApiInstanceName","azureOpenAIApiDeploymentName","azureOpenAIApiEmbeddingsDeploymentName","azureADTokenProvider","embeddingWithRetry","request","client","openAIEndpointConfig","baseURL","clientConfig","endpoint","params","timeout","maxRetries","defaultHeaders","apiVersion","deployment","requestOptions","headers","query","caller","call","res","embeddings","create","e","error"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/@langchain/openai/dist/azure/embeddings.js"],"sourcesContent":["import { AzureOpenAI as AzureOpenAIClient, } from \"openai\";\nimport { getEnvironmentVariable } from \"@langchain/core/utils/env\";\nimport { OpenAIEmbeddings } from \"../embeddings.js\";\nimport { getEndpoint } from \"../utils/azure.js\";\nimport { wrapOpenAIClientError } from \"../utils/openai.js\";\nexport class AzureOpenAIEmbeddings extends OpenAIEmbeddings {\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"azureOpenAIApiVersion\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureADTokenProvider\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiInstanceName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiDeploymentName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIBasePath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.batchSize = fields?.batchSize ?? 1;\n        this.azureOpenAIApiKey =\n            fields?.azureOpenAIApiKey ??\n                fields?.apiKey ??\n                getEnvironmentVariable(\"AZURE_OPENAI_API_KEY\");\n        this.azureOpenAIApiVersion =\n            fields?.azureOpenAIApiVersion ??\n                fields?.openAIApiVersion ??\n                getEnvironmentVariable(\"AZURE_OPENAI_API_VERSION\");\n        this.azureOpenAIBasePath =\n            fields?.azureOpenAIBasePath ??\n                getEnvironmentVariable(\"AZURE_OPENAI_BASE_PATH\");\n        this.azureOpenAIApiInstanceName =\n            fields?.azureOpenAIApiInstanceName ??\n                getEnvironmentVariable(\"AZURE_OPENAI_API_INSTANCE_NAME\");\n        this.azureOpenAIApiDeploymentName =\n            (fields?.azureOpenAIApiEmbeddingsDeploymentName ||\n                fields?.azureOpenAIApiDeploymentName) ??\n                (getEnvironmentVariable(\"AZURE_OPENAI_API_EMBEDDINGS_DEPLOYMENT_NAME\") ||\n                    getEnvironmentVariable(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\"));\n        this.azureADTokenProvider = fields?.azureADTokenProvider;\n    }\n    async embeddingWithRetry(request) {\n        if (!this.client) {\n            const openAIEndpointConfig = {\n                azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n                azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n                azureOpenAIApiKey: this.azureOpenAIApiKey,\n                azureOpenAIBasePath: this.azureOpenAIBasePath,\n                azureADTokenProvider: this.azureADTokenProvider,\n                baseURL: this.clientConfig.baseURL,\n            };\n            const endpoint = getEndpoint(openAIEndpointConfig);\n            const params = {\n                ...this.clientConfig,\n                baseURL: endpoint,\n                timeout: this.timeout,\n                maxRetries: 0,\n            };\n            if (!this.azureADTokenProvider) {\n                params.apiKey = openAIEndpointConfig.azureOpenAIApiKey;\n            }\n            if (!params.baseURL) {\n                delete params.baseURL;\n            }\n            params.defaultHeaders = {\n                ...params.defaultHeaders,\n                \"User-Agent\": params.defaultHeaders?.[\"User-Agent\"]\n                    ? `${params.defaultHeaders[\"User-Agent\"]}: langchainjs-azure-openai-v2`\n                    : `langchainjs-azure-openai-v2`,\n            };\n            this.client = new AzureOpenAIClient({\n                apiVersion: this.azureOpenAIApiVersion,\n                azureADTokenProvider: this.azureADTokenProvider,\n                deployment: this.azureOpenAIApiDeploymentName,\n                ...params,\n            });\n        }\n        const requestOptions = {};\n        if (this.azureOpenAIApiKey) {\n            requestOptions.headers = {\n                \"api-key\": this.azureOpenAIApiKey,\n                ...requestOptions.headers,\n            };\n            requestOptions.query = {\n                \"api-version\": this.azureOpenAIApiVersion,\n                ...requestOptions.query,\n            };\n        }\n        return this.caller.call(async () => {\n            try {\n                const res = await this.client.embeddings.create(request, requestOptions);\n                return res;\n            }\n            catch (e) {\n                const error = wrapOpenAIClientError(e);\n                throw error;\n            }\n        });\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}