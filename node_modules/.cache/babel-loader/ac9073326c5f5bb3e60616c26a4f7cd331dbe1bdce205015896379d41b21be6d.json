{"ast":null,"code":"import { BaseChain } from \"./base.js\";\nimport { loadQAStuffChain } from \"./question_answering/load.js\";\n/**\n * @deprecated This class will be removed in 1.0.0. See below for an example implementation using\n * `createRetrievalChain`:\n * Class representing a chain for performing question-answering tasks with\n * a retrieval component.\n * @example\n * ```typescript\n * import { createStuffDocumentsChain } from \"langchain/chains/combine_documents\";\n * import { ChatPromptTemplate } from \"@langchain/core/prompts\";\n * import { createRetrievalChain } from \"langchain/chains/retrieval\";\n * import { MemoryVectorStore } from \"langchain/vectorstores/memory\";\n *\n * const documents = [...your documents here];\n * const embeddings = ...your embeddings model;\n * const llm = ...your LLM model;\n *\n * const vectorstore = await MemoryVectorStore.fromDocuments(\n *   documents,\n *   embeddings\n * );\n * const prompt = ChatPromptTemplate.fromTemplate(`Answer the user's question: {input} based on the following context {context}`);\n *\n * const combineDocsChain = await createStuffDocumentsChain({\n *   llm,\n *   prompt,\n * });\n * const retriever = vectorstore.asRetriever();\n *\n * const retrievalChain = await createRetrievalChain({\n *   combineDocsChain,\n *   retriever,\n * });\n * ```\n */\nexport class RetrievalQAChain extends BaseChain {\n  static lc_name() {\n    return \"RetrievalQAChain\";\n  }\n  get inputKeys() {\n    return [this.inputKey];\n  }\n  get outputKeys() {\n    return this.combineDocumentsChain.outputKeys.concat(this.returnSourceDocuments ? [\"sourceDocuments\"] : []);\n  }\n  constructor(fields) {\n    super(fields);\n    Object.defineProperty(this, \"inputKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"query\"\n    });\n    Object.defineProperty(this, \"retriever\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"combineDocumentsChain\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"returnSourceDocuments\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    this.retriever = fields.retriever;\n    this.combineDocumentsChain = fields.combineDocumentsChain;\n    this.inputKey = fields.inputKey ?? this.inputKey;\n    this.returnSourceDocuments = fields.returnSourceDocuments ?? this.returnSourceDocuments;\n  }\n  /** @ignore */\n  async _call(values, runManager) {\n    if (!(this.inputKey in values)) {\n      throw new Error(`Question key \"${this.inputKey}\" not found.`);\n    }\n    const question = values[this.inputKey];\n    const docs = await this.retriever.getRelevantDocuments(question, runManager?.getChild(\"retriever\"));\n    const inputs = {\n      question,\n      input_documents: docs,\n      ...values\n    };\n    const result = await this.combineDocumentsChain.call(inputs, runManager?.getChild(\"combine_documents\"));\n    if (this.returnSourceDocuments) {\n      return {\n        ...result,\n        sourceDocuments: docs\n      };\n    }\n    return result;\n  }\n  _chainType() {\n    return \"retrieval_qa\";\n  }\n  static async deserialize(_data, _values) {\n    throw new Error(\"Not implemented\");\n  }\n  serialize() {\n    throw new Error(\"Not implemented\");\n  }\n  /**\n   * Creates a new instance of RetrievalQAChain using a BaseLanguageModel\n   * and a BaseRetriever.\n   * @param llm The BaseLanguageModel used to generate a new question.\n   * @param retriever The BaseRetriever used to retrieve relevant documents.\n   * @param options Optional parameters for the RetrievalQAChain.\n   * @returns A new instance of RetrievalQAChain.\n   */\n  static fromLLM(llm, retriever, options) {\n    const qaChain = loadQAStuffChain(llm, {\n      prompt: options?.prompt\n    });\n    return new this({\n      ...options,\n      retriever,\n      combineDocumentsChain: qaChain\n    });\n  }\n}","map":{"version":3,"names":["BaseChain","loadQAStuffChain","RetrievalQAChain","lc_name","inputKeys","inputKey","outputKeys","combineDocumentsChain","concat","returnSourceDocuments","constructor","fields","Object","defineProperty","enumerable","configurable","writable","value","retriever","_call","values","runManager","Error","question","docs","getRelevantDocuments","getChild","inputs","input_documents","result","call","sourceDocuments","_chainType","deserialize","_data","_values","serialize","fromLLM","llm","options","qaChain","prompt"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/langchain/dist/chains/retrieval_qa.js"],"sourcesContent":["import { BaseChain } from \"./base.js\";\nimport { loadQAStuffChain, } from \"./question_answering/load.js\";\n/**\n * @deprecated This class will be removed in 1.0.0. See below for an example implementation using\n * `createRetrievalChain`:\n * Class representing a chain for performing question-answering tasks with\n * a retrieval component.\n * @example\n * ```typescript\n * import { createStuffDocumentsChain } from \"langchain/chains/combine_documents\";\n * import { ChatPromptTemplate } from \"@langchain/core/prompts\";\n * import { createRetrievalChain } from \"langchain/chains/retrieval\";\n * import { MemoryVectorStore } from \"langchain/vectorstores/memory\";\n *\n * const documents = [...your documents here];\n * const embeddings = ...your embeddings model;\n * const llm = ...your LLM model;\n *\n * const vectorstore = await MemoryVectorStore.fromDocuments(\n *   documents,\n *   embeddings\n * );\n * const prompt = ChatPromptTemplate.fromTemplate(`Answer the user's question: {input} based on the following context {context}`);\n *\n * const combineDocsChain = await createStuffDocumentsChain({\n *   llm,\n *   prompt,\n * });\n * const retriever = vectorstore.asRetriever();\n *\n * const retrievalChain = await createRetrievalChain({\n *   combineDocsChain,\n *   retriever,\n * });\n * ```\n */\nexport class RetrievalQAChain extends BaseChain {\n    static lc_name() {\n        return \"RetrievalQAChain\";\n    }\n    get inputKeys() {\n        return [this.inputKey];\n    }\n    get outputKeys() {\n        return this.combineDocumentsChain.outputKeys.concat(this.returnSourceDocuments ? [\"sourceDocuments\"] : []);\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"query\"\n        });\n        Object.defineProperty(this, \"retriever\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"combineDocumentsChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"returnSourceDocuments\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        this.retriever = fields.retriever;\n        this.combineDocumentsChain = fields.combineDocumentsChain;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.returnSourceDocuments =\n            fields.returnSourceDocuments ?? this.returnSourceDocuments;\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Question key \"${this.inputKey}\" not found.`);\n        }\n        const question = values[this.inputKey];\n        const docs = await this.retriever.getRelevantDocuments(question, runManager?.getChild(\"retriever\"));\n        const inputs = { question, input_documents: docs, ...values };\n        const result = await this.combineDocumentsChain.call(inputs, runManager?.getChild(\"combine_documents\"));\n        if (this.returnSourceDocuments) {\n            return {\n                ...result,\n                sourceDocuments: docs,\n            };\n        }\n        return result;\n    }\n    _chainType() {\n        return \"retrieval_qa\";\n    }\n    static async deserialize(_data, _values) {\n        throw new Error(\"Not implemented\");\n    }\n    serialize() {\n        throw new Error(\"Not implemented\");\n    }\n    /**\n     * Creates a new instance of RetrievalQAChain using a BaseLanguageModel\n     * and a BaseRetriever.\n     * @param llm The BaseLanguageModel used to generate a new question.\n     * @param retriever The BaseRetriever used to retrieve relevant documents.\n     * @param options Optional parameters for the RetrievalQAChain.\n     * @returns A new instance of RetrievalQAChain.\n     */\n    static fromLLM(llm, retriever, options) {\n        const qaChain = loadQAStuffChain(llm, {\n            prompt: options?.prompt,\n        });\n        return new this({\n            ...options,\n            retriever,\n            combineDocumentsChain: qaChain,\n        });\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}