{"ast":null,"code":"import { BaseMemory, getInputValue, getOutputValue } from \"@langchain/core/memory\";\nimport { ChatMessageHistory } from \"../stores/message/in_memory.js\";\n/**\n * Abstract class that provides a base for implementing different types of\n * memory systems. It is designed to maintain the state of an application,\n * specifically the history of a conversation. This class is typically\n * extended by other classes to create specific types of memory systems.\n */\nexport class BaseChatMemory extends BaseMemory {\n  constructor(fields) {\n    super();\n    Object.defineProperty(this, \"chatHistory\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"returnMessages\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"inputKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"outputKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.chatHistory = fields?.chatHistory ?? new ChatMessageHistory();\n    this.returnMessages = fields?.returnMessages ?? this.returnMessages;\n    this.inputKey = fields?.inputKey ?? this.inputKey;\n    this.outputKey = fields?.outputKey ?? this.outputKey;\n  }\n  /**\n   * Method to add user and AI messages to the chat history in sequence.\n   * @param inputValues The input values from the user.\n   * @param outputValues The output values from the AI.\n   * @returns Promise that resolves when the context has been saved.\n   */\n  async saveContext(inputValues, outputValues) {\n    // this is purposefully done in sequence so they're saved in order\n    await this.chatHistory.addUserMessage(getInputValue(inputValues, this.inputKey));\n    await this.chatHistory.addAIChatMessage(getOutputValue(outputValues, this.outputKey));\n  }\n  /**\n   * Method to clear the chat history.\n   * @returns Promise that resolves when the chat history has been cleared.\n   */\n  async clear() {\n    await this.chatHistory.clear();\n  }\n}","map":{"version":3,"names":["BaseMemory","getInputValue","getOutputValue","ChatMessageHistory","BaseChatMemory","constructor","fields","Object","defineProperty","enumerable","configurable","writable","value","chatHistory","returnMessages","inputKey","outputKey","saveContext","inputValues","outputValues","addUserMessage","addAIChatMessage","clear"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/langchain/dist/memory/chat_memory.js"],"sourcesContent":["import { BaseMemory, getInputValue, getOutputValue, } from \"@langchain/core/memory\";\nimport { ChatMessageHistory } from \"../stores/message/in_memory.js\";\n/**\n * Abstract class that provides a base for implementing different types of\n * memory systems. It is designed to maintain the state of an application,\n * specifically the history of a conversation. This class is typically\n * extended by other classes to create specific types of memory systems.\n */\nexport class BaseChatMemory extends BaseMemory {\n    constructor(fields) {\n        super();\n        Object.defineProperty(this, \"chatHistory\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"returnMessages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.chatHistory = fields?.chatHistory ?? new ChatMessageHistory();\n        this.returnMessages = fields?.returnMessages ?? this.returnMessages;\n        this.inputKey = fields?.inputKey ?? this.inputKey;\n        this.outputKey = fields?.outputKey ?? this.outputKey;\n    }\n    /**\n     * Method to add user and AI messages to the chat history in sequence.\n     * @param inputValues The input values from the user.\n     * @param outputValues The output values from the AI.\n     * @returns Promise that resolves when the context has been saved.\n     */\n    async saveContext(inputValues, outputValues) {\n        // this is purposefully done in sequence so they're saved in order\n        await this.chatHistory.addUserMessage(getInputValue(inputValues, this.inputKey));\n        await this.chatHistory.addAIChatMessage(getOutputValue(outputValues, this.outputKey));\n    }\n    /**\n     * Method to clear the chat history.\n     * @returns Promise that resolves when the chat history has been cleared.\n     */\n    async clear() {\n        await this.chatHistory.clear();\n    }\n}\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,aAAa,EAAEC,cAAc,QAAS,wBAAwB;AACnF,SAASC,kBAAkB,QAAQ,gCAAgC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,SAASJ,UAAU,CAAC;EAC3CK,WAAWA,CAACC,MAAM,EAAE;IAChB,KAAK,CAAC,CAAC;IACPC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,aAAa,EAAE;MACvCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,gBAAgB,EAAE;MAC1CC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE;IACX,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,UAAU,EAAE;MACpCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,WAAW,EAAE;MACrCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACF,IAAI,CAACC,WAAW,GAAGP,MAAM,EAAEO,WAAW,IAAI,IAAIV,kBAAkB,CAAC,CAAC;IAClE,IAAI,CAACW,cAAc,GAAGR,MAAM,EAAEQ,cAAc,IAAI,IAAI,CAACA,cAAc;IACnE,IAAI,CAACC,QAAQ,GAAGT,MAAM,EAAES,QAAQ,IAAI,IAAI,CAACA,QAAQ;IACjD,IAAI,CAACC,SAAS,GAAGV,MAAM,EAAEU,SAAS,IAAI,IAAI,CAACA,SAAS;EACxD;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,MAAMC,WAAWA,CAACC,WAAW,EAAEC,YAAY,EAAE;IACzC;IACA,MAAM,IAAI,CAACN,WAAW,CAACO,cAAc,CAACnB,aAAa,CAACiB,WAAW,EAAE,IAAI,CAACH,QAAQ,CAAC,CAAC;IAChF,MAAM,IAAI,CAACF,WAAW,CAACQ,gBAAgB,CAACnB,cAAc,CAACiB,YAAY,EAAE,IAAI,CAACH,SAAS,CAAC,CAAC;EACzF;EACA;AACJ;AACA;AACA;EACI,MAAMM,KAAKA,CAAA,EAAG;IACV,MAAM,IAAI,CAACT,WAAW,CAACS,KAAK,CAAC,CAAC;EAClC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}