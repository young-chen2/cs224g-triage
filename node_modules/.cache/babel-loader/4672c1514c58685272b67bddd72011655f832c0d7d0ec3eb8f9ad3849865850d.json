{"ast":null,"code":"// Inlined from https://github.com/flexdinesh/browser-or-node\nimport { __version__ } from \"../index.js\";\nlet globalEnv;\nexport const isBrowser = () => typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\nexport const isWebWorker = () => typeof globalThis === \"object\" && globalThis.constructor && globalThis.constructor.name === \"DedicatedWorkerGlobalScope\";\nexport const isJsDom = () => typeof window !== \"undefined\" && window.name === \"nodejs\" || typeof navigator !== \"undefined\" && (navigator.userAgent.includes(\"Node.js\") || navigator.userAgent.includes(\"jsdom\"));\n// Supabase Edge Function provides a `Deno` global object\n// without `version` property\nexport const isDeno = () => typeof Deno !== \"undefined\";\n// Mark not-as-node if in Supabase Edge Function\nexport const isNode = () => typeof process !== \"undefined\" && typeof process.versions !== \"undefined\" && typeof process.versions.node !== \"undefined\" && !isDeno();\nexport const getEnv = () => {\n  if (globalEnv) {\n    return globalEnv;\n  }\n  if (isBrowser()) {\n    globalEnv = \"browser\";\n  } else if (isNode()) {\n    globalEnv = \"node\";\n  } else if (isWebWorker()) {\n    globalEnv = \"webworker\";\n  } else if (isJsDom()) {\n    globalEnv = \"jsdom\";\n  } else if (isDeno()) {\n    globalEnv = \"deno\";\n  } else {\n    globalEnv = \"other\";\n  }\n  return globalEnv;\n};\nlet runtimeEnvironment;\nexport function getRuntimeEnvironment() {\n  if (runtimeEnvironment === undefined) {\n    const env = getEnv();\n    const releaseEnv = getShas();\n    runtimeEnvironment = {\n      library: \"langsmith\",\n      runtime: env,\n      sdk: \"langsmith-js\",\n      sdk_version: __version__,\n      ...releaseEnv\n    };\n  }\n  return runtimeEnvironment;\n}\n/**\n * Retrieves the LangChain-specific environment variables from the current runtime environment.\n * Sensitive keys (containing the word \"key\", \"token\", or \"secret\") have their values redacted for security.\n *\n * @returns {Record<string, string>}\n *  - A record of LangChain-specific environment variables.\n */\nexport function getLangChainEnvVars() {\n  const allEnvVars = getEnvironmentVariables() || {};\n  const envVars = {};\n  for (const [key, value] of Object.entries(allEnvVars)) {\n    if (key.startsWith(\"LANGCHAIN_\") && typeof value === \"string\") {\n      envVars[key] = value;\n    }\n  }\n  for (const key in envVars) {\n    if ((key.toLowerCase().includes(\"key\") || key.toLowerCase().includes(\"secret\") || key.toLowerCase().includes(\"token\")) && typeof envVars[key] === \"string\") {\n      const value = envVars[key];\n      envVars[key] = value.slice(0, 2) + \"*\".repeat(value.length - 4) + value.slice(-2);\n    }\n  }\n  return envVars;\n}\n/**\n * Retrieves the LangChain-specific metadata from the current runtime environment.\n *\n * @returns {Record<string, string>}\n *  - A record of LangChain-specific metadata environment variables.\n */\nexport function getLangChainEnvVarsMetadata() {\n  const allEnvVars = getEnvironmentVariables() || {};\n  const envVars = {};\n  const excluded = [\"LANGCHAIN_API_KEY\", \"LANGCHAIN_ENDPOINT\", \"LANGCHAIN_TRACING_V2\", \"LANGCHAIN_PROJECT\", \"LANGCHAIN_SESSION\", \"LANGSMITH_API_KEY\", \"LANGSMITH_ENDPOINT\", \"LANGSMITH_TRACING_V2\", \"LANGSMITH_PROJECT\", \"LANGSMITH_SESSION\"];\n  for (const [key, value] of Object.entries(allEnvVars)) {\n    if ((key.startsWith(\"LANGCHAIN_\") || key.startsWith(\"LANGSMITH_\")) && typeof value === \"string\" && !excluded.includes(key) && !key.toLowerCase().includes(\"key\") && !key.toLowerCase().includes(\"secret\") && !key.toLowerCase().includes(\"token\")) {\n      if (key === \"LANGCHAIN_REVISION_ID\") {\n        envVars[\"revision_id\"] = value;\n      } else {\n        envVars[key] = value;\n      }\n    }\n  }\n  return envVars;\n}\n/**\n * Retrieves the environment variables from the current runtime environment.\n *\n * This function is designed to operate in a variety of JS environments,\n * including Node.js, Deno, browsers, etc.\n *\n * @returns {Record<string, string> | undefined}\n *  - A record of environment variables if available.\n *  - `undefined` if the environment does not support or allows access to environment variables.\n */\nexport function getEnvironmentVariables() {\n  try {\n    // Check for Node.js environment\n    // eslint-disable-next-line no-process-env\n    if (typeof process !== \"undefined\" && process.env) {\n      // eslint-disable-next-line no-process-env\n      return Object.entries(process.env).reduce((acc, [key, value]) => {\n        acc[key] = String(value);\n        return acc;\n      }, {});\n    }\n    // For browsers and other environments, we may not have direct access to env variables\n    // Return undefined or any other fallback as required.\n    return undefined;\n  } catch (e) {\n    // Catch any errors that might occur while trying to access environment variables\n    return undefined;\n  }\n}\nexport function getEnvironmentVariable(name) {\n  // Certain Deno setups will throw an error if you try to access environment variables\n  // https://github.com/hwchase17/langchainjs/issues/1412\n  try {\n    return typeof process !== \"undefined\" ?\n    // eslint-disable-next-line no-process-env\n    process.env?.[name] : undefined;\n  } catch (e) {\n    return undefined;\n  }\n}\nexport function getLangSmithEnvironmentVariable(name) {\n  return getEnvironmentVariable(`LANGSMITH_${name}`) || getEnvironmentVariable(`LANGCHAIN_${name}`);\n}\nexport function setEnvironmentVariable(name, value) {\n  if (typeof process !== \"undefined\") {\n    // eslint-disable-next-line no-process-env\n    process.env[name] = value;\n  }\n}\nlet cachedCommitSHAs;\n/**\n * Get the Git commit SHA from common environment variables\n * used by different CI/CD platforms.\n * @returns {string | undefined} The Git commit SHA or undefined if not found.\n */\nexport function getShas() {\n  if (cachedCommitSHAs !== undefined) {\n    return cachedCommitSHAs;\n  }\n  const common_release_envs = [\"VERCEL_GIT_COMMIT_SHA\", \"NEXT_PUBLIC_VERCEL_GIT_COMMIT_SHA\", \"COMMIT_REF\", \"RENDER_GIT_COMMIT\", \"CI_COMMIT_SHA\", \"CIRCLE_SHA1\", \"CF_PAGES_COMMIT_SHA\", \"REACT_APP_GIT_SHA\", \"SOURCE_VERSION\", \"GITHUB_SHA\", \"TRAVIS_COMMIT\", \"GIT_COMMIT\", \"BUILD_VCS_NUMBER\", \"bamboo_planRepository_revision\", \"Build.SourceVersion\", \"BITBUCKET_COMMIT\", \"DRONE_COMMIT_SHA\", \"SEMAPHORE_GIT_SHA\", \"BUILDKITE_COMMIT\"];\n  const shas = {};\n  for (const env of common_release_envs) {\n    const envVar = getEnvironmentVariable(env);\n    if (envVar !== undefined) {\n      shas[env] = envVar;\n    }\n  }\n  cachedCommitSHAs = shas;\n  return shas;\n}","map":{"version":3,"names":["__version__","globalEnv","isBrowser","window","document","isWebWorker","globalThis","constructor","name","isJsDom","navigator","userAgent","includes","isDeno","Deno","isNode","process","versions","node","getEnv","runtimeEnvironment","getRuntimeEnvironment","undefined","env","releaseEnv","getShas","library","runtime","sdk","sdk_version","getLangChainEnvVars","allEnvVars","getEnvironmentVariables","envVars","key","value","Object","entries","startsWith","toLowerCase","slice","repeat","length","getLangChainEnvVarsMetadata","excluded","reduce","acc","String","e","getEnvironmentVariable","getLangSmithEnvironmentVariable","setEnvironmentVariable","cachedCommitSHAs","common_release_envs","shas","envVar"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/langsmith/dist/utils/env.js"],"sourcesContent":["// Inlined from https://github.com/flexdinesh/browser-or-node\nimport { __version__ } from \"../index.js\";\nlet globalEnv;\nexport const isBrowser = () => typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\nexport const isWebWorker = () => typeof globalThis === \"object\" &&\n    globalThis.constructor &&\n    globalThis.constructor.name === \"DedicatedWorkerGlobalScope\";\nexport const isJsDom = () => (typeof window !== \"undefined\" && window.name === \"nodejs\") ||\n    (typeof navigator !== \"undefined\" &&\n        (navigator.userAgent.includes(\"Node.js\") ||\n            navigator.userAgent.includes(\"jsdom\")));\n// Supabase Edge Function provides a `Deno` global object\n// without `version` property\nexport const isDeno = () => typeof Deno !== \"undefined\";\n// Mark not-as-node if in Supabase Edge Function\nexport const isNode = () => typeof process !== \"undefined\" &&\n    typeof process.versions !== \"undefined\" &&\n    typeof process.versions.node !== \"undefined\" &&\n    !isDeno();\nexport const getEnv = () => {\n    if (globalEnv) {\n        return globalEnv;\n    }\n    if (isBrowser()) {\n        globalEnv = \"browser\";\n    }\n    else if (isNode()) {\n        globalEnv = \"node\";\n    }\n    else if (isWebWorker()) {\n        globalEnv = \"webworker\";\n    }\n    else if (isJsDom()) {\n        globalEnv = \"jsdom\";\n    }\n    else if (isDeno()) {\n        globalEnv = \"deno\";\n    }\n    else {\n        globalEnv = \"other\";\n    }\n    return globalEnv;\n};\nlet runtimeEnvironment;\nexport function getRuntimeEnvironment() {\n    if (runtimeEnvironment === undefined) {\n        const env = getEnv();\n        const releaseEnv = getShas();\n        runtimeEnvironment = {\n            library: \"langsmith\",\n            runtime: env,\n            sdk: \"langsmith-js\",\n            sdk_version: __version__,\n            ...releaseEnv,\n        };\n    }\n    return runtimeEnvironment;\n}\n/**\n * Retrieves the LangChain-specific environment variables from the current runtime environment.\n * Sensitive keys (containing the word \"key\", \"token\", or \"secret\") have their values redacted for security.\n *\n * @returns {Record<string, string>}\n *  - A record of LangChain-specific environment variables.\n */\nexport function getLangChainEnvVars() {\n    const allEnvVars = getEnvironmentVariables() || {};\n    const envVars = {};\n    for (const [key, value] of Object.entries(allEnvVars)) {\n        if (key.startsWith(\"LANGCHAIN_\") && typeof value === \"string\") {\n            envVars[key] = value;\n        }\n    }\n    for (const key in envVars) {\n        if ((key.toLowerCase().includes(\"key\") ||\n            key.toLowerCase().includes(\"secret\") ||\n            key.toLowerCase().includes(\"token\")) &&\n            typeof envVars[key] === \"string\") {\n            const value = envVars[key];\n            envVars[key] =\n                value.slice(0, 2) + \"*\".repeat(value.length - 4) + value.slice(-2);\n        }\n    }\n    return envVars;\n}\n/**\n * Retrieves the LangChain-specific metadata from the current runtime environment.\n *\n * @returns {Record<string, string>}\n *  - A record of LangChain-specific metadata environment variables.\n */\nexport function getLangChainEnvVarsMetadata() {\n    const allEnvVars = getEnvironmentVariables() || {};\n    const envVars = {};\n    const excluded = [\n        \"LANGCHAIN_API_KEY\",\n        \"LANGCHAIN_ENDPOINT\",\n        \"LANGCHAIN_TRACING_V2\",\n        \"LANGCHAIN_PROJECT\",\n        \"LANGCHAIN_SESSION\",\n        \"LANGSMITH_API_KEY\",\n        \"LANGSMITH_ENDPOINT\",\n        \"LANGSMITH_TRACING_V2\",\n        \"LANGSMITH_PROJECT\",\n        \"LANGSMITH_SESSION\",\n    ];\n    for (const [key, value] of Object.entries(allEnvVars)) {\n        if ((key.startsWith(\"LANGCHAIN_\") || key.startsWith(\"LANGSMITH_\")) &&\n            typeof value === \"string\" &&\n            !excluded.includes(key) &&\n            !key.toLowerCase().includes(\"key\") &&\n            !key.toLowerCase().includes(\"secret\") &&\n            !key.toLowerCase().includes(\"token\")) {\n            if (key === \"LANGCHAIN_REVISION_ID\") {\n                envVars[\"revision_id\"] = value;\n            }\n            else {\n                envVars[key] = value;\n            }\n        }\n    }\n    return envVars;\n}\n/**\n * Retrieves the environment variables from the current runtime environment.\n *\n * This function is designed to operate in a variety of JS environments,\n * including Node.js, Deno, browsers, etc.\n *\n * @returns {Record<string, string> | undefined}\n *  - A record of environment variables if available.\n *  - `undefined` if the environment does not support or allows access to environment variables.\n */\nexport function getEnvironmentVariables() {\n    try {\n        // Check for Node.js environment\n        // eslint-disable-next-line no-process-env\n        if (typeof process !== \"undefined\" && process.env) {\n            // eslint-disable-next-line no-process-env\n            return Object.entries(process.env).reduce((acc, [key, value]) => {\n                acc[key] = String(value);\n                return acc;\n            }, {});\n        }\n        // For browsers and other environments, we may not have direct access to env variables\n        // Return undefined or any other fallback as required.\n        return undefined;\n    }\n    catch (e) {\n        // Catch any errors that might occur while trying to access environment variables\n        return undefined;\n    }\n}\nexport function getEnvironmentVariable(name) {\n    // Certain Deno setups will throw an error if you try to access environment variables\n    // https://github.com/hwchase17/langchainjs/issues/1412\n    try {\n        return typeof process !== \"undefined\"\n            ? // eslint-disable-next-line no-process-env\n                process.env?.[name]\n            : undefined;\n    }\n    catch (e) {\n        return undefined;\n    }\n}\nexport function getLangSmithEnvironmentVariable(name) {\n    return (getEnvironmentVariable(`LANGSMITH_${name}`) ||\n        getEnvironmentVariable(`LANGCHAIN_${name}`));\n}\nexport function setEnvironmentVariable(name, value) {\n    if (typeof process !== \"undefined\") {\n        // eslint-disable-next-line no-process-env\n        process.env[name] = value;\n    }\n}\nlet cachedCommitSHAs;\n/**\n * Get the Git commit SHA from common environment variables\n * used by different CI/CD platforms.\n * @returns {string | undefined} The Git commit SHA or undefined if not found.\n */\nexport function getShas() {\n    if (cachedCommitSHAs !== undefined) {\n        return cachedCommitSHAs;\n    }\n    const common_release_envs = [\n        \"VERCEL_GIT_COMMIT_SHA\",\n        \"NEXT_PUBLIC_VERCEL_GIT_COMMIT_SHA\",\n        \"COMMIT_REF\",\n        \"RENDER_GIT_COMMIT\",\n        \"CI_COMMIT_SHA\",\n        \"CIRCLE_SHA1\",\n        \"CF_PAGES_COMMIT_SHA\",\n        \"REACT_APP_GIT_SHA\",\n        \"SOURCE_VERSION\",\n        \"GITHUB_SHA\",\n        \"TRAVIS_COMMIT\",\n        \"GIT_COMMIT\",\n        \"BUILD_VCS_NUMBER\",\n        \"bamboo_planRepository_revision\",\n        \"Build.SourceVersion\",\n        \"BITBUCKET_COMMIT\",\n        \"DRONE_COMMIT_SHA\",\n        \"SEMAPHORE_GIT_SHA\",\n        \"BUILDKITE_COMMIT\",\n    ];\n    const shas = {};\n    for (const env of common_release_envs) {\n        const envVar = getEnvironmentVariable(env);\n        if (envVar !== undefined) {\n            shas[env] = envVar;\n        }\n    }\n    cachedCommitSHAs = shas;\n    return shas;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}