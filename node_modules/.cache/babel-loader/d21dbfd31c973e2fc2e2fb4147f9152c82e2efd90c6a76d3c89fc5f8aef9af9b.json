{"ast":null,"code":"/**\n * Abstract base class for memory in LangChain's Chains. Memory refers to\n * the state in Chains. It can be used to store information about past\n * executions of a Chain and inject that information into the inputs of\n * future executions of the Chain.\n */\nexport class BaseMemory {}\nconst getValue = (values, key) => {\n  if (key !== undefined) {\n    return values[key];\n  }\n  const keys = Object.keys(values);\n  if (keys.length === 1) {\n    return values[keys[0]];\n  }\n};\n/**\n * This function is used by memory classes to select the input value\n * to use for the memory. If there is only one input value, it is used.\n * If there are multiple input values, the inputKey must be specified.\n */\nexport const getInputValue = (inputValues, inputKey) => {\n  const value = getValue(inputValues, inputKey);\n  if (!value) {\n    const keys = Object.keys(inputValues);\n    throw new Error(`input values have ${keys.length} keys, you must specify an input key or pass only 1 key as input`);\n  }\n  return value;\n};\n/**\n * This function is used by memory classes to select the output value\n * to use for the memory. If there is only one output value, it is used.\n * If there are multiple output values, the outputKey must be specified.\n * If no outputKey is specified, an error is thrown.\n */\nexport const getOutputValue = (outputValues, outputKey) => {\n  const value = getValue(outputValues, outputKey);\n  if (!value && value !== \"\") {\n    const keys = Object.keys(outputValues);\n    throw new Error(`output values have ${keys.length} keys, you must specify an output key or pass only 1 key as output`);\n  }\n  return value;\n};\n/**\n * Function used by memory classes to get the key of the prompt input,\n * excluding any keys that are memory variables or the \"stop\" key. If\n * there is not exactly one prompt input key, an error is thrown.\n */\nexport function getPromptInputKey(inputs, memoryVariables) {\n  const promptInputKeys = Object.keys(inputs).filter(key => !memoryVariables.includes(key) && key !== \"stop\");\n  if (promptInputKeys.length !== 1) {\n    throw new Error(`One input key expected, but got ${promptInputKeys.length}`);\n  }\n  return promptInputKeys[0];\n}","map":{"version":3,"names":["BaseMemory","getValue","values","key","undefined","keys","Object","length","getInputValue","inputValues","inputKey","value","Error","getOutputValue","outputValues","outputKey","getPromptInputKey","inputs","memoryVariables","promptInputKeys","filter","includes"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/@langchain/core/dist/memory.js"],"sourcesContent":["/**\n * Abstract base class for memory in LangChain's Chains. Memory refers to\n * the state in Chains. It can be used to store information about past\n * executions of a Chain and inject that information into the inputs of\n * future executions of the Chain.\n */\nexport class BaseMemory {\n}\nconst getValue = (values, key) => {\n    if (key !== undefined) {\n        return values[key];\n    }\n    const keys = Object.keys(values);\n    if (keys.length === 1) {\n        return values[keys[0]];\n    }\n};\n/**\n * This function is used by memory classes to select the input value\n * to use for the memory. If there is only one input value, it is used.\n * If there are multiple input values, the inputKey must be specified.\n */\nexport const getInputValue = (inputValues, inputKey) => {\n    const value = getValue(inputValues, inputKey);\n    if (!value) {\n        const keys = Object.keys(inputValues);\n        throw new Error(`input values have ${keys.length} keys, you must specify an input key or pass only 1 key as input`);\n    }\n    return value;\n};\n/**\n * This function is used by memory classes to select the output value\n * to use for the memory. If there is only one output value, it is used.\n * If there are multiple output values, the outputKey must be specified.\n * If no outputKey is specified, an error is thrown.\n */\nexport const getOutputValue = (outputValues, outputKey) => {\n    const value = getValue(outputValues, outputKey);\n    if (!value && value !== \"\") {\n        const keys = Object.keys(outputValues);\n        throw new Error(`output values have ${keys.length} keys, you must specify an output key or pass only 1 key as output`);\n    }\n    return value;\n};\n/**\n * Function used by memory classes to get the key of the prompt input,\n * excluding any keys that are memory variables or the \"stop\" key. If\n * there is not exactly one prompt input key, an error is thrown.\n */\nexport function getPromptInputKey(inputs, memoryVariables) {\n    const promptInputKeys = Object.keys(inputs).filter((key) => !memoryVariables.includes(key) && key !== \"stop\");\n    if (promptInputKeys.length !== 1) {\n        throw new Error(`One input key expected, but got ${promptInputKeys.length}`);\n    }\n    return promptInputKeys[0];\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,UAAU,CAAC;AAExB,MAAMC,QAAQ,GAAGA,CAACC,MAAM,EAAEC,GAAG,KAAK;EAC9B,IAAIA,GAAG,KAAKC,SAAS,EAAE;IACnB,OAAOF,MAAM,CAACC,GAAG,CAAC;EACtB;EACA,MAAME,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACH,MAAM,CAAC;EAChC,IAAIG,IAAI,CAACE,MAAM,KAAK,CAAC,EAAE;IACnB,OAAOL,MAAM,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;EAC1B;AACJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,aAAa,GAAGA,CAACC,WAAW,EAAEC,QAAQ,KAAK;EACpD,MAAMC,KAAK,GAAGV,QAAQ,CAACQ,WAAW,EAAEC,QAAQ,CAAC;EAC7C,IAAI,CAACC,KAAK,EAAE;IACR,MAAMN,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACI,WAAW,CAAC;IACrC,MAAM,IAAIG,KAAK,CAAC,qBAAqBP,IAAI,CAACE,MAAM,kEAAkE,CAAC;EACvH;EACA,OAAOI,KAAK;AAChB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,cAAc,GAAGA,CAACC,YAAY,EAAEC,SAAS,KAAK;EACvD,MAAMJ,KAAK,GAAGV,QAAQ,CAACa,YAAY,EAAEC,SAAS,CAAC;EAC/C,IAAI,CAACJ,KAAK,IAAIA,KAAK,KAAK,EAAE,EAAE;IACxB,MAAMN,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACS,YAAY,CAAC;IACtC,MAAM,IAAIF,KAAK,CAAC,sBAAsBP,IAAI,CAACE,MAAM,oEAAoE,CAAC;EAC1H;EACA,OAAOI,KAAK;AAChB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,iBAAiBA,CAACC,MAAM,EAAEC,eAAe,EAAE;EACvD,MAAMC,eAAe,GAAGb,MAAM,CAACD,IAAI,CAACY,MAAM,CAAC,CAACG,MAAM,CAAEjB,GAAG,IAAK,CAACe,eAAe,CAACG,QAAQ,CAAClB,GAAG,CAAC,IAAIA,GAAG,KAAK,MAAM,CAAC;EAC7G,IAAIgB,eAAe,CAACZ,MAAM,KAAK,CAAC,EAAE;IAC9B,MAAM,IAAIK,KAAK,CAAC,mCAAmCO,eAAe,CAACZ,MAAM,EAAE,CAAC;EAChF;EACA,OAAOY,eAAe,CAAC,CAAC,CAAC;AAC7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}