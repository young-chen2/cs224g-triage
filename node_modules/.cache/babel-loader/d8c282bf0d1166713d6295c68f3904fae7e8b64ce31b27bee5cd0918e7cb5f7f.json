{"ast":null,"code":"import { OpenAIError } from \"../../error.mjs\";\n/**\n * A re-implementation of httpx's `LineDecoder` in Python that handles incrementally\n * reading lines from text.\n *\n * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258\n */\nexport class LineDecoder {\n  constructor() {\n    this.buffer = [];\n    this.trailingCR = false;\n  }\n  decode(chunk) {\n    let text = this.decodeText(chunk);\n    if (this.trailingCR) {\n      text = '\\r' + text;\n      this.trailingCR = false;\n    }\n    if (text.endsWith('\\r')) {\n      this.trailingCR = true;\n      text = text.slice(0, -1);\n    }\n    if (!text) {\n      return [];\n    }\n    const trailingNewline = LineDecoder.NEWLINE_CHARS.has(text[text.length - 1] || '');\n    let lines = text.split(LineDecoder.NEWLINE_REGEXP);\n    // if there is a trailing new line then the last entry will be an empty\n    // string which we don't care about\n    if (trailingNewline) {\n      lines.pop();\n    }\n    if (lines.length === 1 && !trailingNewline) {\n      this.buffer.push(lines[0]);\n      return [];\n    }\n    if (this.buffer.length > 0) {\n      lines = [this.buffer.join('') + lines[0], ...lines.slice(1)];\n      this.buffer = [];\n    }\n    if (!trailingNewline) {\n      this.buffer = [lines.pop() || ''];\n    }\n    return lines;\n  }\n  decodeText(bytes) {\n    if (bytes == null) return '';\n    if (typeof bytes === 'string') return bytes;\n    // Node:\n    if (typeof Buffer !== 'undefined') {\n      if (bytes instanceof Buffer) {\n        return bytes.toString();\n      }\n      if (bytes instanceof Uint8Array) {\n        return Buffer.from(bytes).toString();\n      }\n      throw new OpenAIError(`Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global \"Buffer\" defined, which this library assumes to be Node. Please report this error.`);\n    }\n    // Browser\n    if (typeof TextDecoder !== 'undefined') {\n      if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {\n        this.textDecoder ?? (this.textDecoder = new TextDecoder('utf8'));\n        return this.textDecoder.decode(bytes);\n      }\n      throw new OpenAIError(`Unexpected: received non-Uint8Array/ArrayBuffer (${bytes.constructor.name}) in a web platform. Please report this error.`);\n    }\n    throw new OpenAIError(`Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`);\n  }\n  flush() {\n    if (!this.buffer.length && !this.trailingCR) {\n      return [];\n    }\n    const lines = [this.buffer.join('')];\n    this.buffer = [];\n    this.trailingCR = false;\n    return lines;\n  }\n}\n// prettier-ignore\nLineDecoder.NEWLINE_CHARS = new Set(['\\n', '\\r']);\nLineDecoder.NEWLINE_REGEXP = /\\r\\n|[\\n\\r]/g;","map":{"version":3,"names":["OpenAIError","LineDecoder","constructor","buffer","trailingCR","decode","chunk","text","decodeText","endsWith","slice","trailingNewline","NEWLINE_CHARS","has","length","lines","split","NEWLINE_REGEXP","pop","push","join","bytes","Buffer","toString","Uint8Array","from","name","TextDecoder","ArrayBuffer","textDecoder","flush","Set"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/openai/src/internal/decoders/line.ts"],"sourcesContent":["import { OpenAIError } from '../../error';\n\nexport type Bytes = string | ArrayBuffer | Uint8Array | Buffer | null | undefined;\n\n/**\n * A re-implementation of httpx's `LineDecoder` in Python that handles incrementally\n * reading lines from text.\n *\n * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258\n */\nexport class LineDecoder {\n  // prettier-ignore\n  static NEWLINE_CHARS = new Set(['\\n', '\\r']);\n  static NEWLINE_REGEXP = /\\r\\n|[\\n\\r]/g;\n\n  buffer: string[];\n  trailingCR: boolean;\n  textDecoder: any; // TextDecoder found in browsers; not typed to avoid pulling in either \"dom\" or \"node\" types.\n\n  constructor() {\n    this.buffer = [];\n    this.trailingCR = false;\n  }\n\n  decode(chunk: Bytes): string[] {\n    let text = this.decodeText(chunk);\n\n    if (this.trailingCR) {\n      text = '\\r' + text;\n      this.trailingCR = false;\n    }\n    if (text.endsWith('\\r')) {\n      this.trailingCR = true;\n      text = text.slice(0, -1);\n    }\n\n    if (!text) {\n      return [];\n    }\n\n    const trailingNewline = LineDecoder.NEWLINE_CHARS.has(text[text.length - 1] || '');\n    let lines = text.split(LineDecoder.NEWLINE_REGEXP);\n\n    // if there is a trailing new line then the last entry will be an empty\n    // string which we don't care about\n    if (trailingNewline) {\n      lines.pop();\n    }\n\n    if (lines.length === 1 && !trailingNewline) {\n      this.buffer.push(lines[0]!);\n      return [];\n    }\n\n    if (this.buffer.length > 0) {\n      lines = [this.buffer.join('') + lines[0], ...lines.slice(1)];\n      this.buffer = [];\n    }\n\n    if (!trailingNewline) {\n      this.buffer = [lines.pop() || ''];\n    }\n\n    return lines;\n  }\n\n  decodeText(bytes: Bytes): string {\n    if (bytes == null) return '';\n    if (typeof bytes === 'string') return bytes;\n\n    // Node:\n    if (typeof Buffer !== 'undefined') {\n      if (bytes instanceof Buffer) {\n        return bytes.toString();\n      }\n      if (bytes instanceof Uint8Array) {\n        return Buffer.from(bytes).toString();\n      }\n\n      throw new OpenAIError(\n        `Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global \"Buffer\" defined, which this library assumes to be Node. Please report this error.`,\n      );\n    }\n\n    // Browser\n    if (typeof TextDecoder !== 'undefined') {\n      if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {\n        this.textDecoder ??= new TextDecoder('utf8');\n        return this.textDecoder.decode(bytes);\n      }\n\n      throw new OpenAIError(\n        `Unexpected: received non-Uint8Array/ArrayBuffer (${\n          (bytes as any).constructor.name\n        }) in a web platform. Please report this error.`,\n      );\n    }\n\n    throw new OpenAIError(\n      `Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`,\n    );\n  }\n\n  flush(): string[] {\n    if (!this.buffer.length && !this.trailingCR) {\n      return [];\n    }\n\n    const lines = [this.buffer.join('')];\n    this.buffer = [];\n    this.trailingCR = false;\n    return lines;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}