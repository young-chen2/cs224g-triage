{"ast":null,"code":"// @ts-nocheck\n// Inlined to deal with portability issues\n// Originally from: https://github.com/isaacs/sax-js\nconst initializeSax = function () {\n  const sax = {};\n  sax.parser = function (strict, opt) {\n    return new SAXParser(strict, opt);\n  };\n  sax.SAXParser = SAXParser;\n  sax.SAXStream = SAXStream;\n  sax.createStream = createStream;\n  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n  // since that's the earliest that a buffer overrun could occur.  This way, checks are\n  // as rare as required, but as often as necessary to ensure never crossing this bound.\n  // Furthermore, buffers are only tested at most once per write(), so passing a very\n  // large string into write() might have undesirable effects, but this is manageable by\n  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n  // edge case, result in creating at most one complete copy of the string passed in.\n  // Set to Infinity to have unlimited buffers.\n  sax.MAX_BUFFER_LENGTH = 64 * 1024;\n  const buffers = [\"comment\", \"sgmlDecl\", \"textNode\", \"tagName\", \"doctype\", \"procInstName\", \"procInstBody\", \"entity\", \"attribName\", \"attribValue\", \"cdata\", \"script\"];\n  sax.EVENTS = [\"text\", \"processinginstruction\", \"sgmldeclaration\", \"doctype\", \"comment\", \"opentagstart\", \"attribute\", \"opentag\", \"closetag\", \"opencdata\", \"cdata\", \"closecdata\", \"error\", \"end\", \"ready\", \"script\", \"opennamespace\", \"closenamespace\"];\n  function SAXParser(strict, opt) {\n    if (!(this instanceof SAXParser)) {\n      return new SAXParser(strict, opt);\n    }\n    var parser = this;\n    clearBuffers(parser);\n    parser.q = parser.c = \"\";\n    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;\n    parser.opt = opt || {};\n    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;\n    parser.looseCase = parser.opt.lowercase ? \"toLowerCase\" : \"toUpperCase\";\n    parser.tags = [];\n    parser.closed = parser.closedRoot = parser.sawRoot = false;\n    parser.tag = parser.error = null;\n    parser.strict = !!strict;\n    parser.noscript = !!(strict || parser.opt.noscript);\n    parser.state = S.BEGIN;\n    parser.strictEntities = parser.opt.strictEntities;\n    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);\n    parser.attribList = [];\n    // namespaces form a prototype chain.\n    // it always points at the current tag,\n    // which protos to its parent tag.\n    if (parser.opt.xmlns) {\n      parser.ns = Object.create(rootNS);\n    }\n    // mostly just for error reporting\n    parser.trackPosition = parser.opt.position !== false;\n    if (parser.trackPosition) {\n      parser.position = parser.line = parser.column = 0;\n    }\n    emit(parser, \"onready\");\n  }\n  if (!Object.create) {\n    Object.create = function (o) {\n      function F() {}\n      F.prototype = o;\n      var newf = new F();\n      return newf;\n    };\n  }\n  if (!Object.keys) {\n    Object.keys = function (o) {\n      var a = [];\n      for (var i in o) if (o.hasOwnProperty(i)) a.push(i);\n      return a;\n    };\n  }\n  function checkBufferLength(parser) {\n    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);\n    var maxActual = 0;\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      var len = parser[buffers[i]].length;\n      if (len > maxAllowed) {\n        // Text/cdata nodes can get big, and since they're buffered,\n        // we can get here under normal conditions.\n        // Avoid issues by emitting the text node now,\n        // so at least it won't get any bigger.\n        switch (buffers[i]) {\n          case \"textNode\":\n            closeText(parser);\n            break;\n          case \"cdata\":\n            emitNode(parser, \"oncdata\", parser.cdata);\n            parser.cdata = \"\";\n            break;\n          case \"script\":\n            emitNode(parser, \"onscript\", parser.script);\n            parser.script = \"\";\n            break;\n          default:\n            error(parser, \"Max buffer length exceeded: \" + buffers[i]);\n        }\n      }\n      maxActual = Math.max(maxActual, len);\n    }\n    // schedule the next check for the earliest possible buffer overrun.\n    var m = sax.MAX_BUFFER_LENGTH - maxActual;\n    parser.bufferCheckPosition = m + parser.position;\n  }\n  function clearBuffers(parser) {\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      parser[buffers[i]] = \"\";\n    }\n  }\n  function flushBuffers(parser) {\n    closeText(parser);\n    if (parser.cdata !== \"\") {\n      emitNode(parser, \"oncdata\", parser.cdata);\n      parser.cdata = \"\";\n    }\n    if (parser.script !== \"\") {\n      emitNode(parser, \"onscript\", parser.script);\n      parser.script = \"\";\n    }\n  }\n  SAXParser.prototype = {\n    end: function () {\n      end(this);\n    },\n    write: write,\n    resume: function () {\n      this.error = null;\n      return this;\n    },\n    close: function () {\n      return this.write(null);\n    },\n    flush: function () {\n      flushBuffers(this);\n    }\n  };\n  var Stream = ReadableStream;\n  if (!Stream) Stream = function () {};\n  var streamWraps = sax.EVENTS.filter(function (ev) {\n    return ev !== \"error\" && ev !== \"end\";\n  });\n  function createStream(strict, opt) {\n    return new SAXStream(strict, opt);\n  }\n  function SAXStream(strict, opt) {\n    if (!(this instanceof SAXStream)) {\n      return new SAXStream(strict, opt);\n    }\n    Stream.apply(this);\n    this._parser = new SAXParser(strict, opt);\n    this.writable = true;\n    this.readable = true;\n    var me = this;\n    this._parser.onend = function () {\n      me.emit(\"end\");\n    };\n    this._parser.onerror = function (er) {\n      me.emit(\"error\", er);\n      // if didn't throw, then means error was handled.\n      // go ahead and clear error, so we can write again.\n      me._parser.error = null;\n    };\n    this._decoder = null;\n    streamWraps.forEach(function (ev) {\n      Object.defineProperty(me, \"on\" + ev, {\n        get: function () {\n          return me._parser[\"on\" + ev];\n        },\n        set: function (h) {\n          if (!h) {\n            me.removeAllListeners(ev);\n            me._parser[\"on\" + ev] = h;\n            return h;\n          }\n          me.on(ev, h);\n        },\n        enumerable: true,\n        configurable: false\n      });\n    });\n  }\n  SAXStream.prototype = Object.create(Stream.prototype, {\n    constructor: {\n      value: SAXStream\n    }\n  });\n  SAXStream.prototype.write = function (data) {\n    this._parser.write(data.toString());\n    this.emit(\"data\", data);\n    return true;\n  };\n  SAXStream.prototype.end = function (chunk) {\n    if (chunk && chunk.length) {\n      this.write(chunk);\n    }\n    this._parser.end();\n    return true;\n  };\n  SAXStream.prototype.on = function (ev, handler) {\n    var me = this;\n    if (!me._parser[\"on\" + ev] && streamWraps.indexOf(ev) !== -1) {\n      me._parser[\"on\" + ev] = function () {\n        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);\n        args.splice(0, 0, ev);\n        me.emit.apply(me, args);\n      };\n    }\n    return Stream.prototype.on.call(me, ev, handler);\n  };\n  // this really needs to be replaced with character classes.\n  // XML allows all manner of ridiculous numbers and digits.\n  var CDATA = \"[CDATA[\";\n  var DOCTYPE = \"DOCTYPE\";\n  var XML_NAMESPACE = \"http://www.w3.org/XML/1998/namespace\";\n  var XMLNS_NAMESPACE = \"http://www.w3.org/2000/xmlns/\";\n  var rootNS = {\n    xml: XML_NAMESPACE,\n    xmlns: XMLNS_NAMESPACE\n  };\n  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n  // This implementation works on strings, a single character at a time\n  // as such, it cannot ever support astral-plane characters (10000-EFFFF)\n  // without a significant breaking change to either this  parser, or the\n  // JavaScript language.  Implementation of an emoji-capable xml parser\n  // is left as an exercise for the reader.\n  var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n  var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\n  var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n  var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\n  function isWhitespace(c) {\n    return c === \" \" || c === \"\\n\" || c === \"\\r\" || c === \"\\t\";\n  }\n  function isQuote(c) {\n    return c === '\"' || c === \"'\";\n  }\n  function isAttribEnd(c) {\n    return c === \">\" || isWhitespace(c);\n  }\n  function isMatch(regex, c) {\n    return regex.test(c);\n  }\n  function notMatch(regex, c) {\n    return !isMatch(regex, c);\n  }\n  var S = 0;\n  sax.STATE = {\n    BEGIN: S++,\n    BEGIN_WHITESPACE: S++,\n    TEXT: S++,\n    TEXT_ENTITY: S++,\n    OPEN_WAKA: S++,\n    SGML_DECL: S++,\n    SGML_DECL_QUOTED: S++,\n    DOCTYPE: S++,\n    DOCTYPE_QUOTED: S++,\n    DOCTYPE_DTD: S++,\n    DOCTYPE_DTD_QUOTED: S++,\n    COMMENT_STARTING: S++,\n    COMMENT: S++,\n    COMMENT_ENDING: S++,\n    COMMENT_ENDED: S++,\n    CDATA: S++,\n    CDATA_ENDING: S++,\n    CDATA_ENDING_2: S++,\n    PROC_INST: S++,\n    PROC_INST_BODY: S++,\n    PROC_INST_ENDING: S++,\n    OPEN_TAG: S++,\n    OPEN_TAG_SLASH: S++,\n    ATTRIB: S++,\n    ATTRIB_NAME: S++,\n    ATTRIB_NAME_SAW_WHITE: S++,\n    ATTRIB_VALUE: S++,\n    ATTRIB_VALUE_QUOTED: S++,\n    ATTRIB_VALUE_CLOSED: S++,\n    ATTRIB_VALUE_UNQUOTED: S++,\n    ATTRIB_VALUE_ENTITY_Q: S++,\n    ATTRIB_VALUE_ENTITY_U: S++,\n    CLOSE_TAG: S++,\n    CLOSE_TAG_SAW_WHITE: S++,\n    SCRIPT: S++,\n    SCRIPT_ENDING: S++ // <script> ... <\n  };\n  sax.XML_ENTITIES = {\n    amp: \"&\",\n    gt: \">\",\n    lt: \"<\",\n    quot: '\"',\n    apos: \"'\"\n  };\n  sax.ENTITIES = {\n    amp: \"&\",\n    gt: \">\",\n    lt: \"<\",\n    quot: '\"',\n    apos: \"'\",\n    AElig: 198,\n    Aacute: 193,\n    Acirc: 194,\n    Agrave: 192,\n    Aring: 197,\n    Atilde: 195,\n    Auml: 196,\n    Ccedil: 199,\n    ETH: 208,\n    Eacute: 201,\n    Ecirc: 202,\n    Egrave: 200,\n    Euml: 203,\n    Iacute: 205,\n    Icirc: 206,\n    Igrave: 204,\n    Iuml: 207,\n    Ntilde: 209,\n    Oacute: 211,\n    Ocirc: 212,\n    Ograve: 210,\n    Oslash: 216,\n    Otilde: 213,\n    Ouml: 214,\n    THORN: 222,\n    Uacute: 218,\n    Ucirc: 219,\n    Ugrave: 217,\n    Uuml: 220,\n    Yacute: 221,\n    aacute: 225,\n    acirc: 226,\n    aelig: 230,\n    agrave: 224,\n    aring: 229,\n    atilde: 227,\n    auml: 228,\n    ccedil: 231,\n    eacute: 233,\n    ecirc: 234,\n    egrave: 232,\n    eth: 240,\n    euml: 235,\n    iacute: 237,\n    icirc: 238,\n    igrave: 236,\n    iuml: 239,\n    ntilde: 241,\n    oacute: 243,\n    ocirc: 244,\n    ograve: 242,\n    oslash: 248,\n    otilde: 245,\n    ouml: 246,\n    szlig: 223,\n    thorn: 254,\n    uacute: 250,\n    ucirc: 251,\n    ugrave: 249,\n    uuml: 252,\n    yacute: 253,\n    yuml: 255,\n    copy: 169,\n    reg: 174,\n    nbsp: 160,\n    iexcl: 161,\n    cent: 162,\n    pound: 163,\n    curren: 164,\n    yen: 165,\n    brvbar: 166,\n    sect: 167,\n    uml: 168,\n    ordf: 170,\n    laquo: 171,\n    not: 172,\n    shy: 173,\n    macr: 175,\n    deg: 176,\n    plusmn: 177,\n    sup1: 185,\n    sup2: 178,\n    sup3: 179,\n    acute: 180,\n    micro: 181,\n    para: 182,\n    middot: 183,\n    cedil: 184,\n    ordm: 186,\n    raquo: 187,\n    frac14: 188,\n    frac12: 189,\n    frac34: 190,\n    iquest: 191,\n    times: 215,\n    divide: 247,\n    OElig: 338,\n    oelig: 339,\n    Scaron: 352,\n    scaron: 353,\n    Yuml: 376,\n    fnof: 402,\n    circ: 710,\n    tilde: 732,\n    Alpha: 913,\n    Beta: 914,\n    Gamma: 915,\n    Delta: 916,\n    Epsilon: 917,\n    Zeta: 918,\n    Eta: 919,\n    Theta: 920,\n    Iota: 921,\n    Kappa: 922,\n    Lambda: 923,\n    Mu: 924,\n    Nu: 925,\n    Xi: 926,\n    Omicron: 927,\n    Pi: 928,\n    Rho: 929,\n    Sigma: 931,\n    Tau: 932,\n    Upsilon: 933,\n    Phi: 934,\n    Chi: 935,\n    Psi: 936,\n    Omega: 937,\n    alpha: 945,\n    beta: 946,\n    gamma: 947,\n    delta: 948,\n    epsilon: 949,\n    zeta: 950,\n    eta: 951,\n    theta: 952,\n    iota: 953,\n    kappa: 954,\n    lambda: 955,\n    mu: 956,\n    nu: 957,\n    xi: 958,\n    omicron: 959,\n    pi: 960,\n    rho: 961,\n    sigmaf: 962,\n    sigma: 963,\n    tau: 964,\n    upsilon: 965,\n    phi: 966,\n    chi: 967,\n    psi: 968,\n    omega: 969,\n    thetasym: 977,\n    upsih: 978,\n    piv: 982,\n    ensp: 8194,\n    emsp: 8195,\n    thinsp: 8201,\n    zwnj: 8204,\n    zwj: 8205,\n    lrm: 8206,\n    rlm: 8207,\n    ndash: 8211,\n    mdash: 8212,\n    lsquo: 8216,\n    rsquo: 8217,\n    sbquo: 8218,\n    ldquo: 8220,\n    rdquo: 8221,\n    bdquo: 8222,\n    dagger: 8224,\n    Dagger: 8225,\n    bull: 8226,\n    hellip: 8230,\n    permil: 8240,\n    prime: 8242,\n    Prime: 8243,\n    lsaquo: 8249,\n    rsaquo: 8250,\n    oline: 8254,\n    frasl: 8260,\n    euro: 8364,\n    image: 8465,\n    weierp: 8472,\n    real: 8476,\n    trade: 8482,\n    alefsym: 8501,\n    larr: 8592,\n    uarr: 8593,\n    rarr: 8594,\n    darr: 8595,\n    harr: 8596,\n    crarr: 8629,\n    lArr: 8656,\n    uArr: 8657,\n    rArr: 8658,\n    dArr: 8659,\n    hArr: 8660,\n    forall: 8704,\n    part: 8706,\n    exist: 8707,\n    empty: 8709,\n    nabla: 8711,\n    isin: 8712,\n    notin: 8713,\n    ni: 8715,\n    prod: 8719,\n    sum: 8721,\n    minus: 8722,\n    lowast: 8727,\n    radic: 8730,\n    prop: 8733,\n    infin: 8734,\n    ang: 8736,\n    and: 8743,\n    or: 8744,\n    cap: 8745,\n    cup: 8746,\n    int: 8747,\n    there4: 8756,\n    sim: 8764,\n    cong: 8773,\n    asymp: 8776,\n    ne: 8800,\n    equiv: 8801,\n    le: 8804,\n    ge: 8805,\n    sub: 8834,\n    sup: 8835,\n    nsub: 8836,\n    sube: 8838,\n    supe: 8839,\n    oplus: 8853,\n    otimes: 8855,\n    perp: 8869,\n    sdot: 8901,\n    lceil: 8968,\n    rceil: 8969,\n    lfloor: 8970,\n    rfloor: 8971,\n    lang: 9001,\n    rang: 9002,\n    loz: 9674,\n    spades: 9824,\n    clubs: 9827,\n    hearts: 9829,\n    diams: 9830\n  };\n  Object.keys(sax.ENTITIES).forEach(function (key) {\n    var e = sax.ENTITIES[key];\n    var s = typeof e === \"number\" ? String.fromCharCode(e) : e;\n    sax.ENTITIES[key] = s;\n  });\n  for (var s in sax.STATE) {\n    sax.STATE[sax.STATE[s]] = s;\n  }\n  // shorthand\n  S = sax.STATE;\n  function emit(parser, event, data) {\n    parser[event] && parser[event](data);\n  }\n  function emitNode(parser, nodeType, data) {\n    if (parser.textNode) closeText(parser);\n    emit(parser, nodeType, data);\n  }\n  function closeText(parser) {\n    parser.textNode = textopts(parser.opt, parser.textNode);\n    if (parser.textNode) emit(parser, \"ontext\", parser.textNode);\n    parser.textNode = \"\";\n  }\n  function textopts(opt, text) {\n    if (opt.trim) text = text.trim();\n    if (opt.normalize) text = text.replace(/\\s+/g, \" \");\n    return text;\n  }\n  function error(parser, er) {\n    closeText(parser);\n    if (parser.trackPosition) {\n      er += \"\\nLine: \" + parser.line + \"\\nColumn: \" + parser.column + \"\\nChar: \" + parser.c;\n    }\n    er = new Error(er);\n    parser.error = er;\n    emit(parser, \"onerror\", er);\n    return parser;\n  }\n  function end(parser) {\n    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, \"Unclosed root tag\");\n    if (parser.state !== S.BEGIN && parser.state !== S.BEGIN_WHITESPACE && parser.state !== S.TEXT) {\n      error(parser, \"Unexpected end\");\n    }\n    closeText(parser);\n    parser.c = \"\";\n    parser.closed = true;\n    emit(parser, \"onend\");\n    SAXParser.call(parser, parser.strict, parser.opt);\n    return parser;\n  }\n  function strictFail(parser, message) {\n    if (typeof parser !== \"object\" || !(parser instanceof SAXParser)) {\n      throw new Error(\"bad call to strictFail\");\n    }\n    if (parser.strict) {\n      error(parser, message);\n    }\n  }\n  function newTag(parser) {\n    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]();\n    var parent = parser.tags[parser.tags.length - 1] || parser;\n    var tag = parser.tag = {\n      name: parser.tagName,\n      attributes: {}\n    };\n    // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n    if (parser.opt.xmlns) {\n      tag.ns = parent.ns;\n    }\n    parser.attribList.length = 0;\n    emitNode(parser, \"onopentagstart\", tag);\n  }\n  function qname(name, attribute) {\n    var i = name.indexOf(\":\");\n    var qualName = i < 0 ? [\"\", name] : name.split(\":\");\n    var prefix = qualName[0];\n    var local = qualName[1];\n    // <x \"xmlns\"=\"http://foo\">\n    if (attribute && name === \"xmlns\") {\n      prefix = \"xmlns\";\n      local = \"\";\n    }\n    return {\n      prefix: prefix,\n      local: local\n    };\n  }\n  function attrib(parser) {\n    if (!parser.strict) {\n      parser.attribName = parser.attribName[parser.looseCase]();\n    }\n    if (parser.attribList.indexOf(parser.attribName) !== -1 || parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n      parser.attribName = parser.attribValue = \"\";\n      return;\n    }\n    if (parser.opt.xmlns) {\n      var qn = qname(parser.attribName, true);\n      var prefix = qn.prefix;\n      var local = qn.local;\n      if (prefix === \"xmlns\") {\n        // namespace binding attribute. push the binding into scope\n        if (local === \"xml\" && parser.attribValue !== XML_NAMESPACE) {\n          strictFail(parser, \"xml: prefix must be bound to \" + XML_NAMESPACE + \"\\n\" + \"Actual: \" + parser.attribValue);\n        } else if (local === \"xmlns\" && parser.attribValue !== XMLNS_NAMESPACE) {\n          strictFail(parser, \"xmlns: prefix must be bound to \" + XMLNS_NAMESPACE + \"\\n\" + \"Actual: \" + parser.attribValue);\n        } else {\n          var tag = parser.tag;\n          var parent = parser.tags[parser.tags.length - 1] || parser;\n          if (tag.ns === parent.ns) {\n            tag.ns = Object.create(parent.ns);\n          }\n          tag.ns[local] = parser.attribValue;\n        }\n      }\n      // defer onattribute events until all attributes have been seen\n      // so any new bindings can take effect. preserve attribute order\n      // so deferred events can be emitted in document order\n      parser.attribList.push([parser.attribName, parser.attribValue]);\n    } else {\n      // in non-xmlns mode, we can emit the event right away\n      parser.tag.attributes[parser.attribName] = parser.attribValue;\n      emitNode(parser, \"onattribute\", {\n        name: parser.attribName,\n        value: parser.attribValue\n      });\n    }\n    parser.attribName = parser.attribValue = \"\";\n  }\n  function openTag(parser, selfClosing) {\n    if (parser.opt.xmlns) {\n      // emit namespace binding events\n      var tag = parser.tag;\n      // add namespace info to tag\n      var qn = qname(parser.tagName);\n      tag.prefix = qn.prefix;\n      tag.local = qn.local;\n      tag.uri = tag.ns[qn.prefix] || \"\";\n      if (tag.prefix && !tag.uri) {\n        strictFail(parser, \"Unbound namespace prefix: \" + JSON.stringify(parser.tagName));\n        tag.uri = qn.prefix;\n      }\n      var parent = parser.tags[parser.tags.length - 1] || parser;\n      if (tag.ns && parent.ns !== tag.ns) {\n        Object.keys(tag.ns).forEach(function (p) {\n          emitNode(parser, \"onopennamespace\", {\n            prefix: p,\n            uri: tag.ns[p]\n          });\n        });\n      }\n      // handle deferred onattribute events\n      // Note: do not apply default ns to attributes:\n      //   http://www.w3.org/TR/REC-xml-names/#defaulting\n      for (var i = 0, l = parser.attribList.length; i < l; i++) {\n        var nv = parser.attribList[i];\n        var name = nv[0];\n        var value = nv[1];\n        var qualName = qname(name, true);\n        var prefix = qualName.prefix;\n        var local = qualName.local;\n        var uri = prefix === \"\" ? \"\" : tag.ns[prefix] || \"\";\n        var a = {\n          name: name,\n          value: value,\n          prefix: prefix,\n          local: local,\n          uri: uri\n        };\n        // if there's any attributes with an undefined namespace,\n        // then fail on them now.\n        if (prefix && prefix !== \"xmlns\" && !uri) {\n          strictFail(parser, \"Unbound namespace prefix: \" + JSON.stringify(prefix));\n          a.uri = prefix;\n        }\n        parser.tag.attributes[name] = a;\n        emitNode(parser, \"onattribute\", a);\n      }\n      parser.attribList.length = 0;\n    }\n    parser.tag.isSelfClosing = !!selfClosing;\n    // process the tag\n    parser.sawRoot = true;\n    parser.tags.push(parser.tag);\n    emitNode(parser, \"onopentag\", parser.tag);\n    if (!selfClosing) {\n      // special case for <script> in non-strict mode.\n      if (!parser.noscript && parser.tagName.toLowerCase() === \"script\") {\n        parser.state = S.SCRIPT;\n      } else {\n        parser.state = S.TEXT;\n      }\n      parser.tag = null;\n      parser.tagName = \"\";\n    }\n    parser.attribName = parser.attribValue = \"\";\n    parser.attribList.length = 0;\n  }\n  function closeTag(parser) {\n    if (!parser.tagName) {\n      strictFail(parser, \"Weird empty close tag.\");\n      parser.textNode += \"</>\";\n      parser.state = S.TEXT;\n      return;\n    }\n    if (parser.script) {\n      if (parser.tagName !== \"script\") {\n        parser.script += \"</\" + parser.tagName + \">\";\n        parser.tagName = \"\";\n        parser.state = S.SCRIPT;\n        return;\n      }\n      emitNode(parser, \"onscript\", parser.script);\n      parser.script = \"\";\n    }\n    // first make sure that the closing tag actually exists.\n    // <a><b></c></b></a> will close everything, otherwise.\n    var t = parser.tags.length;\n    var tagName = parser.tagName;\n    if (!parser.strict) {\n      tagName = tagName[parser.looseCase]();\n    }\n    var closeTo = tagName;\n    while (t--) {\n      var close = parser.tags[t];\n      if (close.name !== closeTo) {\n        // fail the first time in strict mode\n        strictFail(parser, \"Unexpected close tag\");\n      } else {\n        break;\n      }\n    }\n    // didn't find it.  we already failed for strict, so just abort.\n    if (t < 0) {\n      strictFail(parser, \"Unmatched closing tag: \" + parser.tagName);\n      parser.textNode += \"</\" + parser.tagName + \">\";\n      parser.state = S.TEXT;\n      return;\n    }\n    parser.tagName = tagName;\n    var s = parser.tags.length;\n    while (s-- > t) {\n      var tag = parser.tag = parser.tags.pop();\n      parser.tagName = parser.tag.name;\n      emitNode(parser, \"onclosetag\", parser.tagName);\n      var x = {};\n      for (var i in tag.ns) {\n        x[i] = tag.ns[i];\n      }\n      var parent = parser.tags[parser.tags.length - 1] || parser;\n      if (parser.opt.xmlns && tag.ns !== parent.ns) {\n        // remove namespace bindings introduced by tag\n        Object.keys(tag.ns).forEach(function (p) {\n          var n = tag.ns[p];\n          emitNode(parser, \"onclosenamespace\", {\n            prefix: p,\n            uri: n\n          });\n        });\n      }\n    }\n    if (t === 0) parser.closedRoot = true;\n    parser.tagName = parser.attribValue = parser.attribName = \"\";\n    parser.attribList.length = 0;\n    parser.state = S.TEXT;\n  }\n  function parseEntity(parser) {\n    var entity = parser.entity;\n    var entityLC = entity.toLowerCase();\n    var num;\n    var numStr = \"\";\n    if (parser.ENTITIES[entity]) {\n      return parser.ENTITIES[entity];\n    }\n    if (parser.ENTITIES[entityLC]) {\n      return parser.ENTITIES[entityLC];\n    }\n    entity = entityLC;\n    if (entity.charAt(0) === \"#\") {\n      if (entity.charAt(1) === \"x\") {\n        entity = entity.slice(2);\n        num = parseInt(entity, 16);\n        numStr = num.toString(16);\n      } else {\n        entity = entity.slice(1);\n        num = parseInt(entity, 10);\n        numStr = num.toString(10);\n      }\n    }\n    entity = entity.replace(/^0+/, \"\");\n    if (isNaN(num) || numStr.toLowerCase() !== entity) {\n      strictFail(parser, \"Invalid character entity\");\n      return \"&\" + parser.entity + \";\";\n    }\n    return String.fromCodePoint(num);\n  }\n  function beginWhiteSpace(parser, c) {\n    if (c === \"<\") {\n      parser.state = S.OPEN_WAKA;\n      parser.startTagPosition = parser.position;\n    } else if (!isWhitespace(c)) {\n      // have to process this as a text node.\n      // weird, but happens.\n      strictFail(parser, \"Non-whitespace before first tag.\");\n      parser.textNode = c;\n      parser.state = S.TEXT;\n    }\n  }\n  function charAt(chunk, i) {\n    var result = \"\";\n    if (i < chunk.length) {\n      result = chunk.charAt(i);\n    }\n    return result;\n  }\n  function write(chunk) {\n    var parser = this;\n    if (this.error) {\n      throw this.error;\n    }\n    if (parser.closed) {\n      return error(parser, \"Cannot write after close. Assign an onready handler.\");\n    }\n    if (chunk === null) {\n      return end(parser);\n    }\n    if (typeof chunk === \"object\") {\n      chunk = chunk.toString();\n    }\n    var i = 0;\n    var c = \"\";\n    while (true) {\n      c = charAt(chunk, i++);\n      parser.c = c;\n      if (!c) {\n        break;\n      }\n      if (parser.trackPosition) {\n        parser.position++;\n        if (c === \"\\n\") {\n          parser.line++;\n          parser.column = 0;\n        } else {\n          parser.column++;\n        }\n      }\n      switch (parser.state) {\n        case S.BEGIN:\n          parser.state = S.BEGIN_WHITESPACE;\n          if (c === \"\\uFEFF\") {\n            continue;\n          }\n          beginWhiteSpace(parser, c);\n          continue;\n        case S.BEGIN_WHITESPACE:\n          beginWhiteSpace(parser, c);\n          continue;\n        case S.TEXT:\n          if (parser.sawRoot && !parser.closedRoot) {\n            var starti = i - 1;\n            while (c && c !== \"<\" && c !== \"&\") {\n              c = charAt(chunk, i++);\n              if (c && parser.trackPosition) {\n                parser.position++;\n                if (c === \"\\n\") {\n                  parser.line++;\n                  parser.column = 0;\n                } else {\n                  parser.column++;\n                }\n              }\n            }\n            parser.textNode += chunk.substring(starti, i - 1);\n          }\n          if (c === \"<\" && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n            parser.state = S.OPEN_WAKA;\n            parser.startTagPosition = parser.position;\n          } else {\n            if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {\n              strictFail(parser, \"Text data outside of root node.\");\n            }\n            if (c === \"&\") {\n              parser.state = S.TEXT_ENTITY;\n            } else {\n              parser.textNode += c;\n            }\n          }\n          continue;\n        case S.SCRIPT:\n          // only non-strict\n          if (c === \"<\") {\n            parser.state = S.SCRIPT_ENDING;\n          } else {\n            parser.script += c;\n          }\n          continue;\n        case S.SCRIPT_ENDING:\n          if (c === \"/\") {\n            parser.state = S.CLOSE_TAG;\n          } else {\n            parser.script += \"<\" + c;\n            parser.state = S.SCRIPT;\n          }\n          continue;\n        case S.OPEN_WAKA:\n          // either a /, ?, !, or text is coming next.\n          if (c === \"!\") {\n            parser.state = S.SGML_DECL;\n            parser.sgmlDecl = \"\";\n          } else if (isWhitespace(c)) {\n            // wait for it...\n          } else if (isMatch(nameStart, c)) {\n            parser.state = S.OPEN_TAG;\n            parser.tagName = c;\n          } else if (c === \"/\") {\n            parser.state = S.CLOSE_TAG;\n            parser.tagName = \"\";\n          } else if (c === \"?\") {\n            parser.state = S.PROC_INST;\n            parser.procInstName = parser.procInstBody = \"\";\n          } else {\n            strictFail(parser, \"Unencoded <\");\n            // if there was some whitespace, then add that in.\n            if (parser.startTagPosition + 1 < parser.position) {\n              var pad = parser.position - parser.startTagPosition;\n              c = new Array(pad).join(\" \") + c;\n            }\n            parser.textNode += \"<\" + c;\n            parser.state = S.TEXT;\n          }\n          continue;\n        case S.SGML_DECL:\n          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n            emitNode(parser, \"onopencdata\");\n            parser.state = S.CDATA;\n            parser.sgmlDecl = \"\";\n            parser.cdata = \"\";\n          } else if (parser.sgmlDecl + c === \"--\") {\n            parser.state = S.COMMENT;\n            parser.comment = \"\";\n            parser.sgmlDecl = \"\";\n          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n            parser.state = S.DOCTYPE;\n            if (parser.doctype || parser.sawRoot) {\n              strictFail(parser, \"Inappropriately located doctype declaration\");\n            }\n            parser.doctype = \"\";\n            parser.sgmlDecl = \"\";\n          } else if (c === \">\") {\n            emitNode(parser, \"onsgmldeclaration\", parser.sgmlDecl);\n            parser.sgmlDecl = \"\";\n            parser.state = S.TEXT;\n          } else if (isQuote(c)) {\n            parser.state = S.SGML_DECL_QUOTED;\n            parser.sgmlDecl += c;\n          } else {\n            parser.sgmlDecl += c;\n          }\n          continue;\n        case S.SGML_DECL_QUOTED:\n          if (c === parser.q) {\n            parser.state = S.SGML_DECL;\n            parser.q = \"\";\n          }\n          parser.sgmlDecl += c;\n          continue;\n        case S.DOCTYPE:\n          if (c === \">\") {\n            parser.state = S.TEXT;\n            emitNode(parser, \"ondoctype\", parser.doctype);\n            parser.doctype = true; // just remember that we saw it.\n          } else {\n            parser.doctype += c;\n            if (c === \"[\") {\n              parser.state = S.DOCTYPE_DTD;\n            } else if (isQuote(c)) {\n              parser.state = S.DOCTYPE_QUOTED;\n              parser.q = c;\n            }\n          }\n          continue;\n        case S.DOCTYPE_QUOTED:\n          parser.doctype += c;\n          if (c === parser.q) {\n            parser.q = \"\";\n            parser.state = S.DOCTYPE;\n          }\n          continue;\n        case S.DOCTYPE_DTD:\n          parser.doctype += c;\n          if (c === \"]\") {\n            parser.state = S.DOCTYPE;\n          } else if (isQuote(c)) {\n            parser.state = S.DOCTYPE_DTD_QUOTED;\n            parser.q = c;\n          }\n          continue;\n        case S.DOCTYPE_DTD_QUOTED:\n          parser.doctype += c;\n          if (c === parser.q) {\n            parser.state = S.DOCTYPE_DTD;\n            parser.q = \"\";\n          }\n          continue;\n        case S.COMMENT:\n          if (c === \"-\") {\n            parser.state = S.COMMENT_ENDING;\n          } else {\n            parser.comment += c;\n          }\n          continue;\n        case S.COMMENT_ENDING:\n          if (c === \"-\") {\n            parser.state = S.COMMENT_ENDED;\n            parser.comment = textopts(parser.opt, parser.comment);\n            if (parser.comment) {\n              emitNode(parser, \"oncomment\", parser.comment);\n            }\n            parser.comment = \"\";\n          } else {\n            parser.comment += \"-\" + c;\n            parser.state = S.COMMENT;\n          }\n          continue;\n        case S.COMMENT_ENDED:\n          if (c !== \">\") {\n            strictFail(parser, \"Malformed comment\");\n            // allow <!-- blah -- bloo --> in non-strict mode,\n            // which is a comment of \" blah -- bloo \"\n            parser.comment += \"--\" + c;\n            parser.state = S.COMMENT;\n          } else {\n            parser.state = S.TEXT;\n          }\n          continue;\n        case S.CDATA:\n          if (c === \"]\") {\n            parser.state = S.CDATA_ENDING;\n          } else {\n            parser.cdata += c;\n          }\n          continue;\n        case S.CDATA_ENDING:\n          if (c === \"]\") {\n            parser.state = S.CDATA_ENDING_2;\n          } else {\n            parser.cdata += \"]\" + c;\n            parser.state = S.CDATA;\n          }\n          continue;\n        case S.CDATA_ENDING_2:\n          if (c === \">\") {\n            if (parser.cdata) {\n              emitNode(parser, \"oncdata\", parser.cdata);\n            }\n            emitNode(parser, \"onclosecdata\");\n            parser.cdata = \"\";\n            parser.state = S.TEXT;\n          } else if (c === \"]\") {\n            parser.cdata += \"]\";\n          } else {\n            parser.cdata += \"]]\" + c;\n            parser.state = S.CDATA;\n          }\n          continue;\n        case S.PROC_INST:\n          if (c === \"?\") {\n            parser.state = S.PROC_INST_ENDING;\n          } else if (isWhitespace(c)) {\n            parser.state = S.PROC_INST_BODY;\n          } else {\n            parser.procInstName += c;\n          }\n          continue;\n        case S.PROC_INST_BODY:\n          if (!parser.procInstBody && isWhitespace(c)) {\n            continue;\n          } else if (c === \"?\") {\n            parser.state = S.PROC_INST_ENDING;\n          } else {\n            parser.procInstBody += c;\n          }\n          continue;\n        case S.PROC_INST_ENDING:\n          if (c === \">\") {\n            emitNode(parser, \"onprocessinginstruction\", {\n              name: parser.procInstName,\n              body: parser.procInstBody\n            });\n            parser.procInstName = parser.procInstBody = \"\";\n            parser.state = S.TEXT;\n          } else {\n            parser.procInstBody += \"?\" + c;\n            parser.state = S.PROC_INST_BODY;\n          }\n          continue;\n        case S.OPEN_TAG:\n          if (isMatch(nameBody, c)) {\n            parser.tagName += c;\n          } else {\n            newTag(parser);\n            if (c === \">\") {\n              openTag(parser);\n            } else if (c === \"/\") {\n              parser.state = S.OPEN_TAG_SLASH;\n            } else {\n              if (!isWhitespace(c)) {\n                strictFail(parser, \"Invalid character in tag name\");\n              }\n              parser.state = S.ATTRIB;\n            }\n          }\n          continue;\n        case S.OPEN_TAG_SLASH:\n          if (c === \">\") {\n            openTag(parser, true);\n            closeTag(parser);\n          } else {\n            strictFail(parser, \"Forward-slash in opening tag not followed by >\");\n            parser.state = S.ATTRIB;\n          }\n          continue;\n        case S.ATTRIB:\n          // haven't read the attribute name yet.\n          if (isWhitespace(c)) {\n            continue;\n          } else if (c === \">\") {\n            openTag(parser);\n          } else if (c === \"/\") {\n            parser.state = S.OPEN_TAG_SLASH;\n          } else if (isMatch(nameStart, c)) {\n            parser.attribName = c;\n            parser.attribValue = \"\";\n            parser.state = S.ATTRIB_NAME;\n          } else {\n            strictFail(parser, \"Invalid attribute name\");\n          }\n          continue;\n        case S.ATTRIB_NAME:\n          if (c === \"=\") {\n            parser.state = S.ATTRIB_VALUE;\n          } else if (c === \">\") {\n            strictFail(parser, \"Attribute without value\");\n            parser.attribValue = parser.attribName;\n            attrib(parser);\n            openTag(parser);\n          } else if (isWhitespace(c)) {\n            parser.state = S.ATTRIB_NAME_SAW_WHITE;\n          } else if (isMatch(nameBody, c)) {\n            parser.attribName += c;\n          } else {\n            strictFail(parser, \"Invalid attribute name\");\n          }\n          continue;\n        case S.ATTRIB_NAME_SAW_WHITE:\n          if (c === \"=\") {\n            parser.state = S.ATTRIB_VALUE;\n          } else if (isWhitespace(c)) {\n            continue;\n          } else {\n            strictFail(parser, \"Attribute without value\");\n            parser.tag.attributes[parser.attribName] = \"\";\n            parser.attribValue = \"\";\n            emitNode(parser, \"onattribute\", {\n              name: parser.attribName,\n              value: \"\"\n            });\n            parser.attribName = \"\";\n            if (c === \">\") {\n              openTag(parser);\n            } else if (isMatch(nameStart, c)) {\n              parser.attribName = c;\n              parser.state = S.ATTRIB_NAME;\n            } else {\n              strictFail(parser, \"Invalid attribute name\");\n              parser.state = S.ATTRIB;\n            }\n          }\n          continue;\n        case S.ATTRIB_VALUE:\n          if (isWhitespace(c)) {\n            continue;\n          } else if (isQuote(c)) {\n            parser.q = c;\n            parser.state = S.ATTRIB_VALUE_QUOTED;\n          } else {\n            strictFail(parser, \"Unquoted attribute value\");\n            parser.state = S.ATTRIB_VALUE_UNQUOTED;\n            parser.attribValue = c;\n          }\n          continue;\n        case S.ATTRIB_VALUE_QUOTED:\n          if (c !== parser.q) {\n            if (c === \"&\") {\n              parser.state = S.ATTRIB_VALUE_ENTITY_Q;\n            } else {\n              parser.attribValue += c;\n            }\n            continue;\n          }\n          attrib(parser);\n          parser.q = \"\";\n          parser.state = S.ATTRIB_VALUE_CLOSED;\n          continue;\n        case S.ATTRIB_VALUE_CLOSED:\n          if (isWhitespace(c)) {\n            parser.state = S.ATTRIB;\n          } else if (c === \">\") {\n            openTag(parser);\n          } else if (c === \"/\") {\n            parser.state = S.OPEN_TAG_SLASH;\n          } else if (isMatch(nameStart, c)) {\n            strictFail(parser, \"No whitespace between attributes\");\n            parser.attribName = c;\n            parser.attribValue = \"\";\n            parser.state = S.ATTRIB_NAME;\n          } else {\n            strictFail(parser, \"Invalid attribute name\");\n          }\n          continue;\n        case S.ATTRIB_VALUE_UNQUOTED:\n          if (!isAttribEnd(c)) {\n            if (c === \"&\") {\n              parser.state = S.ATTRIB_VALUE_ENTITY_U;\n            } else {\n              parser.attribValue += c;\n            }\n            continue;\n          }\n          attrib(parser);\n          if (c === \">\") {\n            openTag(parser);\n          } else {\n            parser.state = S.ATTRIB;\n          }\n          continue;\n        case S.CLOSE_TAG:\n          if (!parser.tagName) {\n            if (isWhitespace(c)) {\n              continue;\n            } else if (notMatch(nameStart, c)) {\n              if (parser.script) {\n                parser.script += \"</\" + c;\n                parser.state = S.SCRIPT;\n              } else {\n                strictFail(parser, \"Invalid tagname in closing tag.\");\n              }\n            } else {\n              parser.tagName = c;\n            }\n          } else if (c === \">\") {\n            closeTag(parser);\n          } else if (isMatch(nameBody, c)) {\n            parser.tagName += c;\n          } else if (parser.script) {\n            parser.script += \"</\" + parser.tagName;\n            parser.tagName = \"\";\n            parser.state = S.SCRIPT;\n          } else {\n            if (!isWhitespace(c)) {\n              strictFail(parser, \"Invalid tagname in closing tag\");\n            }\n            parser.state = S.CLOSE_TAG_SAW_WHITE;\n          }\n          continue;\n        case S.CLOSE_TAG_SAW_WHITE:\n          if (isWhitespace(c)) {\n            continue;\n          }\n          if (c === \">\") {\n            closeTag(parser);\n          } else {\n            strictFail(parser, \"Invalid characters in closing tag\");\n          }\n          continue;\n        case S.TEXT_ENTITY:\n        case S.ATTRIB_VALUE_ENTITY_Q:\n        case S.ATTRIB_VALUE_ENTITY_U:\n          var returnState;\n          var buffer;\n          switch (parser.state) {\n            case S.TEXT_ENTITY:\n              returnState = S.TEXT;\n              buffer = \"textNode\";\n              break;\n            case S.ATTRIB_VALUE_ENTITY_Q:\n              returnState = S.ATTRIB_VALUE_QUOTED;\n              buffer = \"attribValue\";\n              break;\n            case S.ATTRIB_VALUE_ENTITY_U:\n              returnState = S.ATTRIB_VALUE_UNQUOTED;\n              buffer = \"attribValue\";\n              break;\n          }\n          if (c === \";\") {\n            if (parser.opt.unparsedEntities) {\n              var parsedEntity = parseEntity(parser);\n              parser.entity = \"\";\n              parser.state = returnState;\n              parser.write(parsedEntity);\n            } else {\n              parser[buffer] += parseEntity(parser);\n              parser.entity = \"\";\n              parser.state = returnState;\n            }\n          } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {\n            parser.entity += c;\n          } else {\n            strictFail(parser, \"Invalid character in entity name\");\n            parser[buffer] += \"&\" + parser.entity + c;\n            parser.entity = \"\";\n            parser.state = returnState;\n          }\n          continue;\n        default:\n          /* istanbul ignore next */{\n            throw new Error(parser, \"Unknown state: \" + parser.state);\n          }\n      }\n    } // while\n    if (parser.position >= parser.bufferCheckPosition) {\n      checkBufferLength(parser);\n    }\n    return parser;\n  }\n  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */\n  /* istanbul ignore next */\n  if (!String.fromCodePoint) {\n    (function () {\n      var stringFromCharCode = String.fromCharCode;\n      var floor = Math.floor;\n      var fromCodePoint = function () {\n        var MAX_SIZE = 0x4000;\n        var codeUnits = [];\n        var highSurrogate;\n        var lowSurrogate;\n        var index = -1;\n        var length = arguments.length;\n        if (!length) {\n          return \"\";\n        }\n        var result = \"\";\n        while (++index < length) {\n          var codePoint = Number(arguments[index]);\n          if (!isFinite(codePoint) ||\n          // `NaN`, `+Infinity`, or `-Infinity`\n          codePoint < 0 ||\n          // not a valid Unicode code point\n          codePoint > 0x10ffff ||\n          // not a valid Unicode code point\n          floor(codePoint) !== codePoint // not an integer\n          ) {\n            throw RangeError(\"Invalid code point: \" + codePoint);\n          }\n          if (codePoint <= 0xffff) {\n            // BMP code point\n            codeUnits.push(codePoint);\n          } else {\n            // Astral code point; split in surrogate halves\n            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n            codePoint -= 0x10000;\n            highSurrogate = (codePoint >> 10) + 0xd800;\n            lowSurrogate = codePoint % 0x400 + 0xdc00;\n            codeUnits.push(highSurrogate, lowSurrogate);\n          }\n          if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n            result += stringFromCharCode.apply(null, codeUnits);\n            codeUnits.length = 0;\n          }\n        }\n        return result;\n      };\n      /* istanbul ignore next */\n      if (Object.defineProperty) {\n        Object.defineProperty(String, \"fromCodePoint\", {\n          value: fromCodePoint,\n          configurable: true,\n          writable: true\n        });\n      } else {\n        String.fromCodePoint = fromCodePoint;\n      }\n    })();\n  }\n  return sax;\n};\nconst sax = /** #__PURE__ */initializeSax();\nexport { sax };","map":{"version":3,"names":["initializeSax","sax","parser","strict","opt","SAXParser","SAXStream","createStream","MAX_BUFFER_LENGTH","buffers","EVENTS","clearBuffers","q","c","bufferCheckPosition","lowercase","lowercasetags","looseCase","tags","closed","closedRoot","sawRoot","tag","error","noscript","state","S","BEGIN","strictEntities","ENTITIES","Object","create","XML_ENTITIES","attribList","xmlns","ns","rootNS","trackPosition","position","line","column","emit","o","F","prototype","newf","keys","a","i","hasOwnProperty","push","checkBufferLength","maxAllowed","Math","max","maxActual","l","length","len","closeText","emitNode","cdata","script","m","flushBuffers","end","write","resume","close","flush","Stream","ReadableStream","streamWraps","filter","ev","apply","_parser","writable","readable","me","onend","onerror","er","_decoder","forEach","defineProperty","get","set","h","removeAllListeners","on","enumerable","configurable","constructor","value","data","toString","chunk","handler","indexOf","args","arguments","Array","splice","call","CDATA","DOCTYPE","XML_NAMESPACE","XMLNS_NAMESPACE","xml","nameStart","nameBody","entityStart","entityBody","isWhitespace","isQuote","isAttribEnd","isMatch","regex","test","notMatch","STATE","BEGIN_WHITESPACE","TEXT","TEXT_ENTITY","OPEN_WAKA","SGML_DECL","SGML_DECL_QUOTED","DOCTYPE_QUOTED","DOCTYPE_DTD","DOCTYPE_DTD_QUOTED","COMMENT_STARTING","COMMENT","COMMENT_ENDING","COMMENT_ENDED","CDATA_ENDING","CDATA_ENDING_2","PROC_INST","PROC_INST_BODY","PROC_INST_ENDING","OPEN_TAG","OPEN_TAG_SLASH","ATTRIB","ATTRIB_NAME","ATTRIB_NAME_SAW_WHITE","ATTRIB_VALUE","ATTRIB_VALUE_QUOTED","ATTRIB_VALUE_CLOSED","ATTRIB_VALUE_UNQUOTED","ATTRIB_VALUE_ENTITY_Q","ATTRIB_VALUE_ENTITY_U","CLOSE_TAG","CLOSE_TAG_SAW_WHITE","SCRIPT","SCRIPT_ENDING","amp","gt","lt","quot","apos","AElig","Aacute","Acirc","Agrave","Aring","Atilde","Auml","Ccedil","ETH","Eacute","Ecirc","Egrave","Euml","Iacute","Icirc","Igrave","Iuml","Ntilde","Oacute","Ocirc","Ograve","Oslash","Otilde","Ouml","THORN","Uacute","Ucirc","Ugrave","Uuml","Yacute","aacute","acirc","aelig","agrave","aring","atilde","auml","ccedil","eacute","ecirc","egrave","eth","euml","iacute","icirc","igrave","iuml","ntilde","oacute","ocirc","ograve","oslash","otilde","ouml","szlig","thorn","uacute","ucirc","ugrave","uuml","yacute","yuml","copy","reg","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","ordf","laquo","not","shy","macr","deg","plusmn","sup1","sup2","sup3","acute","micro","para","middot","cedil","ordm","raquo","frac14","frac12","frac34","iquest","times","divide","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","tilde","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","key","e","s","String","fromCharCode","event","nodeType","textNode","textopts","text","trim","normalize","replace","Error","strictFail","message","newTag","tagName","parent","name","attributes","qname","attribute","qualName","split","prefix","local","attrib","attribName","attribValue","qn","openTag","selfClosing","uri","JSON","stringify","p","nv","isSelfClosing","toLowerCase","closeTag","t","closeTo","pop","x","n","parseEntity","entity","entityLC","num","numStr","charAt","slice","parseInt","isNaN","fromCodePoint","beginWhiteSpace","startTagPosition","result","starti","substring","sgmlDecl","procInstName","procInstBody","pad","join","toUpperCase","comment","doctype","body","returnState","buffer","unparsedEntities","parsedEntity","stringFromCharCode","floor","MAX_SIZE","codeUnits","highSurrogate","lowSurrogate","index","codePoint","Number","isFinite","RangeError"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/@langchain/core/dist/utils/sax-js/sax.js"],"sourcesContent":["// @ts-nocheck\n// Inlined to deal with portability issues\n// Originally from: https://github.com/isaacs/sax-js\nconst initializeSax = function () {\n    const sax = {};\n    sax.parser = function (strict, opt) {\n        return new SAXParser(strict, opt);\n    };\n    sax.SAXParser = SAXParser;\n    sax.SAXStream = SAXStream;\n    sax.createStream = createStream;\n    // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n    // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n    // since that's the earliest that a buffer overrun could occur.  This way, checks are\n    // as rare as required, but as often as necessary to ensure never crossing this bound.\n    // Furthermore, buffers are only tested at most once per write(), so passing a very\n    // large string into write() might have undesirable effects, but this is manageable by\n    // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n    // edge case, result in creating at most one complete copy of the string passed in.\n    // Set to Infinity to have unlimited buffers.\n    sax.MAX_BUFFER_LENGTH = 64 * 1024;\n    const buffers = [\n        \"comment\",\n        \"sgmlDecl\",\n        \"textNode\",\n        \"tagName\",\n        \"doctype\",\n        \"procInstName\",\n        \"procInstBody\",\n        \"entity\",\n        \"attribName\",\n        \"attribValue\",\n        \"cdata\",\n        \"script\",\n    ];\n    sax.EVENTS = [\n        \"text\",\n        \"processinginstruction\",\n        \"sgmldeclaration\",\n        \"doctype\",\n        \"comment\",\n        \"opentagstart\",\n        \"attribute\",\n        \"opentag\",\n        \"closetag\",\n        \"opencdata\",\n        \"cdata\",\n        \"closecdata\",\n        \"error\",\n        \"end\",\n        \"ready\",\n        \"script\",\n        \"opennamespace\",\n        \"closenamespace\",\n    ];\n    function SAXParser(strict, opt) {\n        if (!(this instanceof SAXParser)) {\n            return new SAXParser(strict, opt);\n        }\n        var parser = this;\n        clearBuffers(parser);\n        parser.q = parser.c = \"\";\n        parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;\n        parser.opt = opt || {};\n        parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;\n        parser.looseCase = parser.opt.lowercase ? \"toLowerCase\" : \"toUpperCase\";\n        parser.tags = [];\n        parser.closed = parser.closedRoot = parser.sawRoot = false;\n        parser.tag = parser.error = null;\n        parser.strict = !!strict;\n        parser.noscript = !!(strict || parser.opt.noscript);\n        parser.state = S.BEGIN;\n        parser.strictEntities = parser.opt.strictEntities;\n        parser.ENTITIES = parser.strictEntities\n            ? Object.create(sax.XML_ENTITIES)\n            : Object.create(sax.ENTITIES);\n        parser.attribList = [];\n        // namespaces form a prototype chain.\n        // it always points at the current tag,\n        // which protos to its parent tag.\n        if (parser.opt.xmlns) {\n            parser.ns = Object.create(rootNS);\n        }\n        // mostly just for error reporting\n        parser.trackPosition = parser.opt.position !== false;\n        if (parser.trackPosition) {\n            parser.position = parser.line = parser.column = 0;\n        }\n        emit(parser, \"onready\");\n    }\n    if (!Object.create) {\n        Object.create = function (o) {\n            function F() { }\n            F.prototype = o;\n            var newf = new F();\n            return newf;\n        };\n    }\n    if (!Object.keys) {\n        Object.keys = function (o) {\n            var a = [];\n            for (var i in o)\n                if (o.hasOwnProperty(i))\n                    a.push(i);\n            return a;\n        };\n    }\n    function checkBufferLength(parser) {\n        var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);\n        var maxActual = 0;\n        for (var i = 0, l = buffers.length; i < l; i++) {\n            var len = parser[buffers[i]].length;\n            if (len > maxAllowed) {\n                // Text/cdata nodes can get big, and since they're buffered,\n                // we can get here under normal conditions.\n                // Avoid issues by emitting the text node now,\n                // so at least it won't get any bigger.\n                switch (buffers[i]) {\n                    case \"textNode\":\n                        closeText(parser);\n                        break;\n                    case \"cdata\":\n                        emitNode(parser, \"oncdata\", parser.cdata);\n                        parser.cdata = \"\";\n                        break;\n                    case \"script\":\n                        emitNode(parser, \"onscript\", parser.script);\n                        parser.script = \"\";\n                        break;\n                    default:\n                        error(parser, \"Max buffer length exceeded: \" + buffers[i]);\n                }\n            }\n            maxActual = Math.max(maxActual, len);\n        }\n        // schedule the next check for the earliest possible buffer overrun.\n        var m = sax.MAX_BUFFER_LENGTH - maxActual;\n        parser.bufferCheckPosition = m + parser.position;\n    }\n    function clearBuffers(parser) {\n        for (var i = 0, l = buffers.length; i < l; i++) {\n            parser[buffers[i]] = \"\";\n        }\n    }\n    function flushBuffers(parser) {\n        closeText(parser);\n        if (parser.cdata !== \"\") {\n            emitNode(parser, \"oncdata\", parser.cdata);\n            parser.cdata = \"\";\n        }\n        if (parser.script !== \"\") {\n            emitNode(parser, \"onscript\", parser.script);\n            parser.script = \"\";\n        }\n    }\n    SAXParser.prototype = {\n        end: function () {\n            end(this);\n        },\n        write: write,\n        resume: function () {\n            this.error = null;\n            return this;\n        },\n        close: function () {\n            return this.write(null);\n        },\n        flush: function () {\n            flushBuffers(this);\n        },\n    };\n    var Stream = ReadableStream;\n    if (!Stream)\n        Stream = function () { };\n    var streamWraps = sax.EVENTS.filter(function (ev) {\n        return ev !== \"error\" && ev !== \"end\";\n    });\n    function createStream(strict, opt) {\n        return new SAXStream(strict, opt);\n    }\n    function SAXStream(strict, opt) {\n        if (!(this instanceof SAXStream)) {\n            return new SAXStream(strict, opt);\n        }\n        Stream.apply(this);\n        this._parser = new SAXParser(strict, opt);\n        this.writable = true;\n        this.readable = true;\n        var me = this;\n        this._parser.onend = function () {\n            me.emit(\"end\");\n        };\n        this._parser.onerror = function (er) {\n            me.emit(\"error\", er);\n            // if didn't throw, then means error was handled.\n            // go ahead and clear error, so we can write again.\n            me._parser.error = null;\n        };\n        this._decoder = null;\n        streamWraps.forEach(function (ev) {\n            Object.defineProperty(me, \"on\" + ev, {\n                get: function () {\n                    return me._parser[\"on\" + ev];\n                },\n                set: function (h) {\n                    if (!h) {\n                        me.removeAllListeners(ev);\n                        me._parser[\"on\" + ev] = h;\n                        return h;\n                    }\n                    me.on(ev, h);\n                },\n                enumerable: true,\n                configurable: false,\n            });\n        });\n    }\n    SAXStream.prototype = Object.create(Stream.prototype, {\n        constructor: {\n            value: SAXStream,\n        },\n    });\n    SAXStream.prototype.write = function (data) {\n        this._parser.write(data.toString());\n        this.emit(\"data\", data);\n        return true;\n    };\n    SAXStream.prototype.end = function (chunk) {\n        if (chunk && chunk.length) {\n            this.write(chunk);\n        }\n        this._parser.end();\n        return true;\n    };\n    SAXStream.prototype.on = function (ev, handler) {\n        var me = this;\n        if (!me._parser[\"on\" + ev] && streamWraps.indexOf(ev) !== -1) {\n            me._parser[\"on\" + ev] = function () {\n                var args = arguments.length === 1\n                    ? [arguments[0]]\n                    : Array.apply(null, arguments);\n                args.splice(0, 0, ev);\n                me.emit.apply(me, args);\n            };\n        }\n        return Stream.prototype.on.call(me, ev, handler);\n    };\n    // this really needs to be replaced with character classes.\n    // XML allows all manner of ridiculous numbers and digits.\n    var CDATA = \"[CDATA[\";\n    var DOCTYPE = \"DOCTYPE\";\n    var XML_NAMESPACE = \"http://www.w3.org/XML/1998/namespace\";\n    var XMLNS_NAMESPACE = \"http://www.w3.org/2000/xmlns/\";\n    var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE };\n    // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n    // This implementation works on strings, a single character at a time\n    // as such, it cannot ever support astral-plane characters (10000-EFFFF)\n    // without a significant breaking change to either this  parser, or the\n    // JavaScript language.  Implementation of an emoji-capable xml parser\n    // is left as an exercise for the reader.\n    var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n    var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\n    var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n    var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\n    function isWhitespace(c) {\n        return c === \" \" || c === \"\\n\" || c === \"\\r\" || c === \"\\t\";\n    }\n    function isQuote(c) {\n        return c === '\"' || c === \"'\";\n    }\n    function isAttribEnd(c) {\n        return c === \">\" || isWhitespace(c);\n    }\n    function isMatch(regex, c) {\n        return regex.test(c);\n    }\n    function notMatch(regex, c) {\n        return !isMatch(regex, c);\n    }\n    var S = 0;\n    sax.STATE = {\n        BEGIN: S++,\n        BEGIN_WHITESPACE: S++,\n        TEXT: S++,\n        TEXT_ENTITY: S++,\n        OPEN_WAKA: S++,\n        SGML_DECL: S++,\n        SGML_DECL_QUOTED: S++,\n        DOCTYPE: S++,\n        DOCTYPE_QUOTED: S++,\n        DOCTYPE_DTD: S++,\n        DOCTYPE_DTD_QUOTED: S++,\n        COMMENT_STARTING: S++,\n        COMMENT: S++,\n        COMMENT_ENDING: S++,\n        COMMENT_ENDED: S++,\n        CDATA: S++,\n        CDATA_ENDING: S++,\n        CDATA_ENDING_2: S++,\n        PROC_INST: S++,\n        PROC_INST_BODY: S++,\n        PROC_INST_ENDING: S++,\n        OPEN_TAG: S++,\n        OPEN_TAG_SLASH: S++,\n        ATTRIB: S++,\n        ATTRIB_NAME: S++,\n        ATTRIB_NAME_SAW_WHITE: S++,\n        ATTRIB_VALUE: S++,\n        ATTRIB_VALUE_QUOTED: S++,\n        ATTRIB_VALUE_CLOSED: S++,\n        ATTRIB_VALUE_UNQUOTED: S++,\n        ATTRIB_VALUE_ENTITY_Q: S++,\n        ATTRIB_VALUE_ENTITY_U: S++,\n        CLOSE_TAG: S++,\n        CLOSE_TAG_SAW_WHITE: S++,\n        SCRIPT: S++,\n        SCRIPT_ENDING: S++, // <script> ... <\n    };\n    sax.XML_ENTITIES = {\n        amp: \"&\",\n        gt: \">\",\n        lt: \"<\",\n        quot: '\"',\n        apos: \"'\",\n    };\n    sax.ENTITIES = {\n        amp: \"&\",\n        gt: \">\",\n        lt: \"<\",\n        quot: '\"',\n        apos: \"'\",\n        AElig: 198,\n        Aacute: 193,\n        Acirc: 194,\n        Agrave: 192,\n        Aring: 197,\n        Atilde: 195,\n        Auml: 196,\n        Ccedil: 199,\n        ETH: 208,\n        Eacute: 201,\n        Ecirc: 202,\n        Egrave: 200,\n        Euml: 203,\n        Iacute: 205,\n        Icirc: 206,\n        Igrave: 204,\n        Iuml: 207,\n        Ntilde: 209,\n        Oacute: 211,\n        Ocirc: 212,\n        Ograve: 210,\n        Oslash: 216,\n        Otilde: 213,\n        Ouml: 214,\n        THORN: 222,\n        Uacute: 218,\n        Ucirc: 219,\n        Ugrave: 217,\n        Uuml: 220,\n        Yacute: 221,\n        aacute: 225,\n        acirc: 226,\n        aelig: 230,\n        agrave: 224,\n        aring: 229,\n        atilde: 227,\n        auml: 228,\n        ccedil: 231,\n        eacute: 233,\n        ecirc: 234,\n        egrave: 232,\n        eth: 240,\n        euml: 235,\n        iacute: 237,\n        icirc: 238,\n        igrave: 236,\n        iuml: 239,\n        ntilde: 241,\n        oacute: 243,\n        ocirc: 244,\n        ograve: 242,\n        oslash: 248,\n        otilde: 245,\n        ouml: 246,\n        szlig: 223,\n        thorn: 254,\n        uacute: 250,\n        ucirc: 251,\n        ugrave: 249,\n        uuml: 252,\n        yacute: 253,\n        yuml: 255,\n        copy: 169,\n        reg: 174,\n        nbsp: 160,\n        iexcl: 161,\n        cent: 162,\n        pound: 163,\n        curren: 164,\n        yen: 165,\n        brvbar: 166,\n        sect: 167,\n        uml: 168,\n        ordf: 170,\n        laquo: 171,\n        not: 172,\n        shy: 173,\n        macr: 175,\n        deg: 176,\n        plusmn: 177,\n        sup1: 185,\n        sup2: 178,\n        sup3: 179,\n        acute: 180,\n        micro: 181,\n        para: 182,\n        middot: 183,\n        cedil: 184,\n        ordm: 186,\n        raquo: 187,\n        frac14: 188,\n        frac12: 189,\n        frac34: 190,\n        iquest: 191,\n        times: 215,\n        divide: 247,\n        OElig: 338,\n        oelig: 339,\n        Scaron: 352,\n        scaron: 353,\n        Yuml: 376,\n        fnof: 402,\n        circ: 710,\n        tilde: 732,\n        Alpha: 913,\n        Beta: 914,\n        Gamma: 915,\n        Delta: 916,\n        Epsilon: 917,\n        Zeta: 918,\n        Eta: 919,\n        Theta: 920,\n        Iota: 921,\n        Kappa: 922,\n        Lambda: 923,\n        Mu: 924,\n        Nu: 925,\n        Xi: 926,\n        Omicron: 927,\n        Pi: 928,\n        Rho: 929,\n        Sigma: 931,\n        Tau: 932,\n        Upsilon: 933,\n        Phi: 934,\n        Chi: 935,\n        Psi: 936,\n        Omega: 937,\n        alpha: 945,\n        beta: 946,\n        gamma: 947,\n        delta: 948,\n        epsilon: 949,\n        zeta: 950,\n        eta: 951,\n        theta: 952,\n        iota: 953,\n        kappa: 954,\n        lambda: 955,\n        mu: 956,\n        nu: 957,\n        xi: 958,\n        omicron: 959,\n        pi: 960,\n        rho: 961,\n        sigmaf: 962,\n        sigma: 963,\n        tau: 964,\n        upsilon: 965,\n        phi: 966,\n        chi: 967,\n        psi: 968,\n        omega: 969,\n        thetasym: 977,\n        upsih: 978,\n        piv: 982,\n        ensp: 8194,\n        emsp: 8195,\n        thinsp: 8201,\n        zwnj: 8204,\n        zwj: 8205,\n        lrm: 8206,\n        rlm: 8207,\n        ndash: 8211,\n        mdash: 8212,\n        lsquo: 8216,\n        rsquo: 8217,\n        sbquo: 8218,\n        ldquo: 8220,\n        rdquo: 8221,\n        bdquo: 8222,\n        dagger: 8224,\n        Dagger: 8225,\n        bull: 8226,\n        hellip: 8230,\n        permil: 8240,\n        prime: 8242,\n        Prime: 8243,\n        lsaquo: 8249,\n        rsaquo: 8250,\n        oline: 8254,\n        frasl: 8260,\n        euro: 8364,\n        image: 8465,\n        weierp: 8472,\n        real: 8476,\n        trade: 8482,\n        alefsym: 8501,\n        larr: 8592,\n        uarr: 8593,\n        rarr: 8594,\n        darr: 8595,\n        harr: 8596,\n        crarr: 8629,\n        lArr: 8656,\n        uArr: 8657,\n        rArr: 8658,\n        dArr: 8659,\n        hArr: 8660,\n        forall: 8704,\n        part: 8706,\n        exist: 8707,\n        empty: 8709,\n        nabla: 8711,\n        isin: 8712,\n        notin: 8713,\n        ni: 8715,\n        prod: 8719,\n        sum: 8721,\n        minus: 8722,\n        lowast: 8727,\n        radic: 8730,\n        prop: 8733,\n        infin: 8734,\n        ang: 8736,\n        and: 8743,\n        or: 8744,\n        cap: 8745,\n        cup: 8746,\n        int: 8747,\n        there4: 8756,\n        sim: 8764,\n        cong: 8773,\n        asymp: 8776,\n        ne: 8800,\n        equiv: 8801,\n        le: 8804,\n        ge: 8805,\n        sub: 8834,\n        sup: 8835,\n        nsub: 8836,\n        sube: 8838,\n        supe: 8839,\n        oplus: 8853,\n        otimes: 8855,\n        perp: 8869,\n        sdot: 8901,\n        lceil: 8968,\n        rceil: 8969,\n        lfloor: 8970,\n        rfloor: 8971,\n        lang: 9001,\n        rang: 9002,\n        loz: 9674,\n        spades: 9824,\n        clubs: 9827,\n        hearts: 9829,\n        diams: 9830,\n    };\n    Object.keys(sax.ENTITIES).forEach(function (key) {\n        var e = sax.ENTITIES[key];\n        var s = typeof e === \"number\" ? String.fromCharCode(e) : e;\n        sax.ENTITIES[key] = s;\n    });\n    for (var s in sax.STATE) {\n        sax.STATE[sax.STATE[s]] = s;\n    }\n    // shorthand\n    S = sax.STATE;\n    function emit(parser, event, data) {\n        parser[event] && parser[event](data);\n    }\n    function emitNode(parser, nodeType, data) {\n        if (parser.textNode)\n            closeText(parser);\n        emit(parser, nodeType, data);\n    }\n    function closeText(parser) {\n        parser.textNode = textopts(parser.opt, parser.textNode);\n        if (parser.textNode)\n            emit(parser, \"ontext\", parser.textNode);\n        parser.textNode = \"\";\n    }\n    function textopts(opt, text) {\n        if (opt.trim)\n            text = text.trim();\n        if (opt.normalize)\n            text = text.replace(/\\s+/g, \" \");\n        return text;\n    }\n    function error(parser, er) {\n        closeText(parser);\n        if (parser.trackPosition) {\n            er +=\n                \"\\nLine: \" +\n                    parser.line +\n                    \"\\nColumn: \" +\n                    parser.column +\n                    \"\\nChar: \" +\n                    parser.c;\n        }\n        er = new Error(er);\n        parser.error = er;\n        emit(parser, \"onerror\", er);\n        return parser;\n    }\n    function end(parser) {\n        if (parser.sawRoot && !parser.closedRoot)\n            strictFail(parser, \"Unclosed root tag\");\n        if (parser.state !== S.BEGIN &&\n            parser.state !== S.BEGIN_WHITESPACE &&\n            parser.state !== S.TEXT) {\n            error(parser, \"Unexpected end\");\n        }\n        closeText(parser);\n        parser.c = \"\";\n        parser.closed = true;\n        emit(parser, \"onend\");\n        SAXParser.call(parser, parser.strict, parser.opt);\n        return parser;\n    }\n    function strictFail(parser, message) {\n        if (typeof parser !== \"object\" || !(parser instanceof SAXParser)) {\n            throw new Error(\"bad call to strictFail\");\n        }\n        if (parser.strict) {\n            error(parser, message);\n        }\n    }\n    function newTag(parser) {\n        if (!parser.strict)\n            parser.tagName = parser.tagName[parser.looseCase]();\n        var parent = parser.tags[parser.tags.length - 1] || parser;\n        var tag = (parser.tag = { name: parser.tagName, attributes: {} });\n        // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n        if (parser.opt.xmlns) {\n            tag.ns = parent.ns;\n        }\n        parser.attribList.length = 0;\n        emitNode(parser, \"onopentagstart\", tag);\n    }\n    function qname(name, attribute) {\n        var i = name.indexOf(\":\");\n        var qualName = i < 0 ? [\"\", name] : name.split(\":\");\n        var prefix = qualName[0];\n        var local = qualName[1];\n        // <x \"xmlns\"=\"http://foo\">\n        if (attribute && name === \"xmlns\") {\n            prefix = \"xmlns\";\n            local = \"\";\n        }\n        return { prefix: prefix, local: local };\n    }\n    function attrib(parser) {\n        if (!parser.strict) {\n            parser.attribName = parser.attribName[parser.looseCase]();\n        }\n        if (parser.attribList.indexOf(parser.attribName) !== -1 ||\n            parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n            parser.attribName = parser.attribValue = \"\";\n            return;\n        }\n        if (parser.opt.xmlns) {\n            var qn = qname(parser.attribName, true);\n            var prefix = qn.prefix;\n            var local = qn.local;\n            if (prefix === \"xmlns\") {\n                // namespace binding attribute. push the binding into scope\n                if (local === \"xml\" && parser.attribValue !== XML_NAMESPACE) {\n                    strictFail(parser, \"xml: prefix must be bound to \" +\n                        XML_NAMESPACE +\n                        \"\\n\" +\n                        \"Actual: \" +\n                        parser.attribValue);\n                }\n                else if (local === \"xmlns\" &&\n                    parser.attribValue !== XMLNS_NAMESPACE) {\n                    strictFail(parser, \"xmlns: prefix must be bound to \" +\n                        XMLNS_NAMESPACE +\n                        \"\\n\" +\n                        \"Actual: \" +\n                        parser.attribValue);\n                }\n                else {\n                    var tag = parser.tag;\n                    var parent = parser.tags[parser.tags.length - 1] || parser;\n                    if (tag.ns === parent.ns) {\n                        tag.ns = Object.create(parent.ns);\n                    }\n                    tag.ns[local] = parser.attribValue;\n                }\n            }\n            // defer onattribute events until all attributes have been seen\n            // so any new bindings can take effect. preserve attribute order\n            // so deferred events can be emitted in document order\n            parser.attribList.push([parser.attribName, parser.attribValue]);\n        }\n        else {\n            // in non-xmlns mode, we can emit the event right away\n            parser.tag.attributes[parser.attribName] = parser.attribValue;\n            emitNode(parser, \"onattribute\", {\n                name: parser.attribName,\n                value: parser.attribValue,\n            });\n        }\n        parser.attribName = parser.attribValue = \"\";\n    }\n    function openTag(parser, selfClosing) {\n        if (parser.opt.xmlns) {\n            // emit namespace binding events\n            var tag = parser.tag;\n            // add namespace info to tag\n            var qn = qname(parser.tagName);\n            tag.prefix = qn.prefix;\n            tag.local = qn.local;\n            tag.uri = tag.ns[qn.prefix] || \"\";\n            if (tag.prefix && !tag.uri) {\n                strictFail(parser, \"Unbound namespace prefix: \" + JSON.stringify(parser.tagName));\n                tag.uri = qn.prefix;\n            }\n            var parent = parser.tags[parser.tags.length - 1] || parser;\n            if (tag.ns && parent.ns !== tag.ns) {\n                Object.keys(tag.ns).forEach(function (p) {\n                    emitNode(parser, \"onopennamespace\", {\n                        prefix: p,\n                        uri: tag.ns[p],\n                    });\n                });\n            }\n            // handle deferred onattribute events\n            // Note: do not apply default ns to attributes:\n            //   http://www.w3.org/TR/REC-xml-names/#defaulting\n            for (var i = 0, l = parser.attribList.length; i < l; i++) {\n                var nv = parser.attribList[i];\n                var name = nv[0];\n                var value = nv[1];\n                var qualName = qname(name, true);\n                var prefix = qualName.prefix;\n                var local = qualName.local;\n                var uri = prefix === \"\" ? \"\" : tag.ns[prefix] || \"\";\n                var a = {\n                    name: name,\n                    value: value,\n                    prefix: prefix,\n                    local: local,\n                    uri: uri,\n                };\n                // if there's any attributes with an undefined namespace,\n                // then fail on them now.\n                if (prefix && prefix !== \"xmlns\" && !uri) {\n                    strictFail(parser, \"Unbound namespace prefix: \" + JSON.stringify(prefix));\n                    a.uri = prefix;\n                }\n                parser.tag.attributes[name] = a;\n                emitNode(parser, \"onattribute\", a);\n            }\n            parser.attribList.length = 0;\n        }\n        parser.tag.isSelfClosing = !!selfClosing;\n        // process the tag\n        parser.sawRoot = true;\n        parser.tags.push(parser.tag);\n        emitNode(parser, \"onopentag\", parser.tag);\n        if (!selfClosing) {\n            // special case for <script> in non-strict mode.\n            if (!parser.noscript && parser.tagName.toLowerCase() === \"script\") {\n                parser.state = S.SCRIPT;\n            }\n            else {\n                parser.state = S.TEXT;\n            }\n            parser.tag = null;\n            parser.tagName = \"\";\n        }\n        parser.attribName = parser.attribValue = \"\";\n        parser.attribList.length = 0;\n    }\n    function closeTag(parser) {\n        if (!parser.tagName) {\n            strictFail(parser, \"Weird empty close tag.\");\n            parser.textNode += \"</>\";\n            parser.state = S.TEXT;\n            return;\n        }\n        if (parser.script) {\n            if (parser.tagName !== \"script\") {\n                parser.script += \"</\" + parser.tagName + \">\";\n                parser.tagName = \"\";\n                parser.state = S.SCRIPT;\n                return;\n            }\n            emitNode(parser, \"onscript\", parser.script);\n            parser.script = \"\";\n        }\n        // first make sure that the closing tag actually exists.\n        // <a><b></c></b></a> will close everything, otherwise.\n        var t = parser.tags.length;\n        var tagName = parser.tagName;\n        if (!parser.strict) {\n            tagName = tagName[parser.looseCase]();\n        }\n        var closeTo = tagName;\n        while (t--) {\n            var close = parser.tags[t];\n            if (close.name !== closeTo) {\n                // fail the first time in strict mode\n                strictFail(parser, \"Unexpected close tag\");\n            }\n            else {\n                break;\n            }\n        }\n        // didn't find it.  we already failed for strict, so just abort.\n        if (t < 0) {\n            strictFail(parser, \"Unmatched closing tag: \" + parser.tagName);\n            parser.textNode += \"</\" + parser.tagName + \">\";\n            parser.state = S.TEXT;\n            return;\n        }\n        parser.tagName = tagName;\n        var s = parser.tags.length;\n        while (s-- > t) {\n            var tag = (parser.tag = parser.tags.pop());\n            parser.tagName = parser.tag.name;\n            emitNode(parser, \"onclosetag\", parser.tagName);\n            var x = {};\n            for (var i in tag.ns) {\n                x[i] = tag.ns[i];\n            }\n            var parent = parser.tags[parser.tags.length - 1] || parser;\n            if (parser.opt.xmlns && tag.ns !== parent.ns) {\n                // remove namespace bindings introduced by tag\n                Object.keys(tag.ns).forEach(function (p) {\n                    var n = tag.ns[p];\n                    emitNode(parser, \"onclosenamespace\", { prefix: p, uri: n });\n                });\n            }\n        }\n        if (t === 0)\n            parser.closedRoot = true;\n        parser.tagName = parser.attribValue = parser.attribName = \"\";\n        parser.attribList.length = 0;\n        parser.state = S.TEXT;\n    }\n    function parseEntity(parser) {\n        var entity = parser.entity;\n        var entityLC = entity.toLowerCase();\n        var num;\n        var numStr = \"\";\n        if (parser.ENTITIES[entity]) {\n            return parser.ENTITIES[entity];\n        }\n        if (parser.ENTITIES[entityLC]) {\n            return parser.ENTITIES[entityLC];\n        }\n        entity = entityLC;\n        if (entity.charAt(0) === \"#\") {\n            if (entity.charAt(1) === \"x\") {\n                entity = entity.slice(2);\n                num = parseInt(entity, 16);\n                numStr = num.toString(16);\n            }\n            else {\n                entity = entity.slice(1);\n                num = parseInt(entity, 10);\n                numStr = num.toString(10);\n            }\n        }\n        entity = entity.replace(/^0+/, \"\");\n        if (isNaN(num) || numStr.toLowerCase() !== entity) {\n            strictFail(parser, \"Invalid character entity\");\n            return \"&\" + parser.entity + \";\";\n        }\n        return String.fromCodePoint(num);\n    }\n    function beginWhiteSpace(parser, c) {\n        if (c === \"<\") {\n            parser.state = S.OPEN_WAKA;\n            parser.startTagPosition = parser.position;\n        }\n        else if (!isWhitespace(c)) {\n            // have to process this as a text node.\n            // weird, but happens.\n            strictFail(parser, \"Non-whitespace before first tag.\");\n            parser.textNode = c;\n            parser.state = S.TEXT;\n        }\n    }\n    function charAt(chunk, i) {\n        var result = \"\";\n        if (i < chunk.length) {\n            result = chunk.charAt(i);\n        }\n        return result;\n    }\n    function write(chunk) {\n        var parser = this;\n        if (this.error) {\n            throw this.error;\n        }\n        if (parser.closed) {\n            return error(parser, \"Cannot write after close. Assign an onready handler.\");\n        }\n        if (chunk === null) {\n            return end(parser);\n        }\n        if (typeof chunk === \"object\") {\n            chunk = chunk.toString();\n        }\n        var i = 0;\n        var c = \"\";\n        while (true) {\n            c = charAt(chunk, i++);\n            parser.c = c;\n            if (!c) {\n                break;\n            }\n            if (parser.trackPosition) {\n                parser.position++;\n                if (c === \"\\n\") {\n                    parser.line++;\n                    parser.column = 0;\n                }\n                else {\n                    parser.column++;\n                }\n            }\n            switch (parser.state) {\n                case S.BEGIN:\n                    parser.state = S.BEGIN_WHITESPACE;\n                    if (c === \"\\uFEFF\") {\n                        continue;\n                    }\n                    beginWhiteSpace(parser, c);\n                    continue;\n                case S.BEGIN_WHITESPACE:\n                    beginWhiteSpace(parser, c);\n                    continue;\n                case S.TEXT:\n                    if (parser.sawRoot && !parser.closedRoot) {\n                        var starti = i - 1;\n                        while (c && c !== \"<\" && c !== \"&\") {\n                            c = charAt(chunk, i++);\n                            if (c && parser.trackPosition) {\n                                parser.position++;\n                                if (c === \"\\n\") {\n                                    parser.line++;\n                                    parser.column = 0;\n                                }\n                                else {\n                                    parser.column++;\n                                }\n                            }\n                        }\n                        parser.textNode += chunk.substring(starti, i - 1);\n                    }\n                    if (c === \"<\" &&\n                        !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n                        parser.state = S.OPEN_WAKA;\n                        parser.startTagPosition = parser.position;\n                    }\n                    else {\n                        if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {\n                            strictFail(parser, \"Text data outside of root node.\");\n                        }\n                        if (c === \"&\") {\n                            parser.state = S.TEXT_ENTITY;\n                        }\n                        else {\n                            parser.textNode += c;\n                        }\n                    }\n                    continue;\n                case S.SCRIPT:\n                    // only non-strict\n                    if (c === \"<\") {\n                        parser.state = S.SCRIPT_ENDING;\n                    }\n                    else {\n                        parser.script += c;\n                    }\n                    continue;\n                case S.SCRIPT_ENDING:\n                    if (c === \"/\") {\n                        parser.state = S.CLOSE_TAG;\n                    }\n                    else {\n                        parser.script += \"<\" + c;\n                        parser.state = S.SCRIPT;\n                    }\n                    continue;\n                case S.OPEN_WAKA:\n                    // either a /, ?, !, or text is coming next.\n                    if (c === \"!\") {\n                        parser.state = S.SGML_DECL;\n                        parser.sgmlDecl = \"\";\n                    }\n                    else if (isWhitespace(c)) {\n                        // wait for it...\n                    }\n                    else if (isMatch(nameStart, c)) {\n                        parser.state = S.OPEN_TAG;\n                        parser.tagName = c;\n                    }\n                    else if (c === \"/\") {\n                        parser.state = S.CLOSE_TAG;\n                        parser.tagName = \"\";\n                    }\n                    else if (c === \"?\") {\n                        parser.state = S.PROC_INST;\n                        parser.procInstName = parser.procInstBody = \"\";\n                    }\n                    else {\n                        strictFail(parser, \"Unencoded <\");\n                        // if there was some whitespace, then add that in.\n                        if (parser.startTagPosition + 1 < parser.position) {\n                            var pad = parser.position - parser.startTagPosition;\n                            c = new Array(pad).join(\" \") + c;\n                        }\n                        parser.textNode += \"<\" + c;\n                        parser.state = S.TEXT;\n                    }\n                    continue;\n                case S.SGML_DECL:\n                    if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n                        emitNode(parser, \"onopencdata\");\n                        parser.state = S.CDATA;\n                        parser.sgmlDecl = \"\";\n                        parser.cdata = \"\";\n                    }\n                    else if (parser.sgmlDecl + c === \"--\") {\n                        parser.state = S.COMMENT;\n                        parser.comment = \"\";\n                        parser.sgmlDecl = \"\";\n                    }\n                    else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n                        parser.state = S.DOCTYPE;\n                        if (parser.doctype || parser.sawRoot) {\n                            strictFail(parser, \"Inappropriately located doctype declaration\");\n                        }\n                        parser.doctype = \"\";\n                        parser.sgmlDecl = \"\";\n                    }\n                    else if (c === \">\") {\n                        emitNode(parser, \"onsgmldeclaration\", parser.sgmlDecl);\n                        parser.sgmlDecl = \"\";\n                        parser.state = S.TEXT;\n                    }\n                    else if (isQuote(c)) {\n                        parser.state = S.SGML_DECL_QUOTED;\n                        parser.sgmlDecl += c;\n                    }\n                    else {\n                        parser.sgmlDecl += c;\n                    }\n                    continue;\n                case S.SGML_DECL_QUOTED:\n                    if (c === parser.q) {\n                        parser.state = S.SGML_DECL;\n                        parser.q = \"\";\n                    }\n                    parser.sgmlDecl += c;\n                    continue;\n                case S.DOCTYPE:\n                    if (c === \">\") {\n                        parser.state = S.TEXT;\n                        emitNode(parser, \"ondoctype\", parser.doctype);\n                        parser.doctype = true; // just remember that we saw it.\n                    }\n                    else {\n                        parser.doctype += c;\n                        if (c === \"[\") {\n                            parser.state = S.DOCTYPE_DTD;\n                        }\n                        else if (isQuote(c)) {\n                            parser.state = S.DOCTYPE_QUOTED;\n                            parser.q = c;\n                        }\n                    }\n                    continue;\n                case S.DOCTYPE_QUOTED:\n                    parser.doctype += c;\n                    if (c === parser.q) {\n                        parser.q = \"\";\n                        parser.state = S.DOCTYPE;\n                    }\n                    continue;\n                case S.DOCTYPE_DTD:\n                    parser.doctype += c;\n                    if (c === \"]\") {\n                        parser.state = S.DOCTYPE;\n                    }\n                    else if (isQuote(c)) {\n                        parser.state = S.DOCTYPE_DTD_QUOTED;\n                        parser.q = c;\n                    }\n                    continue;\n                case S.DOCTYPE_DTD_QUOTED:\n                    parser.doctype += c;\n                    if (c === parser.q) {\n                        parser.state = S.DOCTYPE_DTD;\n                        parser.q = \"\";\n                    }\n                    continue;\n                case S.COMMENT:\n                    if (c === \"-\") {\n                        parser.state = S.COMMENT_ENDING;\n                    }\n                    else {\n                        parser.comment += c;\n                    }\n                    continue;\n                case S.COMMENT_ENDING:\n                    if (c === \"-\") {\n                        parser.state = S.COMMENT_ENDED;\n                        parser.comment = textopts(parser.opt, parser.comment);\n                        if (parser.comment) {\n                            emitNode(parser, \"oncomment\", parser.comment);\n                        }\n                        parser.comment = \"\";\n                    }\n                    else {\n                        parser.comment += \"-\" + c;\n                        parser.state = S.COMMENT;\n                    }\n                    continue;\n                case S.COMMENT_ENDED:\n                    if (c !== \">\") {\n                        strictFail(parser, \"Malformed comment\");\n                        // allow <!-- blah -- bloo --> in non-strict mode,\n                        // which is a comment of \" blah -- bloo \"\n                        parser.comment += \"--\" + c;\n                        parser.state = S.COMMENT;\n                    }\n                    else {\n                        parser.state = S.TEXT;\n                    }\n                    continue;\n                case S.CDATA:\n                    if (c === \"]\") {\n                        parser.state = S.CDATA_ENDING;\n                    }\n                    else {\n                        parser.cdata += c;\n                    }\n                    continue;\n                case S.CDATA_ENDING:\n                    if (c === \"]\") {\n                        parser.state = S.CDATA_ENDING_2;\n                    }\n                    else {\n                        parser.cdata += \"]\" + c;\n                        parser.state = S.CDATA;\n                    }\n                    continue;\n                case S.CDATA_ENDING_2:\n                    if (c === \">\") {\n                        if (parser.cdata) {\n                            emitNode(parser, \"oncdata\", parser.cdata);\n                        }\n                        emitNode(parser, \"onclosecdata\");\n                        parser.cdata = \"\";\n                        parser.state = S.TEXT;\n                    }\n                    else if (c === \"]\") {\n                        parser.cdata += \"]\";\n                    }\n                    else {\n                        parser.cdata += \"]]\" + c;\n                        parser.state = S.CDATA;\n                    }\n                    continue;\n                case S.PROC_INST:\n                    if (c === \"?\") {\n                        parser.state = S.PROC_INST_ENDING;\n                    }\n                    else if (isWhitespace(c)) {\n                        parser.state = S.PROC_INST_BODY;\n                    }\n                    else {\n                        parser.procInstName += c;\n                    }\n                    continue;\n                case S.PROC_INST_BODY:\n                    if (!parser.procInstBody && isWhitespace(c)) {\n                        continue;\n                    }\n                    else if (c === \"?\") {\n                        parser.state = S.PROC_INST_ENDING;\n                    }\n                    else {\n                        parser.procInstBody += c;\n                    }\n                    continue;\n                case S.PROC_INST_ENDING:\n                    if (c === \">\") {\n                        emitNode(parser, \"onprocessinginstruction\", {\n                            name: parser.procInstName,\n                            body: parser.procInstBody,\n                        });\n                        parser.procInstName = parser.procInstBody = \"\";\n                        parser.state = S.TEXT;\n                    }\n                    else {\n                        parser.procInstBody += \"?\" + c;\n                        parser.state = S.PROC_INST_BODY;\n                    }\n                    continue;\n                case S.OPEN_TAG:\n                    if (isMatch(nameBody, c)) {\n                        parser.tagName += c;\n                    }\n                    else {\n                        newTag(parser);\n                        if (c === \">\") {\n                            openTag(parser);\n                        }\n                        else if (c === \"/\") {\n                            parser.state = S.OPEN_TAG_SLASH;\n                        }\n                        else {\n                            if (!isWhitespace(c)) {\n                                strictFail(parser, \"Invalid character in tag name\");\n                            }\n                            parser.state = S.ATTRIB;\n                        }\n                    }\n                    continue;\n                case S.OPEN_TAG_SLASH:\n                    if (c === \">\") {\n                        openTag(parser, true);\n                        closeTag(parser);\n                    }\n                    else {\n                        strictFail(parser, \"Forward-slash in opening tag not followed by >\");\n                        parser.state = S.ATTRIB;\n                    }\n                    continue;\n                case S.ATTRIB:\n                    // haven't read the attribute name yet.\n                    if (isWhitespace(c)) {\n                        continue;\n                    }\n                    else if (c === \">\") {\n                        openTag(parser);\n                    }\n                    else if (c === \"/\") {\n                        parser.state = S.OPEN_TAG_SLASH;\n                    }\n                    else if (isMatch(nameStart, c)) {\n                        parser.attribName = c;\n                        parser.attribValue = \"\";\n                        parser.state = S.ATTRIB_NAME;\n                    }\n                    else {\n                        strictFail(parser, \"Invalid attribute name\");\n                    }\n                    continue;\n                case S.ATTRIB_NAME:\n                    if (c === \"=\") {\n                        parser.state = S.ATTRIB_VALUE;\n                    }\n                    else if (c === \">\") {\n                        strictFail(parser, \"Attribute without value\");\n                        parser.attribValue = parser.attribName;\n                        attrib(parser);\n                        openTag(parser);\n                    }\n                    else if (isWhitespace(c)) {\n                        parser.state = S.ATTRIB_NAME_SAW_WHITE;\n                    }\n                    else if (isMatch(nameBody, c)) {\n                        parser.attribName += c;\n                    }\n                    else {\n                        strictFail(parser, \"Invalid attribute name\");\n                    }\n                    continue;\n                case S.ATTRIB_NAME_SAW_WHITE:\n                    if (c === \"=\") {\n                        parser.state = S.ATTRIB_VALUE;\n                    }\n                    else if (isWhitespace(c)) {\n                        continue;\n                    }\n                    else {\n                        strictFail(parser, \"Attribute without value\");\n                        parser.tag.attributes[parser.attribName] = \"\";\n                        parser.attribValue = \"\";\n                        emitNode(parser, \"onattribute\", {\n                            name: parser.attribName,\n                            value: \"\",\n                        });\n                        parser.attribName = \"\";\n                        if (c === \">\") {\n                            openTag(parser);\n                        }\n                        else if (isMatch(nameStart, c)) {\n                            parser.attribName = c;\n                            parser.state = S.ATTRIB_NAME;\n                        }\n                        else {\n                            strictFail(parser, \"Invalid attribute name\");\n                            parser.state = S.ATTRIB;\n                        }\n                    }\n                    continue;\n                case S.ATTRIB_VALUE:\n                    if (isWhitespace(c)) {\n                        continue;\n                    }\n                    else if (isQuote(c)) {\n                        parser.q = c;\n                        parser.state = S.ATTRIB_VALUE_QUOTED;\n                    }\n                    else {\n                        strictFail(parser, \"Unquoted attribute value\");\n                        parser.state = S.ATTRIB_VALUE_UNQUOTED;\n                        parser.attribValue = c;\n                    }\n                    continue;\n                case S.ATTRIB_VALUE_QUOTED:\n                    if (c !== parser.q) {\n                        if (c === \"&\") {\n                            parser.state = S.ATTRIB_VALUE_ENTITY_Q;\n                        }\n                        else {\n                            parser.attribValue += c;\n                        }\n                        continue;\n                    }\n                    attrib(parser);\n                    parser.q = \"\";\n                    parser.state = S.ATTRIB_VALUE_CLOSED;\n                    continue;\n                case S.ATTRIB_VALUE_CLOSED:\n                    if (isWhitespace(c)) {\n                        parser.state = S.ATTRIB;\n                    }\n                    else if (c === \">\") {\n                        openTag(parser);\n                    }\n                    else if (c === \"/\") {\n                        parser.state = S.OPEN_TAG_SLASH;\n                    }\n                    else if (isMatch(nameStart, c)) {\n                        strictFail(parser, \"No whitespace between attributes\");\n                        parser.attribName = c;\n                        parser.attribValue = \"\";\n                        parser.state = S.ATTRIB_NAME;\n                    }\n                    else {\n                        strictFail(parser, \"Invalid attribute name\");\n                    }\n                    continue;\n                case S.ATTRIB_VALUE_UNQUOTED:\n                    if (!isAttribEnd(c)) {\n                        if (c === \"&\") {\n                            parser.state = S.ATTRIB_VALUE_ENTITY_U;\n                        }\n                        else {\n                            parser.attribValue += c;\n                        }\n                        continue;\n                    }\n                    attrib(parser);\n                    if (c === \">\") {\n                        openTag(parser);\n                    }\n                    else {\n                        parser.state = S.ATTRIB;\n                    }\n                    continue;\n                case S.CLOSE_TAG:\n                    if (!parser.tagName) {\n                        if (isWhitespace(c)) {\n                            continue;\n                        }\n                        else if (notMatch(nameStart, c)) {\n                            if (parser.script) {\n                                parser.script += \"</\" + c;\n                                parser.state = S.SCRIPT;\n                            }\n                            else {\n                                strictFail(parser, \"Invalid tagname in closing tag.\");\n                            }\n                        }\n                        else {\n                            parser.tagName = c;\n                        }\n                    }\n                    else if (c === \">\") {\n                        closeTag(parser);\n                    }\n                    else if (isMatch(nameBody, c)) {\n                        parser.tagName += c;\n                    }\n                    else if (parser.script) {\n                        parser.script += \"</\" + parser.tagName;\n                        parser.tagName = \"\";\n                        parser.state = S.SCRIPT;\n                    }\n                    else {\n                        if (!isWhitespace(c)) {\n                            strictFail(parser, \"Invalid tagname in closing tag\");\n                        }\n                        parser.state = S.CLOSE_TAG_SAW_WHITE;\n                    }\n                    continue;\n                case S.CLOSE_TAG_SAW_WHITE:\n                    if (isWhitespace(c)) {\n                        continue;\n                    }\n                    if (c === \">\") {\n                        closeTag(parser);\n                    }\n                    else {\n                        strictFail(parser, \"Invalid characters in closing tag\");\n                    }\n                    continue;\n                case S.TEXT_ENTITY:\n                case S.ATTRIB_VALUE_ENTITY_Q:\n                case S.ATTRIB_VALUE_ENTITY_U:\n                    var returnState;\n                    var buffer;\n                    switch (parser.state) {\n                        case S.TEXT_ENTITY:\n                            returnState = S.TEXT;\n                            buffer = \"textNode\";\n                            break;\n                        case S.ATTRIB_VALUE_ENTITY_Q:\n                            returnState = S.ATTRIB_VALUE_QUOTED;\n                            buffer = \"attribValue\";\n                            break;\n                        case S.ATTRIB_VALUE_ENTITY_U:\n                            returnState = S.ATTRIB_VALUE_UNQUOTED;\n                            buffer = \"attribValue\";\n                            break;\n                    }\n                    if (c === \";\") {\n                        if (parser.opt.unparsedEntities) {\n                            var parsedEntity = parseEntity(parser);\n                            parser.entity = \"\";\n                            parser.state = returnState;\n                            parser.write(parsedEntity);\n                        }\n                        else {\n                            parser[buffer] += parseEntity(parser);\n                            parser.entity = \"\";\n                            parser.state = returnState;\n                        }\n                    }\n                    else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {\n                        parser.entity += c;\n                    }\n                    else {\n                        strictFail(parser, \"Invalid character in entity name\");\n                        parser[buffer] += \"&\" + parser.entity + c;\n                        parser.entity = \"\";\n                        parser.state = returnState;\n                    }\n                    continue;\n                default: /* istanbul ignore next */ {\n                    throw new Error(parser, \"Unknown state: \" + parser.state);\n                }\n            }\n        } // while\n        if (parser.position >= parser.bufferCheckPosition) {\n            checkBufferLength(parser);\n        }\n        return parser;\n    }\n    /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */\n    /* istanbul ignore next */\n    if (!String.fromCodePoint) {\n        (function () {\n            var stringFromCharCode = String.fromCharCode;\n            var floor = Math.floor;\n            var fromCodePoint = function () {\n                var MAX_SIZE = 0x4000;\n                var codeUnits = [];\n                var highSurrogate;\n                var lowSurrogate;\n                var index = -1;\n                var length = arguments.length;\n                if (!length) {\n                    return \"\";\n                }\n                var result = \"\";\n                while (++index < length) {\n                    var codePoint = Number(arguments[index]);\n                    if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n                        codePoint < 0 || // not a valid Unicode code point\n                        codePoint > 0x10ffff || // not a valid Unicode code point\n                        floor(codePoint) !== codePoint // not an integer\n                    ) {\n                        throw RangeError(\"Invalid code point: \" + codePoint);\n                    }\n                    if (codePoint <= 0xffff) {\n                        // BMP code point\n                        codeUnits.push(codePoint);\n                    }\n                    else {\n                        // Astral code point; split in surrogate halves\n                        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n                        codePoint -= 0x10000;\n                        highSurrogate = (codePoint >> 10) + 0xd800;\n                        lowSurrogate = (codePoint % 0x400) + 0xdc00;\n                        codeUnits.push(highSurrogate, lowSurrogate);\n                    }\n                    if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n                        result += stringFromCharCode.apply(null, codeUnits);\n                        codeUnits.length = 0;\n                    }\n                }\n                return result;\n            };\n            /* istanbul ignore next */\n            if (Object.defineProperty) {\n                Object.defineProperty(String, \"fromCodePoint\", {\n                    value: fromCodePoint,\n                    configurable: true,\n                    writable: true,\n                });\n            }\n            else {\n                String.fromCodePoint = fromCodePoint;\n            }\n        })();\n    }\n    return sax;\n};\nconst sax = /** #__PURE__ */ initializeSax();\nexport { sax };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}