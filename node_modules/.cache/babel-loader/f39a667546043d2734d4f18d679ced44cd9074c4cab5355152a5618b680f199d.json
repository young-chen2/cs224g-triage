{"ast":null,"code":"import pRetry from \"p-retry\";\nimport PQueueMod from \"p-queue\";\nimport { _getFetchImplementation } from \"../singletons/fetch.js\";\nconst STATUS_NO_RETRY = [400,\n// Bad Request\n401,\n// Unauthorized\n403,\n// Forbidden\n404,\n// Not Found\n405,\n// Method Not Allowed\n406,\n// Not Acceptable\n407,\n// Proxy Authentication Required\n408 // Request Timeout\n];\nconst STATUS_IGNORE = [409 // Conflict\n];\n/**\n * A class that can be used to make async calls with concurrency and retry logic.\n *\n * This is useful for making calls to any kind of \"expensive\" external resource,\n * be it because it's rate-limited, subject to network issues, etc.\n *\n * Concurrent calls are limited by the `maxConcurrency` parameter, which defaults\n * to `Infinity`. This means that by default, all calls will be made in parallel.\n *\n * Retries are limited by the `maxRetries` parameter, which defaults to 6. This\n * means that by default, each call will be retried up to 6 times, with an\n * exponential backoff between each attempt.\n */\nexport class AsyncCaller {\n  constructor(params) {\n    Object.defineProperty(this, \"maxConcurrency\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"maxRetries\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"queue\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"onFailedResponseHook\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.maxConcurrency = params.maxConcurrency ?? Infinity;\n    this.maxRetries = params.maxRetries ?? 6;\n    if (\"default\" in PQueueMod) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.queue = new PQueueMod.default({\n        concurrency: this.maxConcurrency\n      });\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.queue = new PQueueMod({\n        concurrency: this.maxConcurrency\n      });\n    }\n    this.onFailedResponseHook = params?.onFailedResponseHook;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  call(callable, ...args) {\n    const onFailedResponseHook = this.onFailedResponseHook;\n    return this.queue.add(() => pRetry(() => callable(...args).catch(error => {\n      // eslint-disable-next-line no-instanceof/no-instanceof\n      if (error instanceof Error) {\n        throw error;\n      } else {\n        throw new Error(error);\n      }\n    }), {\n      async onFailedAttempt(error) {\n        if (error.message.startsWith(\"Cancel\") || error.message.startsWith(\"TimeoutError\") || error.message.startsWith(\"AbortError\")) {\n          throw error;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (error?.code === \"ECONNABORTED\") {\n          throw error;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const response = error?.response;\n        const status = response?.status;\n        if (status) {\n          if (STATUS_NO_RETRY.includes(+status)) {\n            throw error;\n          } else if (STATUS_IGNORE.includes(+status)) {\n            return;\n          }\n          if (onFailedResponseHook) {\n            await onFailedResponseHook(response);\n          }\n        }\n      },\n      // If needed we can change some of the defaults here,\n      // but they're quite sensible.\n      retries: this.maxRetries,\n      randomize: true\n    }), {\n      throwOnTimeout: true\n    });\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callWithOptions(options, callable, ...args) {\n    // Note this doesn't cancel the underlying request,\n    // when available prefer to use the signal option of the underlying call\n    if (options.signal) {\n      return Promise.race([this.call(callable, ...args), new Promise((_, reject) => {\n        options.signal?.addEventListener(\"abort\", () => {\n          reject(new Error(\"AbortError\"));\n        });\n      })]);\n    }\n    return this.call(callable, ...args);\n  }\n  fetch(...args) {\n    return this.call(() => _getFetchImplementation()(...args).then(res => res.ok ? res : Promise.reject(res)));\n  }\n}","map":{"version":3,"names":["pRetry","PQueueMod","_getFetchImplementation","STATUS_NO_RETRY","STATUS_IGNORE","AsyncCaller","constructor","params","Object","defineProperty","enumerable","configurable","writable","value","maxConcurrency","Infinity","maxRetries","queue","default","concurrency","onFailedResponseHook","call","callable","args","add","catch","error","Error","onFailedAttempt","message","startsWith","code","response","status","includes","retries","randomize","throwOnTimeout","callWithOptions","options","signal","Promise","race","_","reject","addEventListener","fetch","then","res","ok"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/langsmith/dist/utils/async_caller.js"],"sourcesContent":["import pRetry from \"p-retry\";\nimport PQueueMod from \"p-queue\";\nimport { _getFetchImplementation } from \"../singletons/fetch.js\";\nconst STATUS_NO_RETRY = [\n    400, // Bad Request\n    401, // Unauthorized\n    403, // Forbidden\n    404, // Not Found\n    405, // Method Not Allowed\n    406, // Not Acceptable\n    407, // Proxy Authentication Required\n    408, // Request Timeout\n];\nconst STATUS_IGNORE = [\n    409, // Conflict\n];\n/**\n * A class that can be used to make async calls with concurrency and retry logic.\n *\n * This is useful for making calls to any kind of \"expensive\" external resource,\n * be it because it's rate-limited, subject to network issues, etc.\n *\n * Concurrent calls are limited by the `maxConcurrency` parameter, which defaults\n * to `Infinity`. This means that by default, all calls will be made in parallel.\n *\n * Retries are limited by the `maxRetries` parameter, which defaults to 6. This\n * means that by default, each call will be retried up to 6 times, with an\n * exponential backoff between each attempt.\n */\nexport class AsyncCaller {\n    constructor(params) {\n        Object.defineProperty(this, \"maxConcurrency\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxRetries\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"queue\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"onFailedResponseHook\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.maxConcurrency = params.maxConcurrency ?? Infinity;\n        this.maxRetries = params.maxRetries ?? 6;\n        if (\"default\" in PQueueMod) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.queue = new PQueueMod.default({\n                concurrency: this.maxConcurrency,\n            });\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.queue = new PQueueMod({ concurrency: this.maxConcurrency });\n        }\n        this.onFailedResponseHook = params?.onFailedResponseHook;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    call(callable, ...args) {\n        const onFailedResponseHook = this.onFailedResponseHook;\n        return this.queue.add(() => pRetry(() => callable(...args).catch((error) => {\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (error instanceof Error) {\n                throw error;\n            }\n            else {\n                throw new Error(error);\n            }\n        }), {\n            async onFailedAttempt(error) {\n                if (error.message.startsWith(\"Cancel\") ||\n                    error.message.startsWith(\"TimeoutError\") ||\n                    error.message.startsWith(\"AbortError\")) {\n                    throw error;\n                }\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                if (error?.code === \"ECONNABORTED\") {\n                    throw error;\n                }\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                const response = error?.response;\n                const status = response?.status;\n                if (status) {\n                    if (STATUS_NO_RETRY.includes(+status)) {\n                        throw error;\n                    }\n                    else if (STATUS_IGNORE.includes(+status)) {\n                        return;\n                    }\n                    if (onFailedResponseHook) {\n                        await onFailedResponseHook(response);\n                    }\n                }\n            },\n            // If needed we can change some of the defaults here,\n            // but they're quite sensible.\n            retries: this.maxRetries,\n            randomize: true,\n        }), { throwOnTimeout: true });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callWithOptions(options, callable, ...args) {\n        // Note this doesn't cancel the underlying request,\n        // when available prefer to use the signal option of the underlying call\n        if (options.signal) {\n            return Promise.race([\n                this.call(callable, ...args),\n                new Promise((_, reject) => {\n                    options.signal?.addEventListener(\"abort\", () => {\n                        reject(new Error(\"AbortError\"));\n                    });\n                }),\n            ]);\n        }\n        return this.call(callable, ...args);\n    }\n    fetch(...args) {\n        return this.call(() => _getFetchImplementation()(...args).then((res) => res.ok ? res : Promise.reject(res)));\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}