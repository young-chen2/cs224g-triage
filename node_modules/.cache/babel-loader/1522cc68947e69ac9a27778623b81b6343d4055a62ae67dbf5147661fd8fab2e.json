{"ast":null,"code":"import { PromptTemplate } from \"@langchain/core/prompts\";\nimport { BaseChain } from \"./base.js\";\nimport { LLMChain } from \"./llm_chain.js\";\n/**\n * Chain that combines documents by stuffing into context.\n * @augments BaseChain\n * @augments StuffDocumentsChainInput\n */\nexport class StuffDocumentsChain extends BaseChain {\n  static lc_name() {\n    return \"StuffDocumentsChain\";\n  }\n  get inputKeys() {\n    return [this.inputKey, ...this.llmChain.inputKeys].filter(key => key !== this.documentVariableName);\n  }\n  get outputKeys() {\n    return this.llmChain.outputKeys;\n  }\n  constructor(fields) {\n    super(fields);\n    Object.defineProperty(this, \"llmChain\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"inputKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"input_documents\"\n    });\n    Object.defineProperty(this, \"documentVariableName\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"context\"\n    });\n    this.llmChain = fields.llmChain;\n    this.documentVariableName = fields.documentVariableName ?? this.documentVariableName;\n    this.inputKey = fields.inputKey ?? this.inputKey;\n  }\n  /** @ignore */\n  _prepInputs(values) {\n    if (!(this.inputKey in values)) {\n      throw new Error(`Document key ${this.inputKey} not found.`);\n    }\n    const {\n      [this.inputKey]: docs,\n      ...rest\n    } = values;\n    const texts = docs.map(({\n      pageContent\n    }) => pageContent);\n    const text = texts.join(\"\\n\\n\");\n    return {\n      ...rest,\n      [this.documentVariableName]: text\n    };\n  }\n  /** @ignore */\n  async _call(values, runManager) {\n    const result = await this.llmChain.call(this._prepInputs(values), runManager?.getChild(\"combine_documents\"));\n    return result;\n  }\n  _chainType() {\n    return \"stuff_documents_chain\";\n  }\n  static async deserialize(data) {\n    if (!data.llm_chain) {\n      throw new Error(\"Missing llm_chain\");\n    }\n    return new StuffDocumentsChain({\n      llmChain: await LLMChain.deserialize(data.llm_chain)\n    });\n  }\n  serialize() {\n    return {\n      _type: this._chainType(),\n      llm_chain: this.llmChain.serialize()\n    };\n  }\n}\n/**\n * Combine documents by mapping a chain over them, then combining results.\n * @augments BaseChain\n * @augments StuffDocumentsChainInput\n */\nexport class MapReduceDocumentsChain extends BaseChain {\n  static lc_name() {\n    return \"MapReduceDocumentsChain\";\n  }\n  get inputKeys() {\n    return [this.inputKey, ...this.combineDocumentChain.inputKeys];\n  }\n  get outputKeys() {\n    return this.combineDocumentChain.outputKeys;\n  }\n  constructor(fields) {\n    super(fields);\n    Object.defineProperty(this, \"llmChain\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"inputKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"input_documents\"\n    });\n    Object.defineProperty(this, \"documentVariableName\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"context\"\n    });\n    Object.defineProperty(this, \"returnIntermediateSteps\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"maxTokens\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 3000\n    });\n    Object.defineProperty(this, \"maxIterations\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 10\n    });\n    Object.defineProperty(this, \"ensureMapStep\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"combineDocumentChain\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.llmChain = fields.llmChain;\n    this.combineDocumentChain = fields.combineDocumentChain;\n    this.documentVariableName = fields.documentVariableName ?? this.documentVariableName;\n    this.ensureMapStep = fields.ensureMapStep ?? this.ensureMapStep;\n    this.inputKey = fields.inputKey ?? this.inputKey;\n    this.maxTokens = fields.maxTokens ?? this.maxTokens;\n    this.maxIterations = fields.maxIterations ?? this.maxIterations;\n    this.returnIntermediateSteps = fields.returnIntermediateSteps ?? false;\n  }\n  /** @ignore */\n  async _call(values, runManager) {\n    if (!(this.inputKey in values)) {\n      throw new Error(`Document key ${this.inputKey} not found.`);\n    }\n    const {\n      [this.inputKey]: docs,\n      ...rest\n    } = values;\n    let currentDocs = docs;\n    let intermediateSteps = [];\n    // For each iteration, we'll use the `llmChain` to get a new result\n    for (let i = 0; i < this.maxIterations; i += 1) {\n      const inputs = currentDocs.map(d => ({\n        [this.documentVariableName]: d.pageContent,\n        ...rest\n      }));\n      const canSkipMapStep = i !== 0 || !this.ensureMapStep;\n      if (canSkipMapStep) {\n        // Calculate the total tokens required in the input\n        const formatted = await this.combineDocumentChain.llmChain.prompt.format(this.combineDocumentChain._prepInputs({\n          [this.combineDocumentChain.inputKey]: currentDocs,\n          ...rest\n        }));\n        const length = await this.combineDocumentChain.llmChain._getNumTokens(formatted);\n        const withinTokenLimit = length < this.maxTokens;\n        // If we can skip the map step, and we're within the token limit, we don't\n        // need to run the map step, so just break out of the loop.\n        if (withinTokenLimit) {\n          break;\n        }\n      }\n      const results = await this.llmChain.apply(inputs,\n      // If we have a runManager, then we need to create a child for each input\n      // so that we can track the progress of each input.\n      runManager ? Array.from({\n        length: inputs.length\n      }, (_, i) => runManager.getChild(`map_${i + 1}`)) : undefined);\n      const {\n        outputKey\n      } = this.llmChain;\n      // If the flag is set, then concat that to the intermediate steps\n      if (this.returnIntermediateSteps) {\n        intermediateSteps = intermediateSteps.concat(results.map(r => r[outputKey]));\n      }\n      currentDocs = results.map(r => ({\n        pageContent: r[outputKey],\n        metadata: {}\n      }));\n    }\n    // Now, with the final result of all the inputs from the `llmChain`, we can\n    // run the `combineDocumentChain` over them.\n    const newInputs = {\n      [this.combineDocumentChain.inputKey]: currentDocs,\n      ...rest\n    };\n    const result = await this.combineDocumentChain.call(newInputs, runManager?.getChild(\"combine_documents\"));\n    // Return the intermediate steps results if the flag is set\n    if (this.returnIntermediateSteps) {\n      return {\n        ...result,\n        intermediateSteps\n      };\n    }\n    return result;\n  }\n  _chainType() {\n    return \"map_reduce_documents_chain\";\n  }\n  static async deserialize(data) {\n    if (!data.llm_chain) {\n      throw new Error(\"Missing llm_chain\");\n    }\n    if (!data.combine_document_chain) {\n      throw new Error(\"Missing combine_document_chain\");\n    }\n    return new MapReduceDocumentsChain({\n      llmChain: await LLMChain.deserialize(data.llm_chain),\n      combineDocumentChain: await StuffDocumentsChain.deserialize(data.combine_document_chain)\n    });\n  }\n  serialize() {\n    return {\n      _type: this._chainType(),\n      llm_chain: this.llmChain.serialize(),\n      combine_document_chain: this.combineDocumentChain.serialize()\n    };\n  }\n}\n/**\n * Combine documents by doing a first pass and then refining on more documents.\n * @augments BaseChain\n * @augments RefineDocumentsChainInput\n */\nexport class RefineDocumentsChain extends BaseChain {\n  static lc_name() {\n    return \"RefineDocumentsChain\";\n  }\n  get defaultDocumentPrompt() {\n    return new PromptTemplate({\n      inputVariables: [\"page_content\"],\n      template: \"{page_content}\"\n    });\n  }\n  get inputKeys() {\n    return [...new Set([this.inputKey, ...this.llmChain.inputKeys, ...this.refineLLMChain.inputKeys])].filter(key => key !== this.documentVariableName && key !== this.initialResponseName);\n  }\n  get outputKeys() {\n    return [this.outputKey];\n  }\n  constructor(fields) {\n    super(fields);\n    Object.defineProperty(this, \"llmChain\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"inputKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"input_documents\"\n    });\n    Object.defineProperty(this, \"outputKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"output_text\"\n    });\n    Object.defineProperty(this, \"documentVariableName\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"context\"\n    });\n    Object.defineProperty(this, \"initialResponseName\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"existing_answer\"\n    });\n    Object.defineProperty(this, \"refineLLMChain\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"documentPrompt\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.defaultDocumentPrompt\n    });\n    this.llmChain = fields.llmChain;\n    this.refineLLMChain = fields.refineLLMChain;\n    this.documentVariableName = fields.documentVariableName ?? this.documentVariableName;\n    this.inputKey = fields.inputKey ?? this.inputKey;\n    this.outputKey = fields.outputKey ?? this.outputKey;\n    this.documentPrompt = fields.documentPrompt ?? this.documentPrompt;\n    this.initialResponseName = fields.initialResponseName ?? this.initialResponseName;\n  }\n  /** @ignore */\n  async _constructInitialInputs(doc, rest) {\n    const baseInfo = {\n      page_content: doc.pageContent,\n      ...doc.metadata\n    };\n    const documentInfo = {};\n    this.documentPrompt.inputVariables.forEach(value => {\n      documentInfo[value] = baseInfo[value];\n    });\n    const baseInputs = {\n      [this.documentVariableName]: await this.documentPrompt.format({\n        ...documentInfo\n      })\n    };\n    const inputs = {\n      ...baseInputs,\n      ...rest\n    };\n    return inputs;\n  }\n  /** @ignore */\n  async _constructRefineInputs(doc, res) {\n    const baseInfo = {\n      page_content: doc.pageContent,\n      ...doc.metadata\n    };\n    const documentInfo = {};\n    this.documentPrompt.inputVariables.forEach(value => {\n      documentInfo[value] = baseInfo[value];\n    });\n    const baseInputs = {\n      [this.documentVariableName]: await this.documentPrompt.format({\n        ...documentInfo\n      })\n    };\n    const inputs = {\n      [this.initialResponseName]: res,\n      ...baseInputs\n    };\n    return inputs;\n  }\n  /** @ignore */\n  async _call(values, runManager) {\n    if (!(this.inputKey in values)) {\n      throw new Error(`Document key ${this.inputKey} not found.`);\n    }\n    const {\n      [this.inputKey]: docs,\n      ...rest\n    } = values;\n    const currentDocs = docs;\n    const initialInputs = await this._constructInitialInputs(currentDocs[0], rest);\n    let res = await this.llmChain.predict({\n      ...initialInputs\n    }, runManager?.getChild(\"answer\"));\n    const refineSteps = [res];\n    for (let i = 1; i < currentDocs.length; i += 1) {\n      const refineInputs = await this._constructRefineInputs(currentDocs[i], res);\n      const inputs = {\n        ...refineInputs,\n        ...rest\n      };\n      res = await this.refineLLMChain.predict({\n        ...inputs\n      }, runManager?.getChild(\"refine\"));\n      refineSteps.push(res);\n    }\n    return {\n      [this.outputKey]: res\n    };\n  }\n  _chainType() {\n    return \"refine_documents_chain\";\n  }\n  static async deserialize(data) {\n    const SerializedLLMChain = data.llm_chain;\n    if (!SerializedLLMChain) {\n      throw new Error(\"Missing llm_chain\");\n    }\n    const SerializedRefineDocumentChain = data.refine_llm_chain;\n    if (!SerializedRefineDocumentChain) {\n      throw new Error(\"Missing refine_llm_chain\");\n    }\n    return new RefineDocumentsChain({\n      llmChain: await LLMChain.deserialize(SerializedLLMChain),\n      refineLLMChain: await LLMChain.deserialize(SerializedRefineDocumentChain)\n    });\n  }\n  serialize() {\n    return {\n      _type: this._chainType(),\n      llm_chain: this.llmChain.serialize(),\n      refine_llm_chain: this.refineLLMChain.serialize()\n    };\n  }\n}","map":{"version":3,"names":["PromptTemplate","BaseChain","LLMChain","StuffDocumentsChain","lc_name","inputKeys","inputKey","llmChain","filter","key","documentVariableName","outputKeys","constructor","fields","Object","defineProperty","enumerable","configurable","writable","value","_prepInputs","values","Error","docs","rest","texts","map","pageContent","text","join","_call","runManager","result","call","getChild","_chainType","deserialize","data","llm_chain","serialize","_type","MapReduceDocumentsChain","combineDocumentChain","ensureMapStep","maxTokens","maxIterations","returnIntermediateSteps","currentDocs","intermediateSteps","i","inputs","d","canSkipMapStep","formatted","prompt","format","length","_getNumTokens","withinTokenLimit","results","apply","Array","from","_","undefined","outputKey","concat","r","metadata","newInputs","combine_document_chain","RefineDocumentsChain","defaultDocumentPrompt","inputVariables","template","Set","refineLLMChain","initialResponseName","documentPrompt","_constructInitialInputs","doc","baseInfo","page_content","documentInfo","forEach","baseInputs","_constructRefineInputs","res","initialInputs","predict","refineSteps","refineInputs","push","SerializedLLMChain","SerializedRefineDocumentChain","refine_llm_chain"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/langchain/dist/chains/combine_docs_chain.js"],"sourcesContent":["import { PromptTemplate } from \"@langchain/core/prompts\";\nimport { BaseChain } from \"./base.js\";\nimport { LLMChain } from \"./llm_chain.js\";\n/**\n * Chain that combines documents by stuffing into context.\n * @augments BaseChain\n * @augments StuffDocumentsChainInput\n */\nexport class StuffDocumentsChain extends BaseChain {\n    static lc_name() {\n        return \"StuffDocumentsChain\";\n    }\n    get inputKeys() {\n        return [this.inputKey, ...this.llmChain.inputKeys].filter((key) => key !== this.documentVariableName);\n    }\n    get outputKeys() {\n        return this.llmChain.outputKeys;\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"llmChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input_documents\"\n        });\n        Object.defineProperty(this, \"documentVariableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"context\"\n        });\n        this.llmChain = fields.llmChain;\n        this.documentVariableName =\n            fields.documentVariableName ?? this.documentVariableName;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n    }\n    /** @ignore */\n    _prepInputs(values) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Document key ${this.inputKey} not found.`);\n        }\n        const { [this.inputKey]: docs, ...rest } = values;\n        const texts = docs.map(({ pageContent }) => pageContent);\n        const text = texts.join(\"\\n\\n\");\n        return {\n            ...rest,\n            [this.documentVariableName]: text,\n        };\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        const result = await this.llmChain.call(this._prepInputs(values), runManager?.getChild(\"combine_documents\"));\n        return result;\n    }\n    _chainType() {\n        return \"stuff_documents_chain\";\n    }\n    static async deserialize(data) {\n        if (!data.llm_chain) {\n            throw new Error(\"Missing llm_chain\");\n        }\n        return new StuffDocumentsChain({\n            llmChain: await LLMChain.deserialize(data.llm_chain),\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            llm_chain: this.llmChain.serialize(),\n        };\n    }\n}\n/**\n * Combine documents by mapping a chain over them, then combining results.\n * @augments BaseChain\n * @augments StuffDocumentsChainInput\n */\nexport class MapReduceDocumentsChain extends BaseChain {\n    static lc_name() {\n        return \"MapReduceDocumentsChain\";\n    }\n    get inputKeys() {\n        return [this.inputKey, ...this.combineDocumentChain.inputKeys];\n    }\n    get outputKeys() {\n        return this.combineDocumentChain.outputKeys;\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"llmChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input_documents\"\n        });\n        Object.defineProperty(this, \"documentVariableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"context\"\n        });\n        Object.defineProperty(this, \"returnIntermediateSteps\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"maxTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 3000\n        });\n        Object.defineProperty(this, \"maxIterations\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 10\n        });\n        Object.defineProperty(this, \"ensureMapStep\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"combineDocumentChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.llmChain = fields.llmChain;\n        this.combineDocumentChain = fields.combineDocumentChain;\n        this.documentVariableName =\n            fields.documentVariableName ?? this.documentVariableName;\n        this.ensureMapStep = fields.ensureMapStep ?? this.ensureMapStep;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.maxTokens = fields.maxTokens ?? this.maxTokens;\n        this.maxIterations = fields.maxIterations ?? this.maxIterations;\n        this.returnIntermediateSteps = fields.returnIntermediateSteps ?? false;\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Document key ${this.inputKey} not found.`);\n        }\n        const { [this.inputKey]: docs, ...rest } = values;\n        let currentDocs = docs;\n        let intermediateSteps = [];\n        // For each iteration, we'll use the `llmChain` to get a new result\n        for (let i = 0; i < this.maxIterations; i += 1) {\n            const inputs = currentDocs.map((d) => ({\n                [this.documentVariableName]: d.pageContent,\n                ...rest,\n            }));\n            const canSkipMapStep = i !== 0 || !this.ensureMapStep;\n            if (canSkipMapStep) {\n                // Calculate the total tokens required in the input\n                const formatted = await this.combineDocumentChain.llmChain.prompt.format(this.combineDocumentChain._prepInputs({\n                    [this.combineDocumentChain.inputKey]: currentDocs,\n                    ...rest,\n                }));\n                const length = await this.combineDocumentChain.llmChain._getNumTokens(formatted);\n                const withinTokenLimit = length < this.maxTokens;\n                // If we can skip the map step, and we're within the token limit, we don't\n                // need to run the map step, so just break out of the loop.\n                if (withinTokenLimit) {\n                    break;\n                }\n            }\n            const results = await this.llmChain.apply(inputs, \n            // If we have a runManager, then we need to create a child for each input\n            // so that we can track the progress of each input.\n            runManager\n                ? Array.from({ length: inputs.length }, (_, i) => runManager.getChild(`map_${i + 1}`))\n                : undefined);\n            const { outputKey } = this.llmChain;\n            // If the flag is set, then concat that to the intermediate steps\n            if (this.returnIntermediateSteps) {\n                intermediateSteps = intermediateSteps.concat(results.map((r) => r[outputKey]));\n            }\n            currentDocs = results.map((r) => ({\n                pageContent: r[outputKey],\n                metadata: {},\n            }));\n        }\n        // Now, with the final result of all the inputs from the `llmChain`, we can\n        // run the `combineDocumentChain` over them.\n        const newInputs = {\n            [this.combineDocumentChain.inputKey]: currentDocs,\n            ...rest,\n        };\n        const result = await this.combineDocumentChain.call(newInputs, runManager?.getChild(\"combine_documents\"));\n        // Return the intermediate steps results if the flag is set\n        if (this.returnIntermediateSteps) {\n            return { ...result, intermediateSteps };\n        }\n        return result;\n    }\n    _chainType() {\n        return \"map_reduce_documents_chain\";\n    }\n    static async deserialize(data) {\n        if (!data.llm_chain) {\n            throw new Error(\"Missing llm_chain\");\n        }\n        if (!data.combine_document_chain) {\n            throw new Error(\"Missing combine_document_chain\");\n        }\n        return new MapReduceDocumentsChain({\n            llmChain: await LLMChain.deserialize(data.llm_chain),\n            combineDocumentChain: await StuffDocumentsChain.deserialize(data.combine_document_chain),\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            llm_chain: this.llmChain.serialize(),\n            combine_document_chain: this.combineDocumentChain.serialize(),\n        };\n    }\n}\n/**\n * Combine documents by doing a first pass and then refining on more documents.\n * @augments BaseChain\n * @augments RefineDocumentsChainInput\n */\nexport class RefineDocumentsChain extends BaseChain {\n    static lc_name() {\n        return \"RefineDocumentsChain\";\n    }\n    get defaultDocumentPrompt() {\n        return new PromptTemplate({\n            inputVariables: [\"page_content\"],\n            template: \"{page_content}\",\n        });\n    }\n    get inputKeys() {\n        return [\n            ...new Set([\n                this.inputKey,\n                ...this.llmChain.inputKeys,\n                ...this.refineLLMChain.inputKeys,\n            ]),\n        ].filter((key) => key !== this.documentVariableName && key !== this.initialResponseName);\n    }\n    get outputKeys() {\n        return [this.outputKey];\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"llmChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input_documents\"\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"output_text\"\n        });\n        Object.defineProperty(this, \"documentVariableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"context\"\n        });\n        Object.defineProperty(this, \"initialResponseName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"existing_answer\"\n        });\n        Object.defineProperty(this, \"refineLLMChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"documentPrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: this.defaultDocumentPrompt\n        });\n        this.llmChain = fields.llmChain;\n        this.refineLLMChain = fields.refineLLMChain;\n        this.documentVariableName =\n            fields.documentVariableName ?? this.documentVariableName;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.outputKey = fields.outputKey ?? this.outputKey;\n        this.documentPrompt = fields.documentPrompt ?? this.documentPrompt;\n        this.initialResponseName =\n            fields.initialResponseName ?? this.initialResponseName;\n    }\n    /** @ignore */\n    async _constructInitialInputs(doc, rest) {\n        const baseInfo = {\n            page_content: doc.pageContent,\n            ...doc.metadata,\n        };\n        const documentInfo = {};\n        this.documentPrompt.inputVariables.forEach((value) => {\n            documentInfo[value] = baseInfo[value];\n        });\n        const baseInputs = {\n            [this.documentVariableName]: await this.documentPrompt.format({\n                ...documentInfo,\n            }),\n        };\n        const inputs = { ...baseInputs, ...rest };\n        return inputs;\n    }\n    /** @ignore */\n    async _constructRefineInputs(doc, res) {\n        const baseInfo = {\n            page_content: doc.pageContent,\n            ...doc.metadata,\n        };\n        const documentInfo = {};\n        this.documentPrompt.inputVariables.forEach((value) => {\n            documentInfo[value] = baseInfo[value];\n        });\n        const baseInputs = {\n            [this.documentVariableName]: await this.documentPrompt.format({\n                ...documentInfo,\n            }),\n        };\n        const inputs = { [this.initialResponseName]: res, ...baseInputs };\n        return inputs;\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Document key ${this.inputKey} not found.`);\n        }\n        const { [this.inputKey]: docs, ...rest } = values;\n        const currentDocs = docs;\n        const initialInputs = await this._constructInitialInputs(currentDocs[0], rest);\n        let res = await this.llmChain.predict({ ...initialInputs }, runManager?.getChild(\"answer\"));\n        const refineSteps = [res];\n        for (let i = 1; i < currentDocs.length; i += 1) {\n            const refineInputs = await this._constructRefineInputs(currentDocs[i], res);\n            const inputs = { ...refineInputs, ...rest };\n            res = await this.refineLLMChain.predict({ ...inputs }, runManager?.getChild(\"refine\"));\n            refineSteps.push(res);\n        }\n        return { [this.outputKey]: res };\n    }\n    _chainType() {\n        return \"refine_documents_chain\";\n    }\n    static async deserialize(data) {\n        const SerializedLLMChain = data.llm_chain;\n        if (!SerializedLLMChain) {\n            throw new Error(\"Missing llm_chain\");\n        }\n        const SerializedRefineDocumentChain = data.refine_llm_chain;\n        if (!SerializedRefineDocumentChain) {\n            throw new Error(\"Missing refine_llm_chain\");\n        }\n        return new RefineDocumentsChain({\n            llmChain: await LLMChain.deserialize(SerializedLLMChain),\n            refineLLMChain: await LLMChain.deserialize(SerializedRefineDocumentChain),\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            llm_chain: this.llmChain.serialize(),\n            refine_llm_chain: this.refineLLMChain.serialize(),\n        };\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}