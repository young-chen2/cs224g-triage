{"ast":null,"code":"import { BaseCallbackHandler } from \"../callbacks/base.js\";\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _coerceToDict(value, defaultKey) {\n  return value && !Array.isArray(value) && typeof value === \"object\" ? value : {\n    [defaultKey]: value\n  };\n}\nfunction stripNonAlphanumeric(input) {\n  return input.replace(/[-:.]/g, \"\");\n}\nfunction convertToDottedOrderFormat(epoch, runId, executionOrder) {\n  const paddedOrder = executionOrder.toFixed(0).slice(0, 3).padStart(3, \"0\");\n  return stripNonAlphanumeric(`${new Date(epoch).toISOString().slice(0, -1)}${paddedOrder}Z`) + runId;\n}\nexport function isBaseTracer(x) {\n  return typeof x._addRunToRunMap === \"function\";\n}\nexport class BaseTracer extends BaseCallbackHandler {\n  constructor(_fields) {\n    super(...arguments);\n    Object.defineProperty(this, \"runMap\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new Map()\n    });\n  }\n  copy() {\n    return this;\n  }\n  stringifyError(error) {\n    // eslint-disable-next-line no-instanceof/no-instanceof\n    if (error instanceof Error) {\n      return error.message + (error?.stack ? `\\n\\n${error.stack}` : \"\");\n    }\n    if (typeof error === \"string\") {\n      return error;\n    }\n    return `${error}`;\n  }\n  _addChildRun(parentRun, childRun) {\n    parentRun.child_runs.push(childRun);\n  }\n  _addRunToRunMap(run) {\n    const currentDottedOrder = convertToDottedOrderFormat(run.start_time, run.id, run.execution_order);\n    const storedRun = {\n      ...run\n    };\n    if (storedRun.parent_run_id !== undefined) {\n      const parentRun = this.runMap.get(storedRun.parent_run_id);\n      if (parentRun) {\n        this._addChildRun(parentRun, storedRun);\n        parentRun.child_execution_order = Math.max(parentRun.child_execution_order, storedRun.child_execution_order);\n        storedRun.trace_id = parentRun.trace_id;\n        if (parentRun.dotted_order !== undefined) {\n          storedRun.dotted_order = [parentRun.dotted_order, currentDottedOrder].join(\".\");\n        } else {\n          // This can happen naturally for callbacks added within a run\n          // console.debug(`Parent run with UUID ${storedRun.parent_run_id} has no dotted order.`);\n        }\n      } else {\n        // This can happen naturally for callbacks added within a run\n        // console.debug(\n        //   `Parent run with UUID ${storedRun.parent_run_id} not found.`\n        // );\n      }\n    } else {\n      storedRun.trace_id = storedRun.id;\n      storedRun.dotted_order = currentDottedOrder;\n    }\n    this.runMap.set(storedRun.id, storedRun);\n    return storedRun;\n  }\n  async _endTrace(run) {\n    const parentRun = run.parent_run_id !== undefined && this.runMap.get(run.parent_run_id);\n    if (parentRun) {\n      parentRun.child_execution_order = Math.max(parentRun.child_execution_order, run.child_execution_order);\n    } else {\n      await this.persistRun(run);\n    }\n    this.runMap.delete(run.id);\n    await this.onRunUpdate?.(run);\n  }\n  _getExecutionOrder(parentRunId) {\n    const parentRun = parentRunId !== undefined && this.runMap.get(parentRunId);\n    // If a run has no parent then execution order is 1\n    if (!parentRun) {\n      return 1;\n    }\n    return parentRun.child_execution_order + 1;\n  }\n  /**\n   * Create and add a run to the run map for LLM start events.\n   * This must sometimes be done synchronously to avoid race conditions\n   * when callbacks are backgrounded, so we expose it as a separate method here.\n   */\n  _createRunForLLMStart(llm, prompts, runId, parentRunId, extraParams, tags, metadata, name) {\n    const execution_order = this._getExecutionOrder(parentRunId);\n    const start_time = Date.now();\n    const finalExtraParams = metadata ? {\n      ...extraParams,\n      metadata\n    } : extraParams;\n    const run = {\n      id: runId,\n      name: name ?? llm.id[llm.id.length - 1],\n      parent_run_id: parentRunId,\n      start_time,\n      serialized: llm,\n      events: [{\n        name: \"start\",\n        time: new Date(start_time).toISOString()\n      }],\n      inputs: {\n        prompts\n      },\n      execution_order,\n      child_runs: [],\n      child_execution_order: execution_order,\n      run_type: \"llm\",\n      extra: finalExtraParams ?? {},\n      tags: tags || []\n    };\n    return this._addRunToRunMap(run);\n  }\n  async handleLLMStart(llm, prompts, runId, parentRunId, extraParams, tags, metadata, name) {\n    const run = this.runMap.get(runId) ?? this._createRunForLLMStart(llm, prompts, runId, parentRunId, extraParams, tags, metadata, name);\n    await this.onRunCreate?.(run);\n    await this.onLLMStart?.(run);\n    return run;\n  }\n  /**\n   * Create and add a run to the run map for chat model start events.\n   * This must sometimes be done synchronously to avoid race conditions\n   * when callbacks are backgrounded, so we expose it as a separate method here.\n   */\n  _createRunForChatModelStart(llm, messages, runId, parentRunId, extraParams, tags, metadata, name) {\n    const execution_order = this._getExecutionOrder(parentRunId);\n    const start_time = Date.now();\n    const finalExtraParams = metadata ? {\n      ...extraParams,\n      metadata\n    } : extraParams;\n    const run = {\n      id: runId,\n      name: name ?? llm.id[llm.id.length - 1],\n      parent_run_id: parentRunId,\n      start_time,\n      serialized: llm,\n      events: [{\n        name: \"start\",\n        time: new Date(start_time).toISOString()\n      }],\n      inputs: {\n        messages\n      },\n      execution_order,\n      child_runs: [],\n      child_execution_order: execution_order,\n      run_type: \"llm\",\n      extra: finalExtraParams ?? {},\n      tags: tags || []\n    };\n    return this._addRunToRunMap(run);\n  }\n  async handleChatModelStart(llm, messages, runId, parentRunId, extraParams, tags, metadata, name) {\n    const run = this.runMap.get(runId) ?? this._createRunForChatModelStart(llm, messages, runId, parentRunId, extraParams, tags, metadata, name);\n    await this.onRunCreate?.(run);\n    await this.onLLMStart?.(run);\n    return run;\n  }\n  async handleLLMEnd(output, runId, _parentRunId, _tags, extraParams) {\n    const run = this.runMap.get(runId);\n    if (!run || run?.run_type !== \"llm\") {\n      throw new Error(\"No LLM run to end.\");\n    }\n    run.end_time = Date.now();\n    run.outputs = output;\n    run.events.push({\n      name: \"end\",\n      time: new Date(run.end_time).toISOString()\n    });\n    run.extra = {\n      ...run.extra,\n      ...extraParams\n    };\n    await this.onLLMEnd?.(run);\n    await this._endTrace(run);\n    return run;\n  }\n  async handleLLMError(error, runId, _parentRunId, _tags, extraParams) {\n    const run = this.runMap.get(runId);\n    if (!run || run?.run_type !== \"llm\") {\n      throw new Error(\"No LLM run to end.\");\n    }\n    run.end_time = Date.now();\n    run.error = this.stringifyError(error);\n    run.events.push({\n      name: \"error\",\n      time: new Date(run.end_time).toISOString()\n    });\n    run.extra = {\n      ...run.extra,\n      ...extraParams\n    };\n    await this.onLLMError?.(run);\n    await this._endTrace(run);\n    return run;\n  }\n  /**\n   * Create and add a run to the run map for chain start events.\n   * This must sometimes be done synchronously to avoid race conditions\n   * when callbacks are backgrounded, so we expose it as a separate method here.\n   */\n  _createRunForChainStart(chain, inputs, runId, parentRunId, tags, metadata, runType, name) {\n    const execution_order = this._getExecutionOrder(parentRunId);\n    const start_time = Date.now();\n    const run = {\n      id: runId,\n      name: name ?? chain.id[chain.id.length - 1],\n      parent_run_id: parentRunId,\n      start_time,\n      serialized: chain,\n      events: [{\n        name: \"start\",\n        time: new Date(start_time).toISOString()\n      }],\n      inputs,\n      execution_order,\n      child_execution_order: execution_order,\n      run_type: runType ?? \"chain\",\n      child_runs: [],\n      extra: metadata ? {\n        metadata\n      } : {},\n      tags: tags || []\n    };\n    return this._addRunToRunMap(run);\n  }\n  async handleChainStart(chain, inputs, runId, parentRunId, tags, metadata, runType, name) {\n    const run = this.runMap.get(runId) ?? this._createRunForChainStart(chain, inputs, runId, parentRunId, tags, metadata, runType, name);\n    await this.onRunCreate?.(run);\n    await this.onChainStart?.(run);\n    return run;\n  }\n  async handleChainEnd(outputs, runId, _parentRunId, _tags, kwargs) {\n    const run = this.runMap.get(runId);\n    if (!run) {\n      throw new Error(\"No chain run to end.\");\n    }\n    run.end_time = Date.now();\n    run.outputs = _coerceToDict(outputs, \"output\");\n    run.events.push({\n      name: \"end\",\n      time: new Date(run.end_time).toISOString()\n    });\n    if (kwargs?.inputs !== undefined) {\n      run.inputs = _coerceToDict(kwargs.inputs, \"input\");\n    }\n    await this.onChainEnd?.(run);\n    await this._endTrace(run);\n    return run;\n  }\n  async handleChainError(error, runId, _parentRunId, _tags, kwargs) {\n    const run = this.runMap.get(runId);\n    if (!run) {\n      throw new Error(\"No chain run to end.\");\n    }\n    run.end_time = Date.now();\n    run.error = this.stringifyError(error);\n    run.events.push({\n      name: \"error\",\n      time: new Date(run.end_time).toISOString()\n    });\n    if (kwargs?.inputs !== undefined) {\n      run.inputs = _coerceToDict(kwargs.inputs, \"input\");\n    }\n    await this.onChainError?.(run);\n    await this._endTrace(run);\n    return run;\n  }\n  /**\n   * Create and add a run to the run map for tool start events.\n   * This must sometimes be done synchronously to avoid race conditions\n   * when callbacks are backgrounded, so we expose it as a separate method here.\n   */\n  _createRunForToolStart(tool, input, runId, parentRunId, tags, metadata, name) {\n    const execution_order = this._getExecutionOrder(parentRunId);\n    const start_time = Date.now();\n    const run = {\n      id: runId,\n      name: name ?? tool.id[tool.id.length - 1],\n      parent_run_id: parentRunId,\n      start_time,\n      serialized: tool,\n      events: [{\n        name: \"start\",\n        time: new Date(start_time).toISOString()\n      }],\n      inputs: {\n        input\n      },\n      execution_order,\n      child_execution_order: execution_order,\n      run_type: \"tool\",\n      child_runs: [],\n      extra: metadata ? {\n        metadata\n      } : {},\n      tags: tags || []\n    };\n    return this._addRunToRunMap(run);\n  }\n  async handleToolStart(tool, input, runId, parentRunId, tags, metadata, name) {\n    const run = this.runMap.get(runId) ?? this._createRunForToolStart(tool, input, runId, parentRunId, tags, metadata, name);\n    await this.onRunCreate?.(run);\n    await this.onToolStart?.(run);\n    return run;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async handleToolEnd(output, runId) {\n    const run = this.runMap.get(runId);\n    if (!run || run?.run_type !== \"tool\") {\n      throw new Error(\"No tool run to end\");\n    }\n    run.end_time = Date.now();\n    run.outputs = {\n      output\n    };\n    run.events.push({\n      name: \"end\",\n      time: new Date(run.end_time).toISOString()\n    });\n    await this.onToolEnd?.(run);\n    await this._endTrace(run);\n    return run;\n  }\n  async handleToolError(error, runId) {\n    const run = this.runMap.get(runId);\n    if (!run || run?.run_type !== \"tool\") {\n      throw new Error(\"No tool run to end\");\n    }\n    run.end_time = Date.now();\n    run.error = this.stringifyError(error);\n    run.events.push({\n      name: \"error\",\n      time: new Date(run.end_time).toISOString()\n    });\n    await this.onToolError?.(run);\n    await this._endTrace(run);\n    return run;\n  }\n  async handleAgentAction(action, runId) {\n    const run = this.runMap.get(runId);\n    if (!run || run?.run_type !== \"chain\") {\n      return;\n    }\n    const agentRun = run;\n    agentRun.actions = agentRun.actions || [];\n    agentRun.actions.push(action);\n    agentRun.events.push({\n      name: \"agent_action\",\n      time: new Date().toISOString(),\n      kwargs: {\n        action\n      }\n    });\n    await this.onAgentAction?.(run);\n  }\n  async handleAgentEnd(action, runId) {\n    const run = this.runMap.get(runId);\n    if (!run || run?.run_type !== \"chain\") {\n      return;\n    }\n    run.events.push({\n      name: \"agent_end\",\n      time: new Date().toISOString(),\n      kwargs: {\n        action\n      }\n    });\n    await this.onAgentEnd?.(run);\n  }\n  /**\n   * Create and add a run to the run map for retriever start events.\n   * This must sometimes be done synchronously to avoid race conditions\n   * when callbacks are backgrounded, so we expose it as a separate method here.\n   */\n  _createRunForRetrieverStart(retriever, query, runId, parentRunId, tags, metadata, name) {\n    const execution_order = this._getExecutionOrder(parentRunId);\n    const start_time = Date.now();\n    const run = {\n      id: runId,\n      name: name ?? retriever.id[retriever.id.length - 1],\n      parent_run_id: parentRunId,\n      start_time,\n      serialized: retriever,\n      events: [{\n        name: \"start\",\n        time: new Date(start_time).toISOString()\n      }],\n      inputs: {\n        query\n      },\n      execution_order,\n      child_execution_order: execution_order,\n      run_type: \"retriever\",\n      child_runs: [],\n      extra: metadata ? {\n        metadata\n      } : {},\n      tags: tags || []\n    };\n    return this._addRunToRunMap(run);\n  }\n  async handleRetrieverStart(retriever, query, runId, parentRunId, tags, metadata, name) {\n    const run = this.runMap.get(runId) ?? this._createRunForRetrieverStart(retriever, query, runId, parentRunId, tags, metadata, name);\n    await this.onRunCreate?.(run);\n    await this.onRetrieverStart?.(run);\n    return run;\n  }\n  async handleRetrieverEnd(documents, runId) {\n    const run = this.runMap.get(runId);\n    if (!run || run?.run_type !== \"retriever\") {\n      throw new Error(\"No retriever run to end\");\n    }\n    run.end_time = Date.now();\n    run.outputs = {\n      documents\n    };\n    run.events.push({\n      name: \"end\",\n      time: new Date(run.end_time).toISOString()\n    });\n    await this.onRetrieverEnd?.(run);\n    await this._endTrace(run);\n    return run;\n  }\n  async handleRetrieverError(error, runId) {\n    const run = this.runMap.get(runId);\n    if (!run || run?.run_type !== \"retriever\") {\n      throw new Error(\"No retriever run to end\");\n    }\n    run.end_time = Date.now();\n    run.error = this.stringifyError(error);\n    run.events.push({\n      name: \"error\",\n      time: new Date(run.end_time).toISOString()\n    });\n    await this.onRetrieverError?.(run);\n    await this._endTrace(run);\n    return run;\n  }\n  async handleText(text, runId) {\n    const run = this.runMap.get(runId);\n    if (!run || run?.run_type !== \"chain\") {\n      return;\n    }\n    run.events.push({\n      name: \"text\",\n      time: new Date().toISOString(),\n      kwargs: {\n        text\n      }\n    });\n    await this.onText?.(run);\n  }\n  async handleLLMNewToken(token, idx, runId, _parentRunId, _tags, fields) {\n    const run = this.runMap.get(runId);\n    if (!run || run?.run_type !== \"llm\") {\n      throw new Error(`Invalid \"runId\" provided to \"handleLLMNewToken\" callback.`);\n    }\n    run.events.push({\n      name: \"new_token\",\n      time: new Date().toISOString(),\n      kwargs: {\n        token,\n        idx,\n        chunk: fields?.chunk\n      }\n    });\n    await this.onLLMNewToken?.(run, token, {\n      chunk: fields?.chunk\n    });\n    return run;\n  }\n}","map":{"version":3,"names":["BaseCallbackHandler","_coerceToDict","value","defaultKey","Array","isArray","stripNonAlphanumeric","input","replace","convertToDottedOrderFormat","epoch","runId","executionOrder","paddedOrder","toFixed","slice","padStart","Date","toISOString","isBaseTracer","x","_addRunToRunMap","BaseTracer","constructor","_fields","arguments","Object","defineProperty","enumerable","configurable","writable","Map","copy","stringifyError","error","Error","message","stack","_addChildRun","parentRun","childRun","child_runs","push","run","currentDottedOrder","start_time","id","execution_order","storedRun","parent_run_id","undefined","runMap","get","child_execution_order","Math","max","trace_id","dotted_order","join","set","_endTrace","persistRun","delete","onRunUpdate","_getExecutionOrder","parentRunId","_createRunForLLMStart","llm","prompts","extraParams","tags","metadata","name","now","finalExtraParams","length","serialized","events","time","inputs","run_type","extra","handleLLMStart","onRunCreate","onLLMStart","_createRunForChatModelStart","messages","handleChatModelStart","handleLLMEnd","output","_parentRunId","_tags","end_time","outputs","onLLMEnd","handleLLMError","onLLMError","_createRunForChainStart","chain","runType","handleChainStart","onChainStart","handleChainEnd","kwargs","onChainEnd","handleChainError","onChainError","_createRunForToolStart","tool","handleToolStart","onToolStart","handleToolEnd","onToolEnd","handleToolError","onToolError","handleAgentAction","action","agentRun","actions","onAgentAction","handleAgentEnd","onAgentEnd","_createRunForRetrieverStart","retriever","query","handleRetrieverStart","onRetrieverStart","handleRetrieverEnd","documents","onRetrieverEnd","handleRetrieverError","onRetrieverError","handleText","text","onText","handleLLMNewToken","token","idx","fields","chunk","onLLMNewToken"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/@langchain/core/dist/tracers/base.js"],"sourcesContent":["import { BaseCallbackHandler, } from \"../callbacks/base.js\";\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _coerceToDict(value, defaultKey) {\n    return value && !Array.isArray(value) && typeof value === \"object\"\n        ? value\n        : { [defaultKey]: value };\n}\nfunction stripNonAlphanumeric(input) {\n    return input.replace(/[-:.]/g, \"\");\n}\nfunction convertToDottedOrderFormat(epoch, runId, executionOrder) {\n    const paddedOrder = executionOrder.toFixed(0).slice(0, 3).padStart(3, \"0\");\n    return (stripNonAlphanumeric(`${new Date(epoch).toISOString().slice(0, -1)}${paddedOrder}Z`) + runId);\n}\nexport function isBaseTracer(x) {\n    return typeof x._addRunToRunMap === \"function\";\n}\nexport class BaseTracer extends BaseCallbackHandler {\n    constructor(_fields) {\n        super(...arguments);\n        Object.defineProperty(this, \"runMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Map()\n        });\n    }\n    copy() {\n        return this;\n    }\n    stringifyError(error) {\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (error instanceof Error) {\n            return error.message + (error?.stack ? `\\n\\n${error.stack}` : \"\");\n        }\n        if (typeof error === \"string\") {\n            return error;\n        }\n        return `${error}`;\n    }\n    _addChildRun(parentRun, childRun) {\n        parentRun.child_runs.push(childRun);\n    }\n    _addRunToRunMap(run) {\n        const currentDottedOrder = convertToDottedOrderFormat(run.start_time, run.id, run.execution_order);\n        const storedRun = { ...run };\n        if (storedRun.parent_run_id !== undefined) {\n            const parentRun = this.runMap.get(storedRun.parent_run_id);\n            if (parentRun) {\n                this._addChildRun(parentRun, storedRun);\n                parentRun.child_execution_order = Math.max(parentRun.child_execution_order, storedRun.child_execution_order);\n                storedRun.trace_id = parentRun.trace_id;\n                if (parentRun.dotted_order !== undefined) {\n                    storedRun.dotted_order = [\n                        parentRun.dotted_order,\n                        currentDottedOrder,\n                    ].join(\".\");\n                }\n                else {\n                    // This can happen naturally for callbacks added within a run\n                    // console.debug(`Parent run with UUID ${storedRun.parent_run_id} has no dotted order.`);\n                }\n            }\n            else {\n                // This can happen naturally for callbacks added within a run\n                // console.debug(\n                //   `Parent run with UUID ${storedRun.parent_run_id} not found.`\n                // );\n            }\n        }\n        else {\n            storedRun.trace_id = storedRun.id;\n            storedRun.dotted_order = currentDottedOrder;\n        }\n        this.runMap.set(storedRun.id, storedRun);\n        return storedRun;\n    }\n    async _endTrace(run) {\n        const parentRun = run.parent_run_id !== undefined && this.runMap.get(run.parent_run_id);\n        if (parentRun) {\n            parentRun.child_execution_order = Math.max(parentRun.child_execution_order, run.child_execution_order);\n        }\n        else {\n            await this.persistRun(run);\n        }\n        this.runMap.delete(run.id);\n        await this.onRunUpdate?.(run);\n    }\n    _getExecutionOrder(parentRunId) {\n        const parentRun = parentRunId !== undefined && this.runMap.get(parentRunId);\n        // If a run has no parent then execution order is 1\n        if (!parentRun) {\n            return 1;\n        }\n        return parentRun.child_execution_order + 1;\n    }\n    /**\n     * Create and add a run to the run map for LLM start events.\n     * This must sometimes be done synchronously to avoid race conditions\n     * when callbacks are backgrounded, so we expose it as a separate method here.\n     */\n    _createRunForLLMStart(llm, prompts, runId, parentRunId, extraParams, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const finalExtraParams = metadata\n            ? { ...extraParams, metadata }\n            : extraParams;\n        const run = {\n            id: runId,\n            name: name ?? llm.id[llm.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: llm,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString(),\n                },\n            ],\n            inputs: { prompts },\n            execution_order,\n            child_runs: [],\n            child_execution_order: execution_order,\n            run_type: \"llm\",\n            extra: finalExtraParams ?? {},\n            tags: tags || [],\n        };\n        return this._addRunToRunMap(run);\n    }\n    async handleLLMStart(llm, prompts, runId, parentRunId, extraParams, tags, metadata, name) {\n        const run = this.runMap.get(runId) ??\n            this._createRunForLLMStart(llm, prompts, runId, parentRunId, extraParams, tags, metadata, name);\n        await this.onRunCreate?.(run);\n        await this.onLLMStart?.(run);\n        return run;\n    }\n    /**\n     * Create and add a run to the run map for chat model start events.\n     * This must sometimes be done synchronously to avoid race conditions\n     * when callbacks are backgrounded, so we expose it as a separate method here.\n     */\n    _createRunForChatModelStart(llm, messages, runId, parentRunId, extraParams, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const finalExtraParams = metadata\n            ? { ...extraParams, metadata }\n            : extraParams;\n        const run = {\n            id: runId,\n            name: name ?? llm.id[llm.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: llm,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString(),\n                },\n            ],\n            inputs: { messages },\n            execution_order,\n            child_runs: [],\n            child_execution_order: execution_order,\n            run_type: \"llm\",\n            extra: finalExtraParams ?? {},\n            tags: tags || [],\n        };\n        return this._addRunToRunMap(run);\n    }\n    async handleChatModelStart(llm, messages, runId, parentRunId, extraParams, tags, metadata, name) {\n        const run = this.runMap.get(runId) ??\n            this._createRunForChatModelStart(llm, messages, runId, parentRunId, extraParams, tags, metadata, name);\n        await this.onRunCreate?.(run);\n        await this.onLLMStart?.(run);\n        return run;\n    }\n    async handleLLMEnd(output, runId, _parentRunId, _tags, extraParams) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"llm\") {\n            throw new Error(\"No LLM run to end.\");\n        }\n        run.end_time = Date.now();\n        run.outputs = output;\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString(),\n        });\n        run.extra = { ...run.extra, ...extraParams };\n        await this.onLLMEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleLLMError(error, runId, _parentRunId, _tags, extraParams) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"llm\") {\n            throw new Error(\"No LLM run to end.\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString(),\n        });\n        run.extra = { ...run.extra, ...extraParams };\n        await this.onLLMError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    /**\n     * Create and add a run to the run map for chain start events.\n     * This must sometimes be done synchronously to avoid race conditions\n     * when callbacks are backgrounded, so we expose it as a separate method here.\n     */\n    _createRunForChainStart(chain, inputs, runId, parentRunId, tags, metadata, runType, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const run = {\n            id: runId,\n            name: name ?? chain.id[chain.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: chain,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString(),\n                },\n            ],\n            inputs,\n            execution_order,\n            child_execution_order: execution_order,\n            run_type: runType ?? \"chain\",\n            child_runs: [],\n            extra: metadata ? { metadata } : {},\n            tags: tags || [],\n        };\n        return this._addRunToRunMap(run);\n    }\n    async handleChainStart(chain, inputs, runId, parentRunId, tags, metadata, runType, name) {\n        const run = this.runMap.get(runId) ??\n            this._createRunForChainStart(chain, inputs, runId, parentRunId, tags, metadata, runType, name);\n        await this.onRunCreate?.(run);\n        await this.onChainStart?.(run);\n        return run;\n    }\n    async handleChainEnd(outputs, runId, _parentRunId, _tags, kwargs) {\n        const run = this.runMap.get(runId);\n        if (!run) {\n            throw new Error(\"No chain run to end.\");\n        }\n        run.end_time = Date.now();\n        run.outputs = _coerceToDict(outputs, \"output\");\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString(),\n        });\n        if (kwargs?.inputs !== undefined) {\n            run.inputs = _coerceToDict(kwargs.inputs, \"input\");\n        }\n        await this.onChainEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleChainError(error, runId, _parentRunId, _tags, kwargs) {\n        const run = this.runMap.get(runId);\n        if (!run) {\n            throw new Error(\"No chain run to end.\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString(),\n        });\n        if (kwargs?.inputs !== undefined) {\n            run.inputs = _coerceToDict(kwargs.inputs, \"input\");\n        }\n        await this.onChainError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    /**\n     * Create and add a run to the run map for tool start events.\n     * This must sometimes be done synchronously to avoid race conditions\n     * when callbacks are backgrounded, so we expose it as a separate method here.\n     */\n    _createRunForToolStart(tool, input, runId, parentRunId, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const run = {\n            id: runId,\n            name: name ?? tool.id[tool.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: tool,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString(),\n                },\n            ],\n            inputs: { input },\n            execution_order,\n            child_execution_order: execution_order,\n            run_type: \"tool\",\n            child_runs: [],\n            extra: metadata ? { metadata } : {},\n            tags: tags || [],\n        };\n        return this._addRunToRunMap(run);\n    }\n    async handleToolStart(tool, input, runId, parentRunId, tags, metadata, name) {\n        const run = this.runMap.get(runId) ??\n            this._createRunForToolStart(tool, input, runId, parentRunId, tags, metadata, name);\n        await this.onRunCreate?.(run);\n        await this.onToolStart?.(run);\n        return run;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async handleToolEnd(output, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"tool\") {\n            throw new Error(\"No tool run to end\");\n        }\n        run.end_time = Date.now();\n        run.outputs = { output };\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString(),\n        });\n        await this.onToolEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleToolError(error, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"tool\") {\n            throw new Error(\"No tool run to end\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString(),\n        });\n        await this.onToolError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleAgentAction(action, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"chain\") {\n            return;\n        }\n        const agentRun = run;\n        agentRun.actions = agentRun.actions || [];\n        agentRun.actions.push(action);\n        agentRun.events.push({\n            name: \"agent_action\",\n            time: new Date().toISOString(),\n            kwargs: { action },\n        });\n        await this.onAgentAction?.(run);\n    }\n    async handleAgentEnd(action, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"chain\") {\n            return;\n        }\n        run.events.push({\n            name: \"agent_end\",\n            time: new Date().toISOString(),\n            kwargs: { action },\n        });\n        await this.onAgentEnd?.(run);\n    }\n    /**\n     * Create and add a run to the run map for retriever start events.\n     * This must sometimes be done synchronously to avoid race conditions\n     * when callbacks are backgrounded, so we expose it as a separate method here.\n     */\n    _createRunForRetrieverStart(retriever, query, runId, parentRunId, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const run = {\n            id: runId,\n            name: name ?? retriever.id[retriever.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: retriever,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString(),\n                },\n            ],\n            inputs: { query },\n            execution_order,\n            child_execution_order: execution_order,\n            run_type: \"retriever\",\n            child_runs: [],\n            extra: metadata ? { metadata } : {},\n            tags: tags || [],\n        };\n        return this._addRunToRunMap(run);\n    }\n    async handleRetrieverStart(retriever, query, runId, parentRunId, tags, metadata, name) {\n        const run = this.runMap.get(runId) ??\n            this._createRunForRetrieverStart(retriever, query, runId, parentRunId, tags, metadata, name);\n        await this.onRunCreate?.(run);\n        await this.onRetrieverStart?.(run);\n        return run;\n    }\n    async handleRetrieverEnd(documents, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"retriever\") {\n            throw new Error(\"No retriever run to end\");\n        }\n        run.end_time = Date.now();\n        run.outputs = { documents };\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString(),\n        });\n        await this.onRetrieverEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleRetrieverError(error, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"retriever\") {\n            throw new Error(\"No retriever run to end\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString(),\n        });\n        await this.onRetrieverError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleText(text, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"chain\") {\n            return;\n        }\n        run.events.push({\n            name: \"text\",\n            time: new Date().toISOString(),\n            kwargs: { text },\n        });\n        await this.onText?.(run);\n    }\n    async handleLLMNewToken(token, idx, runId, _parentRunId, _tags, fields) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"llm\") {\n            throw new Error(`Invalid \"runId\" provided to \"handleLLMNewToken\" callback.`);\n        }\n        run.events.push({\n            name: \"new_token\",\n            time: new Date().toISOString(),\n            kwargs: { token, idx, chunk: fields?.chunk },\n        });\n        await this.onLLMNewToken?.(run, token, { chunk: fields?.chunk });\n        return run;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}