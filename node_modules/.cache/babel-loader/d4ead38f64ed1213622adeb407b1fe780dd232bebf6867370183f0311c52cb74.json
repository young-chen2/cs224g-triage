{"ast":null,"code":"import pRetry from \"p-retry\";\nimport PQueueMod from \"p-queue\";\nconst STATUS_NO_RETRY = [400, 401, 402, 403, 404, 405, 406, 407, 409 // Conflict\n];\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst defaultFailedAttemptHandler = error => {\n  if (error.message.startsWith(\"Cancel\") || error.message.startsWith(\"AbortError\") || error.name === \"AbortError\") {\n    throw error;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (error?.code === \"ECONNABORTED\") {\n    throw error;\n  }\n  const status =\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  error?.response?.status ?? error?.status;\n  if (status && STATUS_NO_RETRY.includes(+status)) {\n    throw error;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (error?.error?.code === \"insufficient_quota\") {\n    const err = new Error(error?.message);\n    err.name = \"InsufficientQuotaError\";\n    throw err;\n  }\n};\n/**\n * A class that can be used to make async calls with concurrency and retry logic.\n *\n * This is useful for making calls to any kind of \"expensive\" external resource,\n * be it because it's rate-limited, subject to network issues, etc.\n *\n * Concurrent calls are limited by the `maxConcurrency` parameter, which defaults\n * to `Infinity`. This means that by default, all calls will be made in parallel.\n *\n * Retries are limited by the `maxRetries` parameter, which defaults to 6. This\n * means that by default, each call will be retried up to 6 times, with an\n * exponential backoff between each attempt.\n */\nexport class AsyncCaller {\n  constructor(params) {\n    Object.defineProperty(this, \"maxConcurrency\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"maxRetries\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"onFailedAttempt\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"queue\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.maxConcurrency = params.maxConcurrency ?? Infinity;\n    this.maxRetries = params.maxRetries ?? 6;\n    this.onFailedAttempt = params.onFailedAttempt ?? defaultFailedAttemptHandler;\n    const PQueue = \"default\" in PQueueMod ? PQueueMod.default : PQueueMod;\n    this.queue = new PQueue({\n      concurrency: this.maxConcurrency\n    });\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  call(callable, ...args) {\n    return this.queue.add(() => pRetry(() => callable(...args).catch(error => {\n      // eslint-disable-next-line no-instanceof/no-instanceof\n      if (error instanceof Error) {\n        throw error;\n      } else {\n        throw new Error(error);\n      }\n    }), {\n      onFailedAttempt: this.onFailedAttempt,\n      retries: this.maxRetries,\n      randomize: true\n      // If needed we can change some of the defaults here,\n      // but they're quite sensible.\n    }), {\n      throwOnTimeout: true\n    });\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callWithOptions(options, callable, ...args) {\n    // Note this doesn't cancel the underlying request,\n    // when available prefer to use the signal option of the underlying call\n    if (options.signal) {\n      return Promise.race([this.call(callable, ...args), new Promise((_, reject) => {\n        options.signal?.addEventListener(\"abort\", () => {\n          reject(new Error(\"AbortError\"));\n        });\n      })]);\n    }\n    return this.call(callable, ...args);\n  }\n  fetch(...args) {\n    return this.call(() => fetch(...args).then(res => res.ok ? res : Promise.reject(res)));\n  }\n}","map":{"version":3,"names":["pRetry","PQueueMod","STATUS_NO_RETRY","defaultFailedAttemptHandler","error","message","startsWith","name","code","status","response","includes","err","Error","AsyncCaller","constructor","params","Object","defineProperty","enumerable","configurable","writable","value","maxConcurrency","Infinity","maxRetries","onFailedAttempt","PQueue","default","queue","concurrency","call","callable","args","add","catch","retries","randomize","throwOnTimeout","callWithOptions","options","signal","Promise","race","_","reject","addEventListener","fetch","then","res","ok"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/@langchain/core/dist/utils/async_caller.js"],"sourcesContent":["import pRetry from \"p-retry\";\nimport PQueueMod from \"p-queue\";\nconst STATUS_NO_RETRY = [\n    400,\n    401,\n    402,\n    403,\n    404,\n    405,\n    406,\n    407,\n    409, // Conflict\n];\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst defaultFailedAttemptHandler = (error) => {\n    if (error.message.startsWith(\"Cancel\") ||\n        error.message.startsWith(\"AbortError\") ||\n        error.name === \"AbortError\") {\n        throw error;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (error?.code === \"ECONNABORTED\") {\n        throw error;\n    }\n    const status = \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    error?.response?.status ?? error?.status;\n    if (status && STATUS_NO_RETRY.includes(+status)) {\n        throw error;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (error?.error?.code === \"insufficient_quota\") {\n        const err = new Error(error?.message);\n        err.name = \"InsufficientQuotaError\";\n        throw err;\n    }\n};\n/**\n * A class that can be used to make async calls with concurrency and retry logic.\n *\n * This is useful for making calls to any kind of \"expensive\" external resource,\n * be it because it's rate-limited, subject to network issues, etc.\n *\n * Concurrent calls are limited by the `maxConcurrency` parameter, which defaults\n * to `Infinity`. This means that by default, all calls will be made in parallel.\n *\n * Retries are limited by the `maxRetries` parameter, which defaults to 6. This\n * means that by default, each call will be retried up to 6 times, with an\n * exponential backoff between each attempt.\n */\nexport class AsyncCaller {\n    constructor(params) {\n        Object.defineProperty(this, \"maxConcurrency\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxRetries\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"onFailedAttempt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"queue\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.maxConcurrency = params.maxConcurrency ?? Infinity;\n        this.maxRetries = params.maxRetries ?? 6;\n        this.onFailedAttempt =\n            params.onFailedAttempt ?? defaultFailedAttemptHandler;\n        const PQueue = \"default\" in PQueueMod ? PQueueMod.default : PQueueMod;\n        this.queue = new PQueue({ concurrency: this.maxConcurrency });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    call(callable, ...args) {\n        return this.queue.add(() => pRetry(() => callable(...args).catch((error) => {\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (error instanceof Error) {\n                throw error;\n            }\n            else {\n                throw new Error(error);\n            }\n        }), {\n            onFailedAttempt: this.onFailedAttempt,\n            retries: this.maxRetries,\n            randomize: true,\n            // If needed we can change some of the defaults here,\n            // but they're quite sensible.\n        }), { throwOnTimeout: true });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callWithOptions(options, callable, ...args) {\n        // Note this doesn't cancel the underlying request,\n        // when available prefer to use the signal option of the underlying call\n        if (options.signal) {\n            return Promise.race([\n                this.call(callable, ...args),\n                new Promise((_, reject) => {\n                    options.signal?.addEventListener(\"abort\", () => {\n                        reject(new Error(\"AbortError\"));\n                    });\n                }),\n            ]);\n        }\n        return this.call(callable, ...args);\n    }\n    fetch(...args) {\n        return this.call(() => fetch(...args).then((res) => (res.ok ? res : Promise.reject(res))));\n    }\n}\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,SAAS;AAC5B,OAAOC,SAAS,MAAM,SAAS;AAC/B,MAAMC,eAAe,GAAG,CACpB,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,CAAE;AAAA,CACR;AACD;AACA,MAAMC,2BAA2B,GAAIC,KAAK,IAAK;EAC3C,IAAIA,KAAK,CAACC,OAAO,CAACC,UAAU,CAAC,QAAQ,CAAC,IAClCF,KAAK,CAACC,OAAO,CAACC,UAAU,CAAC,YAAY,CAAC,IACtCF,KAAK,CAACG,IAAI,KAAK,YAAY,EAAE;IAC7B,MAAMH,KAAK;EACf;EACA;EACA,IAAIA,KAAK,EAAEI,IAAI,KAAK,cAAc,EAAE;IAChC,MAAMJ,KAAK;EACf;EACA,MAAMK,MAAM;EACZ;EACAL,KAAK,EAAEM,QAAQ,EAAED,MAAM,IAAIL,KAAK,EAAEK,MAAM;EACxC,IAAIA,MAAM,IAAIP,eAAe,CAACS,QAAQ,CAAC,CAACF,MAAM,CAAC,EAAE;IAC7C,MAAML,KAAK;EACf;EACA;EACA,IAAIA,KAAK,EAAEA,KAAK,EAAEI,IAAI,KAAK,oBAAoB,EAAE;IAC7C,MAAMI,GAAG,GAAG,IAAIC,KAAK,CAACT,KAAK,EAAEC,OAAO,CAAC;IACrCO,GAAG,CAACL,IAAI,GAAG,wBAAwB;IACnC,MAAMK,GAAG;EACb;AACJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,WAAW,CAAC;EACrBC,WAAWA,CAACC,MAAM,EAAE;IAChBC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,gBAAgB,EAAE;MAC1CC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,YAAY,EAAE;MACtCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,iBAAiB,EAAE;MAC3CC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,OAAO,EAAE;MACjCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACF,IAAI,CAACC,cAAc,GAAGP,MAAM,CAACO,cAAc,IAAIC,QAAQ;IACvD,IAAI,CAACC,UAAU,GAAGT,MAAM,CAACS,UAAU,IAAI,CAAC;IACxC,IAAI,CAACC,eAAe,GAChBV,MAAM,CAACU,eAAe,IAAIvB,2BAA2B;IACzD,MAAMwB,MAAM,GAAG,SAAS,IAAI1B,SAAS,GAAGA,SAAS,CAAC2B,OAAO,GAAG3B,SAAS;IACrE,IAAI,CAAC4B,KAAK,GAAG,IAAIF,MAAM,CAAC;MAAEG,WAAW,EAAE,IAAI,CAACP;IAAe,CAAC,CAAC;EACjE;EACA;EACAQ,IAAIA,CAACC,QAAQ,EAAE,GAAGC,IAAI,EAAE;IACpB,OAAO,IAAI,CAACJ,KAAK,CAACK,GAAG,CAAC,MAAMlC,MAAM,CAAC,MAAMgC,QAAQ,CAAC,GAAGC,IAAI,CAAC,CAACE,KAAK,CAAE/B,KAAK,IAAK;MACxE;MACA,IAAIA,KAAK,YAAYS,KAAK,EAAE;QACxB,MAAMT,KAAK;MACf,CAAC,MACI;QACD,MAAM,IAAIS,KAAK,CAACT,KAAK,CAAC;MAC1B;IACJ,CAAC,CAAC,EAAE;MACAsB,eAAe,EAAE,IAAI,CAACA,eAAe;MACrCU,OAAO,EAAE,IAAI,CAACX,UAAU;MACxBY,SAAS,EAAE;MACX;MACA;IACJ,CAAC,CAAC,EAAE;MAAEC,cAAc,EAAE;IAAK,CAAC,CAAC;EACjC;EACA;EACAC,eAAeA,CAACC,OAAO,EAAER,QAAQ,EAAE,GAAGC,IAAI,EAAE;IACxC;IACA;IACA,IAAIO,OAAO,CAACC,MAAM,EAAE;MAChB,OAAOC,OAAO,CAACC,IAAI,CAAC,CAChB,IAAI,CAACZ,IAAI,CAACC,QAAQ,EAAE,GAAGC,IAAI,CAAC,EAC5B,IAAIS,OAAO,CAAC,CAACE,CAAC,EAAEC,MAAM,KAAK;QACvBL,OAAO,CAACC,MAAM,EAAEK,gBAAgB,CAAC,OAAO,EAAE,MAAM;UAC5CD,MAAM,CAAC,IAAIhC,KAAK,CAAC,YAAY,CAAC,CAAC;QACnC,CAAC,CAAC;MACN,CAAC,CAAC,CACL,CAAC;IACN;IACA,OAAO,IAAI,CAACkB,IAAI,CAACC,QAAQ,EAAE,GAAGC,IAAI,CAAC;EACvC;EACAc,KAAKA,CAAC,GAAGd,IAAI,EAAE;IACX,OAAO,IAAI,CAACF,IAAI,CAAC,MAAMgB,KAAK,CAAC,GAAGd,IAAI,CAAC,CAACe,IAAI,CAAEC,GAAG,IAAMA,GAAG,CAACC,EAAE,GAAGD,GAAG,GAAGP,OAAO,CAACG,MAAM,CAACI,GAAG,CAAE,CAAC,CAAC;EAC9F;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}