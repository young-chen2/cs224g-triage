{"ast":null,"code":"import { ImagePromptValue } from \"../prompt_values.js\";\nimport { BasePromptTemplate } from \"./base.js\";\nimport { checkValidTemplate, renderTemplate } from \"./template.js\";\n/**\n * An image prompt template for a multimodal model.\n */\nexport class ImagePromptTemplate extends BasePromptTemplate {\n  static lc_name() {\n    return \"ImagePromptTemplate\";\n  }\n  constructor(input) {\n    super(input);\n    Object.defineProperty(this, \"lc_namespace\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [\"langchain_core\", \"prompts\", \"image\"]\n    });\n    Object.defineProperty(this, \"template\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"templateFormat\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"f-string\"\n    });\n    Object.defineProperty(this, \"validateTemplate\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    /**\n     * Additional fields which should be included inside\n     * the message content array if using a complex message\n     * content.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Object.defineProperty(this, \"additionalContentFields\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.template = input.template;\n    this.templateFormat = input.templateFormat ?? this.templateFormat;\n    this.validateTemplate = input.validateTemplate ?? this.validateTemplate;\n    this.additionalContentFields = input.additionalContentFields;\n    if (this.validateTemplate) {\n      let totalInputVariables = this.inputVariables;\n      if (this.partialVariables) {\n        totalInputVariables = totalInputVariables.concat(Object.keys(this.partialVariables));\n      }\n      checkValidTemplate([{\n        type: \"image_url\",\n        image_url: this.template\n      }], this.templateFormat, totalInputVariables);\n    }\n  }\n  _getPromptType() {\n    return \"prompt\";\n  }\n  /**\n   * Partially applies values to the prompt template.\n   * @param values The values to be partially applied to the prompt template.\n   * @returns A new instance of ImagePromptTemplate with the partially applied values.\n   */\n  async partial(values) {\n    const newInputVariables = this.inputVariables.filter(iv => !(iv in values));\n    const newPartialVariables = {\n      ...(this.partialVariables ?? {}),\n      ...values\n    };\n    const promptDict = {\n      ...this,\n      inputVariables: newInputVariables,\n      partialVariables: newPartialVariables\n    };\n    return new ImagePromptTemplate(promptDict);\n  }\n  /**\n   * Formats the prompt template with the provided values.\n   * @param values The values to be used to format the prompt template.\n   * @returns A promise that resolves to a string which is the formatted prompt.\n   */\n  async format(values) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const formatted = {};\n    for (const [key, value] of Object.entries(this.template)) {\n      if (typeof value === \"string\") {\n        formatted[key] = renderTemplate(value, this.templateFormat, values);\n      } else {\n        formatted[key] = value;\n      }\n    }\n    const url = values.url || formatted.url;\n    const detail = values.detail || formatted.detail;\n    if (!url) {\n      throw new Error(\"Must provide either an image URL.\");\n    }\n    if (typeof url !== \"string\") {\n      throw new Error(\"url must be a string.\");\n    }\n    const output = {\n      url\n    };\n    if (detail) {\n      output.detail = detail;\n    }\n    return output;\n  }\n  /**\n   * Formats the prompt given the input values and returns a formatted\n   * prompt value.\n   * @param values The input values to format the prompt.\n   * @returns A Promise that resolves to a formatted prompt value.\n   */\n  async formatPromptValue(values) {\n    const formattedPrompt = await this.format(values);\n    return new ImagePromptValue(formattedPrompt);\n  }\n}","map":{"version":3,"names":["ImagePromptValue","BasePromptTemplate","checkValidTemplate","renderTemplate","ImagePromptTemplate","lc_name","constructor","input","Object","defineProperty","enumerable","configurable","writable","value","template","templateFormat","validateTemplate","additionalContentFields","totalInputVariables","inputVariables","partialVariables","concat","keys","type","image_url","_getPromptType","partial","values","newInputVariables","filter","iv","newPartialVariables","promptDict","format","formatted","key","entries","url","detail","Error","output","formatPromptValue","formattedPrompt"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/@langchain/core/dist/prompts/image.js"],"sourcesContent":["import { ImagePromptValue } from \"../prompt_values.js\";\nimport { BasePromptTemplate, } from \"./base.js\";\nimport { checkValidTemplate, renderTemplate, } from \"./template.js\";\n/**\n * An image prompt template for a multimodal model.\n */\nexport class ImagePromptTemplate extends BasePromptTemplate {\n    static lc_name() {\n        return \"ImagePromptTemplate\";\n    }\n    constructor(input) {\n        super(input);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"prompts\", \"image\"]\n        });\n        Object.defineProperty(this, \"template\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"templateFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"f-string\"\n        });\n        Object.defineProperty(this, \"validateTemplate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        /**\n         * Additional fields which should be included inside\n         * the message content array if using a complex message\n         * content.\n         */\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"additionalContentFields\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.template = input.template;\n        this.templateFormat = input.templateFormat ?? this.templateFormat;\n        this.validateTemplate = input.validateTemplate ?? this.validateTemplate;\n        this.additionalContentFields = input.additionalContentFields;\n        if (this.validateTemplate) {\n            let totalInputVariables = this.inputVariables;\n            if (this.partialVariables) {\n                totalInputVariables = totalInputVariables.concat(Object.keys(this.partialVariables));\n            }\n            checkValidTemplate([\n                { type: \"image_url\", image_url: this.template },\n            ], this.templateFormat, totalInputVariables);\n        }\n    }\n    _getPromptType() {\n        return \"prompt\";\n    }\n    /**\n     * Partially applies values to the prompt template.\n     * @param values The values to be partially applied to the prompt template.\n     * @returns A new instance of ImagePromptTemplate with the partially applied values.\n     */\n    async partial(values) {\n        const newInputVariables = this.inputVariables.filter((iv) => !(iv in values));\n        const newPartialVariables = {\n            ...(this.partialVariables ?? {}),\n            ...values,\n        };\n        const promptDict = {\n            ...this,\n            inputVariables: newInputVariables,\n            partialVariables: newPartialVariables,\n        };\n        return new ImagePromptTemplate(promptDict);\n    }\n    /**\n     * Formats the prompt template with the provided values.\n     * @param values The values to be used to format the prompt template.\n     * @returns A promise that resolves to a string which is the formatted prompt.\n     */\n    async format(values) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const formatted = {};\n        for (const [key, value] of Object.entries(this.template)) {\n            if (typeof value === \"string\") {\n                formatted[key] = renderTemplate(value, this.templateFormat, values);\n            }\n            else {\n                formatted[key] = value;\n            }\n        }\n        const url = values.url || formatted.url;\n        const detail = values.detail || formatted.detail;\n        if (!url) {\n            throw new Error(\"Must provide either an image URL.\");\n        }\n        if (typeof url !== \"string\") {\n            throw new Error(\"url must be a string.\");\n        }\n        const output = { url };\n        if (detail) {\n            output.detail = detail;\n        }\n        return output;\n    }\n    /**\n     * Formats the prompt given the input values and returns a formatted\n     * prompt value.\n     * @param values The input values to format the prompt.\n     * @returns A Promise that resolves to a formatted prompt value.\n     */\n    async formatPromptValue(values) {\n        const formattedPrompt = await this.format(values);\n        return new ImagePromptValue(formattedPrompt);\n    }\n}\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,qBAAqB;AACtD,SAASC,kBAAkB,QAAS,WAAW;AAC/C,SAASC,kBAAkB,EAAEC,cAAc,QAAS,eAAe;AACnE;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,SAASH,kBAAkB,CAAC;EACxD,OAAOI,OAAOA,CAAA,EAAG;IACb,OAAO,qBAAqB;EAChC;EACAC,WAAWA,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IACZC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,cAAc,EAAE;MACxCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,CAAC,gBAAgB,EAAE,SAAS,EAAE,OAAO;IAChD,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,UAAU,EAAE;MACpCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,gBAAgB,EAAE;MAC1CC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE;IACX,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,kBAAkB,EAAE;MAC5CC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE;IACX,CAAC,CAAC;IACF;AACR;AACA;AACA;AACA;IACQ;IACAL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,yBAAyB,EAAE;MACnDC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACF,IAAI,CAACC,QAAQ,GAAGP,KAAK,CAACO,QAAQ;IAC9B,IAAI,CAACC,cAAc,GAAGR,KAAK,CAACQ,cAAc,IAAI,IAAI,CAACA,cAAc;IACjE,IAAI,CAACC,gBAAgB,GAAGT,KAAK,CAACS,gBAAgB,IAAI,IAAI,CAACA,gBAAgB;IACvE,IAAI,CAACC,uBAAuB,GAAGV,KAAK,CAACU,uBAAuB;IAC5D,IAAI,IAAI,CAACD,gBAAgB,EAAE;MACvB,IAAIE,mBAAmB,GAAG,IAAI,CAACC,cAAc;MAC7C,IAAI,IAAI,CAACC,gBAAgB,EAAE;QACvBF,mBAAmB,GAAGA,mBAAmB,CAACG,MAAM,CAACb,MAAM,CAACc,IAAI,CAAC,IAAI,CAACF,gBAAgB,CAAC,CAAC;MACxF;MACAlB,kBAAkB,CAAC,CACf;QAAEqB,IAAI,EAAE,WAAW;QAAEC,SAAS,EAAE,IAAI,CAACV;MAAS,CAAC,CAClD,EAAE,IAAI,CAACC,cAAc,EAAEG,mBAAmB,CAAC;IAChD;EACJ;EACAO,cAAcA,CAAA,EAAG;IACb,OAAO,QAAQ;EACnB;EACA;AACJ;AACA;AACA;AACA;EACI,MAAMC,OAAOA,CAACC,MAAM,EAAE;IAClB,MAAMC,iBAAiB,GAAG,IAAI,CAACT,cAAc,CAACU,MAAM,CAAEC,EAAE,IAAK,EAAEA,EAAE,IAAIH,MAAM,CAAC,CAAC;IAC7E,MAAMI,mBAAmB,GAAG;MACxB,IAAI,IAAI,CAACX,gBAAgB,IAAI,CAAC,CAAC,CAAC;MAChC,GAAGO;IACP,CAAC;IACD,MAAMK,UAAU,GAAG;MACf,GAAG,IAAI;MACPb,cAAc,EAAES,iBAAiB;MACjCR,gBAAgB,EAAEW;IACtB,CAAC;IACD,OAAO,IAAI3B,mBAAmB,CAAC4B,UAAU,CAAC;EAC9C;EACA;AACJ;AACA;AACA;AACA;EACI,MAAMC,MAAMA,CAACN,MAAM,EAAE;IACjB;IACA,MAAMO,SAAS,GAAG,CAAC,CAAC;IACpB,KAAK,MAAM,CAACC,GAAG,EAAEtB,KAAK,CAAC,IAAIL,MAAM,CAAC4B,OAAO,CAAC,IAAI,CAACtB,QAAQ,CAAC,EAAE;MACtD,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;QAC3BqB,SAAS,CAACC,GAAG,CAAC,GAAGhC,cAAc,CAACU,KAAK,EAAE,IAAI,CAACE,cAAc,EAAEY,MAAM,CAAC;MACvE,CAAC,MACI;QACDO,SAAS,CAACC,GAAG,CAAC,GAAGtB,KAAK;MAC1B;IACJ;IACA,MAAMwB,GAAG,GAAGV,MAAM,CAACU,GAAG,IAAIH,SAAS,CAACG,GAAG;IACvC,MAAMC,MAAM,GAAGX,MAAM,CAACW,MAAM,IAAIJ,SAAS,CAACI,MAAM;IAChD,IAAI,CAACD,GAAG,EAAE;MACN,MAAM,IAAIE,KAAK,CAAC,mCAAmC,CAAC;IACxD;IACA,IAAI,OAAOF,GAAG,KAAK,QAAQ,EAAE;MACzB,MAAM,IAAIE,KAAK,CAAC,uBAAuB,CAAC;IAC5C;IACA,MAAMC,MAAM,GAAG;MAAEH;IAAI,CAAC;IACtB,IAAIC,MAAM,EAAE;MACRE,MAAM,CAACF,MAAM,GAAGA,MAAM;IAC1B;IACA,OAAOE,MAAM;EACjB;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,MAAMC,iBAAiBA,CAACd,MAAM,EAAE;IAC5B,MAAMe,eAAe,GAAG,MAAM,IAAI,CAACT,MAAM,CAACN,MAAM,CAAC;IACjD,OAAO,IAAI3B,gBAAgB,CAAC0C,eAAe,CAAC;EAChD;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}