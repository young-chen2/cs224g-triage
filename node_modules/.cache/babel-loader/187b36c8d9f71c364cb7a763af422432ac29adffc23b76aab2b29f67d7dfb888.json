{"ast":null,"code":"import { BaseMessage, BaseMessageChunk, mergeContent, _mergeDicts, _mergeObj, _mergeStatus } from \"./base.js\";\nexport function isDirectToolOutput(x) {\n  return x != null && typeof x === \"object\" && \"lc_direct_tool_output\" in x && x.lc_direct_tool_output === true;\n}\n/**\n * Represents a tool message in a conversation.\n */\nexport class ToolMessage extends BaseMessage {\n  static lc_name() {\n    return \"ToolMessage\";\n  }\n  get lc_aliases() {\n    // exclude snake case conversion to pascal case\n    return {\n      tool_call_id: \"tool_call_id\"\n    };\n  }\n  constructor(fields, tool_call_id, name) {\n    if (typeof fields === \"string\") {\n      // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n      fields = {\n        content: fields,\n        name,\n        tool_call_id: tool_call_id\n      };\n    }\n    super(fields);\n    Object.defineProperty(this, \"lc_direct_tool_output\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    /**\n     * Status of the tool invocation.\n     * @version 0.2.19\n     */\n    Object.defineProperty(this, \"status\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"tool_call_id\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /**\n     * Artifact of the Tool execution which is not meant to be sent to the model.\n     *\n     * Should only be specified if it is different from the message content, e.g. if only\n     * a subset of the full tool output is being passed as message content but the full\n     * output is needed in other parts of the code.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Object.defineProperty(this, \"artifact\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.tool_call_id = fields.tool_call_id;\n    this.artifact = fields.artifact;\n    this.status = fields.status;\n  }\n  _getType() {\n    return \"tool\";\n  }\n  static isInstance(message) {\n    return message._getType() === \"tool\";\n  }\n  get _printableFields() {\n    return {\n      ...super._printableFields,\n      tool_call_id: this.tool_call_id,\n      artifact: this.artifact\n    };\n  }\n}\n/**\n * Represents a chunk of a tool message, which can be concatenated\n * with other tool message chunks.\n */\nexport class ToolMessageChunk extends BaseMessageChunk {\n  constructor(fields) {\n    super(fields);\n    Object.defineProperty(this, \"tool_call_id\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /**\n     * Status of the tool invocation.\n     * @version 0.2.19\n     */\n    Object.defineProperty(this, \"status\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /**\n     * Artifact of the Tool execution which is not meant to be sent to the model.\n     *\n     * Should only be specified if it is different from the message content, e.g. if only\n     * a subset of the full tool output is being passed as message content but the full\n     * output is needed in other parts of the code.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Object.defineProperty(this, \"artifact\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.tool_call_id = fields.tool_call_id;\n    this.artifact = fields.artifact;\n    this.status = fields.status;\n  }\n  static lc_name() {\n    return \"ToolMessageChunk\";\n  }\n  _getType() {\n    return \"tool\";\n  }\n  concat(chunk) {\n    return new ToolMessageChunk({\n      content: mergeContent(this.content, chunk.content),\n      additional_kwargs: _mergeDicts(this.additional_kwargs, chunk.additional_kwargs),\n      response_metadata: _mergeDicts(this.response_metadata, chunk.response_metadata),\n      artifact: _mergeObj(this.artifact, chunk.artifact),\n      tool_call_id: this.tool_call_id,\n      id: this.id ?? chunk.id,\n      status: _mergeStatus(this.status, chunk.status)\n    });\n  }\n  get _printableFields() {\n    return {\n      ...super._printableFields,\n      tool_call_id: this.tool_call_id,\n      artifact: this.artifact\n    };\n  }\n}\nexport function defaultToolCallParser(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nrawToolCalls) {\n  const toolCalls = [];\n  const invalidToolCalls = [];\n  for (const toolCall of rawToolCalls) {\n    if (!toolCall.function) {\n      continue;\n    } else {\n      const functionName = toolCall.function.name;\n      try {\n        const functionArgs = JSON.parse(toolCall.function.arguments);\n        const parsed = {\n          name: functionName || \"\",\n          args: functionArgs || {},\n          id: toolCall.id\n        };\n        toolCalls.push(parsed);\n      } catch (error) {\n        invalidToolCalls.push({\n          name: functionName,\n          args: toolCall.function.arguments,\n          id: toolCall.id,\n          error: \"Malformed args.\"\n        });\n      }\n    }\n  }\n  return [toolCalls, invalidToolCalls];\n}\nexport function isToolMessage(x) {\n  return x._getType() === \"tool\";\n}\nexport function isToolMessageChunk(x) {\n  return x._getType() === \"tool\";\n}","map":{"version":3,"names":["BaseMessage","BaseMessageChunk","mergeContent","_mergeDicts","_mergeObj","_mergeStatus","isDirectToolOutput","x","lc_direct_tool_output","ToolMessage","lc_name","lc_aliases","tool_call_id","constructor","fields","name","content","Object","defineProperty","enumerable","configurable","writable","value","artifact","status","_getType","isInstance","message","_printableFields","ToolMessageChunk","concat","chunk","additional_kwargs","response_metadata","id","defaultToolCallParser","rawToolCalls","toolCalls","invalidToolCalls","toolCall","function","functionName","functionArgs","JSON","parse","arguments","parsed","args","push","error","isToolMessage","isToolMessageChunk"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/@langchain/core/dist/messages/tool.js"],"sourcesContent":["import { BaseMessage, BaseMessageChunk, mergeContent, _mergeDicts, _mergeObj, _mergeStatus, } from \"./base.js\";\nexport function isDirectToolOutput(x) {\n    return (x != null &&\n        typeof x === \"object\" &&\n        \"lc_direct_tool_output\" in x &&\n        x.lc_direct_tool_output === true);\n}\n/**\n * Represents a tool message in a conversation.\n */\nexport class ToolMessage extends BaseMessage {\n    static lc_name() {\n        return \"ToolMessage\";\n    }\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return { tool_call_id: \"tool_call_id\" };\n    }\n    constructor(fields, tool_call_id, name) {\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = { content: fields, name, tool_call_id: tool_call_id };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_direct_tool_output\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        /**\n         * Status of the tool invocation.\n         * @version 0.2.19\n         */\n        Object.defineProperty(this, \"status\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tool_call_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * Artifact of the Tool execution which is not meant to be sent to the model.\n         *\n         * Should only be specified if it is different from the message content, e.g. if only\n         * a subset of the full tool output is being passed as message content but the full\n         * output is needed in other parts of the code.\n         */\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"artifact\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.tool_call_id = fields.tool_call_id;\n        this.artifact = fields.artifact;\n        this.status = fields.status;\n    }\n    _getType() {\n        return \"tool\";\n    }\n    static isInstance(message) {\n        return message._getType() === \"tool\";\n    }\n    get _printableFields() {\n        return {\n            ...super._printableFields,\n            tool_call_id: this.tool_call_id,\n            artifact: this.artifact,\n        };\n    }\n}\n/**\n * Represents a chunk of a tool message, which can be concatenated\n * with other tool message chunks.\n */\nexport class ToolMessageChunk extends BaseMessageChunk {\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"tool_call_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * Status of the tool invocation.\n         * @version 0.2.19\n         */\n        Object.defineProperty(this, \"status\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * Artifact of the Tool execution which is not meant to be sent to the model.\n         *\n         * Should only be specified if it is different from the message content, e.g. if only\n         * a subset of the full tool output is being passed as message content but the full\n         * output is needed in other parts of the code.\n         */\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"artifact\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.tool_call_id = fields.tool_call_id;\n        this.artifact = fields.artifact;\n        this.status = fields.status;\n    }\n    static lc_name() {\n        return \"ToolMessageChunk\";\n    }\n    _getType() {\n        return \"tool\";\n    }\n    concat(chunk) {\n        return new ToolMessageChunk({\n            content: mergeContent(this.content, chunk.content),\n            additional_kwargs: _mergeDicts(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: _mergeDicts(this.response_metadata, chunk.response_metadata),\n            artifact: _mergeObj(this.artifact, chunk.artifact),\n            tool_call_id: this.tool_call_id,\n            id: this.id ?? chunk.id,\n            status: _mergeStatus(this.status, chunk.status),\n        });\n    }\n    get _printableFields() {\n        return {\n            ...super._printableFields,\n            tool_call_id: this.tool_call_id,\n            artifact: this.artifact,\n        };\n    }\n}\nexport function defaultToolCallParser(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nrawToolCalls) {\n    const toolCalls = [];\n    const invalidToolCalls = [];\n    for (const toolCall of rawToolCalls) {\n        if (!toolCall.function) {\n            continue;\n        }\n        else {\n            const functionName = toolCall.function.name;\n            try {\n                const functionArgs = JSON.parse(toolCall.function.arguments);\n                const parsed = {\n                    name: functionName || \"\",\n                    args: functionArgs || {},\n                    id: toolCall.id,\n                };\n                toolCalls.push(parsed);\n            }\n            catch (error) {\n                invalidToolCalls.push({\n                    name: functionName,\n                    args: toolCall.function.arguments,\n                    id: toolCall.id,\n                    error: \"Malformed args.\",\n                });\n            }\n        }\n    }\n    return [toolCalls, invalidToolCalls];\n}\nexport function isToolMessage(x) {\n    return x._getType() === \"tool\";\n}\nexport function isToolMessageChunk(x) {\n    return x._getType() === \"tool\";\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}