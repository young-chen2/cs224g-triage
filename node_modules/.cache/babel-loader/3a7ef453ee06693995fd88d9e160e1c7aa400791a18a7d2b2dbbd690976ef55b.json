{"ast":null,"code":"import { zodToJsonSchema } from \"zod-to-json-schema\";\nimport { PromptTemplate } from \"@langchain/core/prompts\";\nimport { JsonOutputFunctionsParser } from \"../../output_parsers/openai_functions.js\";\nimport { LLMChain } from \"../llm_chain.js\";\n/**\n * Function that returns an array of tagging functions. These functions\n * are used to extract relevant information from a passage.\n * @param schema The schema defining the structure of function parameters.\n * @returns An array of tagging functions.\n */\nfunction getTaggingFunctions(schema) {\n  return [{\n    name: \"information_extraction\",\n    description: \"Extracts the relevant information from the passage.\",\n    parameters: schema\n  }];\n}\nconst TAGGING_TEMPLATE = `Extract the desired information from the following passage.\n\nPassage:\n{input}\n`;\n/**\n * Function that creates a tagging chain using the provided schema,\n * LLM, and options. It constructs the LLM with the necessary\n * functions, prompt, output parser, and tags.\n * @param schema The schema defining the structure of function parameters.\n * @param llm LLM to use in the chain. Must support function calling.\n * @param options Options for creating the tagging chain.\n * @returns A new instance of LLMChain configured for tagging.\n *\n * @deprecated\n * Switch to expression language: https://js.langchain.com/docs/expression_language/\n * Will be removed in 0.2.0\n */\nexport function createTaggingChain(schema, llm, options = {}) {\n  const {\n    prompt = PromptTemplate.fromTemplate(TAGGING_TEMPLATE),\n    ...rest\n  } = options;\n  const functions = getTaggingFunctions(schema);\n  const outputParser = new JsonOutputFunctionsParser();\n  return new LLMChain({\n    llm,\n    prompt,\n    llmKwargs: {\n      functions\n    },\n    outputParser,\n    tags: [\"openai_functions\", \"tagging\"],\n    ...rest\n  });\n}\n/**\n * Function that creates a tagging chain from a Zod schema. It converts\n * the Zod schema to a JSON schema using the zodToJsonSchema function and\n * then calls createTaggingChain with the converted schema.\n * @param schema The Zod schema which extracted data should match.\n * @param llm LLM to use in the chain. Must support function calling.\n * @param options Options for creating the tagging chain.\n * @returns A new instance of LLMChain configured for tagging.\n *\n * @deprecated\n * Switch to expression language: https://js.langchain.com/docs/expression_language/\n * Will be removed in 0.2.0\n */\nexport function createTaggingChainFromZod(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nschema, llm, options) {\n  return createTaggingChain(zodToJsonSchema(schema), llm, options);\n}","map":{"version":3,"names":["zodToJsonSchema","PromptTemplate","JsonOutputFunctionsParser","LLMChain","getTaggingFunctions","schema","name","description","parameters","TAGGING_TEMPLATE","createTaggingChain","llm","options","prompt","fromTemplate","rest","functions","outputParser","llmKwargs","tags","createTaggingChainFromZod"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/langchain/dist/chains/openai_functions/tagging.js"],"sourcesContent":["import { zodToJsonSchema } from \"zod-to-json-schema\";\nimport { PromptTemplate } from \"@langchain/core/prompts\";\nimport { JsonOutputFunctionsParser, } from \"../../output_parsers/openai_functions.js\";\nimport { LLMChain } from \"../llm_chain.js\";\n/**\n * Function that returns an array of tagging functions. These functions\n * are used to extract relevant information from a passage.\n * @param schema The schema defining the structure of function parameters.\n * @returns An array of tagging functions.\n */\nfunction getTaggingFunctions(schema) {\n    return [\n        {\n            name: \"information_extraction\",\n            description: \"Extracts the relevant information from the passage.\",\n            parameters: schema,\n        },\n    ];\n}\nconst TAGGING_TEMPLATE = `Extract the desired information from the following passage.\n\nPassage:\n{input}\n`;\n/**\n * Function that creates a tagging chain using the provided schema,\n * LLM, and options. It constructs the LLM with the necessary\n * functions, prompt, output parser, and tags.\n * @param schema The schema defining the structure of function parameters.\n * @param llm LLM to use in the chain. Must support function calling.\n * @param options Options for creating the tagging chain.\n * @returns A new instance of LLMChain configured for tagging.\n *\n * @deprecated\n * Switch to expression language: https://js.langchain.com/docs/expression_language/\n * Will be removed in 0.2.0\n */\nexport function createTaggingChain(schema, llm, options = {}) {\n    const { prompt = PromptTemplate.fromTemplate(TAGGING_TEMPLATE), ...rest } = options;\n    const functions = getTaggingFunctions(schema);\n    const outputParser = new JsonOutputFunctionsParser();\n    return new LLMChain({\n        llm,\n        prompt,\n        llmKwargs: { functions },\n        outputParser,\n        tags: [\"openai_functions\", \"tagging\"],\n        ...rest,\n    });\n}\n/**\n * Function that creates a tagging chain from a Zod schema. It converts\n * the Zod schema to a JSON schema using the zodToJsonSchema function and\n * then calls createTaggingChain with the converted schema.\n * @param schema The Zod schema which extracted data should match.\n * @param llm LLM to use in the chain. Must support function calling.\n * @param options Options for creating the tagging chain.\n * @returns A new instance of LLMChain configured for tagging.\n *\n * @deprecated\n * Switch to expression language: https://js.langchain.com/docs/expression_language/\n * Will be removed in 0.2.0\n */\nexport function createTaggingChainFromZod(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nschema, llm, options) {\n    return createTaggingChain(zodToJsonSchema(schema), llm, options);\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,oBAAoB;AACpD,SAASC,cAAc,QAAQ,yBAAyB;AACxD,SAASC,yBAAyB,QAAS,0CAA0C;AACrF,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,mBAAmBA,CAACC,MAAM,EAAE;EACjC,OAAO,CACH;IACIC,IAAI,EAAE,wBAAwB;IAC9BC,WAAW,EAAE,qDAAqD;IAClEC,UAAU,EAAEH;EAChB,CAAC,CACJ;AACL;AACA,MAAMI,gBAAgB,GAAG;AACzB;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAACL,MAAM,EAAEM,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC1D,MAAM;IAAEC,MAAM,GAAGZ,cAAc,CAACa,YAAY,CAACL,gBAAgB,CAAC;IAAE,GAAGM;EAAK,CAAC,GAAGH,OAAO;EACnF,MAAMI,SAAS,GAAGZ,mBAAmB,CAACC,MAAM,CAAC;EAC7C,MAAMY,YAAY,GAAG,IAAIf,yBAAyB,CAAC,CAAC;EACpD,OAAO,IAAIC,QAAQ,CAAC;IAChBQ,GAAG;IACHE,MAAM;IACNK,SAAS,EAAE;MAAEF;IAAU,CAAC;IACxBC,YAAY;IACZE,IAAI,EAAE,CAAC,kBAAkB,EAAE,SAAS,CAAC;IACrC,GAAGJ;EACP,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,yBAAyBA;AACzC;AACAf,MAAM,EAAEM,GAAG,EAAEC,OAAO,EAAE;EAClB,OAAOF,kBAAkB,CAACV,eAAe,CAACK,MAAM,CAAC,EAAEM,GAAG,EAAEC,OAAO,CAAC;AACpE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}