{"ast":null,"code":"var _jsxFileName = \"/Users/youngchen/Downloads/cs224g-triage/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport OpenAI from \"openai\";\nimport { FaissStore } from \"langchain/vectorstores/faiss\";\nimport { OpenAIEmbeddings } from \"langchain/embeddings/openai\";\nimport { RetrievalQAChain } from \"langchain/chains\";\nimport { SYSTEM_PROMPT, INITIAL_MESSAGE } from \"./prompts\";\n\n// // Initialize LangChain components (currently not used)\n// const embeddings = new OpenAIEmbeddings({\n//   openAIApiKey: process.env.REACT_APP_OPENAI_API_KEY,\n// });\n\n// // medical guidelines (replace with your actual data later)\n// const MOCK_GUIDELINES = [\n//   \"Fever, cough, and shortness of breath may indicate a respiratory infection.\",\n//   \"Chest pain and shortness of breath could be signs of a heart condition.\",\n//   \"Headache and dizziness may suggest dehydration or migraines.\",\n//   \"Abdominal pain and nausea could indicate gastrointestinal issues.\",\n// ];\n\n// // in-memory vector store with mock guidelines\n// let vectorStore;\n// (async () => {\n//   vectorStore = await FaissStore.fromTexts(\n//     MOCK_GUIDELINES, // Documents to store\n//     MOCK_GUIDELINES.map((_, i) => ({ id: i })), // Metadata for each document\n//     embeddings // Embedding model\n//   );\n// })();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true\n});\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([{\n    role: \"assistant\",\n    content: INITIAL_MESSAGE\n  }]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const [recognition, setRecognition] = useState(null);\n  const speak = text => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    window.speechSynthesis.speak(utterance);\n  };\n  const handleSendMessage = async (message = inputMessage) => {\n    if (message.trim() === \"\") return;\n    setMessages(prevMessages => [...prevMessages, {\n      role: \"user\",\n      content: message\n    }]);\n    setInputMessage(\"\");\n    try {\n      // // Langchain code; not used yet\n      // // Step 1: Retrieve relevant guidelines using LangChain\n      // const relevantDocs = await vectorStore.similaritySearch(message, 3); // Retrieve top 3 relevant guidelines\n      // const relevantTexts = relevantDocs\n      //   .map((doc) => doc.pageContent)\n      //   .join(\"\\n\");\n\n      // // Step 2: Generate a response using LangChain's RetrievalQAChain\n      // const chain = RetrievalQAChain.fromLLM(client, vectorStore.asRetriever());\n      // const response = await chain.call({\n      //   query: `Based on these symptoms: ${message}, and the following guidelines: ${relevantTexts}, predict the condition and recommend care.`,\n      // });\n\n      const response = await client.chat.completions.create({\n        model: \"gpt-4o-mini\",\n        messages: [{\n          role: \"system\",\n          content: SYSTEM_PROMPT\n        }, ...messages, {\n          role: \"user\",\n          content: message\n        }]\n      });\n      const assistantMessage = response.choices[0].message.content;\n      setMessages(prevMessages => [...prevMessages, {\n        role: \"assistant\",\n        content: assistantMessage\n      }]);\n      speak(assistantMessage);\n    } catch (error) {\n      console.error(\"Error calling OpenAI API:\", error);\n      const errorMessage = \"I'm sorry, I encountered an error. Please try again.\";\n      setMessages(prevMessages => [...prevMessages, {\n        role: \"assistant\",\n        content: errorMessage\n      }]);\n      speak(errorMessage);\n    }\n  };\n  useEffect(() => {\n    if (\"webkitSpeechRecognition\" in window) {\n      const recognitionInstance = new window.webkitSpeechRecognition();\n      recognitionInstance.continuous = false;\n      recognitionInstance.interimResults = false;\n      recognitionInstance.onresult = event => {\n        const transcript = event.results[0][0].transcript;\n        setInputMessage(transcript);\n        setIsListening(false);\n        // ensure state is updated before sending\n        setTimeout(() => handleSendMessage(transcript), 100);\n      };\n      recognitionInstance.onerror = event => {\n        console.error(\"Speech recognition error:\", event.error);\n        setIsListening(false);\n      };\n      recognitionInstance.onend = () => {\n        setIsListening(false);\n      };\n      setRecognition(recognitionInstance);\n    }\n  }, []);\n  const toggleListening = () => {\n    if (!recognition) {\n      console.error(\"Speech recognition not supported\");\n      return;\n    }\n    if (isListening) {\n      recognition.stop();\n    } else {\n      try {\n        recognition.start();\n        setIsListening(true);\n      } catch (error) {\n        console.error(\"Error starting recognition:\", error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `App ${isDarkMode ? \"dark-mode\" : \"light-mode\"}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Triage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"theme-toggle\",\n          onClick: () => setIsDarkMode(!isDarkMode),\n          children: isDarkMode ? \"☀️\" : \"🌙\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages-container\",\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.role}`,\n          children: message.content\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputMessage,\n          onChange: e => setInputMessage(e.target.value),\n          placeholder: \"Describe your symptoms...\",\n          onKeyPress: e => e.key === \"Enter\" && handleSendMessage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSendMessage(),\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleListening,\n          className: `mic-button ${isListening ? \"listening\" : \"\"}`,\n          children: isListening ? \"🎤 (Recording...)\" : \"🎤\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ZMEIWZr9FYEwOXHvU1+A7XVkhzI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","OpenAI","FaissStore","OpenAIEmbeddings","RetrievalQAChain","SYSTEM_PROMPT","INITIAL_MESSAGE","jsxDEV","_jsxDEV","client","apiKey","process","env","REACT_APP_OPENAI_API_KEY","dangerouslyAllowBrowser","App","_s","messages","setMessages","role","content","inputMessage","setInputMessage","isDarkMode","setIsDarkMode","isListening","setIsListening","recognition","setRecognition","speak","text","utterance","SpeechSynthesisUtterance","window","speechSynthesis","handleSendMessage","message","trim","prevMessages","response","chat","completions","create","model","assistantMessage","choices","error","console","errorMessage","recognitionInstance","webkitSpeechRecognition","continuous","interimResults","onresult","event","transcript","results","setTimeout","onerror","onend","toggleListening","stop","start","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","index","type","value","onChange","e","target","placeholder","onKeyPress","key","_c","$RefreshReg$"],"sources":["/Users/youngchen/Downloads/cs224g-triage/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport OpenAI from \"openai\";\nimport { FaissStore } from \"langchain/vectorstores/faiss\";\nimport { OpenAIEmbeddings } from \"langchain/embeddings/openai\";\nimport { RetrievalQAChain } from \"langchain/chains\";\nimport { SYSTEM_PROMPT, INITIAL_MESSAGE } from \"./prompts\";\n\n// // Initialize LangChain components (currently not used)\n// const embeddings = new OpenAIEmbeddings({\n//   openAIApiKey: process.env.REACT_APP_OPENAI_API_KEY,\n// });\n\n// // medical guidelines (replace with your actual data later)\n// const MOCK_GUIDELINES = [\n//   \"Fever, cough, and shortness of breath may indicate a respiratory infection.\",\n//   \"Chest pain and shortness of breath could be signs of a heart condition.\",\n//   \"Headache and dizziness may suggest dehydration or migraines.\",\n//   \"Abdominal pain and nausea could indicate gastrointestinal issues.\",\n// ];\n\n// // in-memory vector store with mock guidelines\n// let vectorStore;\n// (async () => {\n//   vectorStore = await FaissStore.fromTexts(\n//     MOCK_GUIDELINES, // Documents to store\n//     MOCK_GUIDELINES.map((_, i) => ({ id: i })), // Metadata for each document\n//     embeddings // Embedding model\n//   );\n// })();\n\nconst client = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true,\n});\n\nfunction App() {\n  const [messages, setMessages] = useState([\n    { role: \"assistant\", content: INITIAL_MESSAGE },\n  ]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const [recognition, setRecognition] = useState(null);\n\n  const speak = (text) => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    window.speechSynthesis.speak(utterance);\n  };\n\n  const handleSendMessage = async (message = inputMessage) => {\n    if (message.trim() === \"\") return;\n\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { role: \"user\", content: message },\n    ]);\n    setInputMessage(\"\");\n\n    try {\n      // // Langchain code; not used yet\n      // // Step 1: Retrieve relevant guidelines using LangChain\n      // const relevantDocs = await vectorStore.similaritySearch(message, 3); // Retrieve top 3 relevant guidelines\n      // const relevantTexts = relevantDocs\n      //   .map((doc) => doc.pageContent)\n      //   .join(\"\\n\");\n\n      // // Step 2: Generate a response using LangChain's RetrievalQAChain\n      // const chain = RetrievalQAChain.fromLLM(client, vectorStore.asRetriever());\n      // const response = await chain.call({\n      //   query: `Based on these symptoms: ${message}, and the following guidelines: ${relevantTexts}, predict the condition and recommend care.`,\n      // });\n\n      const response = await client.chat.completions.create({\n        model: \"gpt-4o-mini\",\n        messages: [\n          { role: \"system\", content: SYSTEM_PROMPT },\n          ...messages,\n          { role: \"user\", content: message },\n        ],\n      });\n\n      const assistantMessage = response.choices[0].message.content;\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { role: \"assistant\", content: assistantMessage },\n      ]);\n      speak(assistantMessage);\n    } catch (error) {\n      console.error(\"Error calling OpenAI API:\", error);\n      const errorMessage =\n        \"I'm sorry, I encountered an error. Please try again.\";\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        {\n          role: \"assistant\",\n          content: errorMessage,\n        },\n      ]);\n      speak(errorMessage);\n    }\n  };\n\n  useEffect(() => {\n    if (\"webkitSpeechRecognition\" in window) {\n      const recognitionInstance = new window.webkitSpeechRecognition();\n      recognitionInstance.continuous = false;\n      recognitionInstance.interimResults = false;\n\n      recognitionInstance.onresult = (event) => {\n        const transcript = event.results[0][0].transcript;\n        setInputMessage(transcript);\n        setIsListening(false);\n        // ensure state is updated before sending\n        setTimeout(() => handleSendMessage(transcript), 100);\n      };\n\n      recognitionInstance.onerror = (event) => {\n        console.error(\"Speech recognition error:\", event.error);\n        setIsListening(false);\n      };\n\n      recognitionInstance.onend = () => {\n        setIsListening(false);\n      };\n\n      setRecognition(recognitionInstance);\n    }\n  }, []);\n\n  const toggleListening = () => {\n    if (!recognition) {\n      console.error(\"Speech recognition not supported\");\n      return;\n    }\n\n    if (isListening) {\n      recognition.stop();\n    } else {\n      try {\n        recognition.start();\n        setIsListening(true);\n      } catch (error) {\n        console.error(\"Error starting recognition:\", error);\n      }\n    }\n  };\n\n  return (\n    <div className={`App ${isDarkMode ? \"dark-mode\" : \"light-mode\"}`}>\n      <div className=\"chat-container\">\n        <header className=\"chat-header\">\n          <h1>Triage</h1>\n          <button\n            className=\"theme-toggle\"\n            onClick={() => setIsDarkMode(!isDarkMode)}\n          >\n            {isDarkMode ? \"☀️\" : \"🌙\"}\n          </button>\n        </header>\n\n        <div className=\"messages-container\">\n          {messages.map((message, index) => (\n            <div key={index} className={`message ${message.role}`}>\n              {message.content}\n            </div>\n          ))}\n        </div>\n\n        <div className=\"input-container\">\n          <input\n            type=\"text\"\n            value={inputMessage}\n            onChange={(e) => setInputMessage(e.target.value)}\n            placeholder=\"Describe your symptoms...\"\n            onKeyPress={(e) => e.key === \"Enter\" && handleSendMessage()}\n          />\n          <button onClick={() => handleSendMessage()}>Send</button>\n          <button\n            onClick={toggleListening}\n            className={`mic-button ${isListening ? \"listening\" : \"\"}`}\n          >\n            {isListening ? \"🎤 (Recording...)\" : \"🎤\"}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}