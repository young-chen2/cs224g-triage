{"ast":null,"code":"import { AbstractChatCompletionRunner } from \"./AbstractChatCompletionRunner.mjs\";\nimport { isAssistantMessage } from \"./chatCompletionUtils.mjs\";\nexport class ChatCompletionRunner extends AbstractChatCompletionRunner {\n  /** @deprecated - please use `runTools` instead. */\n  static runFunctions(client, params, options) {\n    const runner = new ChatCompletionRunner();\n    const opts = {\n      ...options,\n      headers: {\n        ...options?.headers,\n        'X-Stainless-Helper-Method': 'runFunctions'\n      }\n    };\n    runner._run(() => runner._runFunctions(client, params, opts));\n    return runner;\n  }\n  static runTools(client, params, options) {\n    const runner = new ChatCompletionRunner();\n    const opts = {\n      ...options,\n      headers: {\n        ...options?.headers,\n        'X-Stainless-Helper-Method': 'runTools'\n      }\n    };\n    runner._run(() => runner._runTools(client, params, opts));\n    return runner;\n  }\n  _addMessage(message, emit = true) {\n    super._addMessage(message, emit);\n    if (isAssistantMessage(message) && message.content) {\n      this._emit('content', message.content);\n    }\n  }\n}","map":{"version":3,"names":["AbstractChatCompletionRunner","isAssistantMessage","ChatCompletionRunner","runFunctions","client","params","options","runner","opts","headers","_run","_runFunctions","runTools","_runTools","_addMessage","message","emit","content","_emit"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/openai/src/lib/ChatCompletionRunner.ts"],"sourcesContent":["import {\n  type ChatCompletionMessageParam,\n  type ChatCompletionCreateParamsNonStreaming,\n} from '../resources/chat/completions';\nimport { type RunnableFunctions, type BaseFunctionsArgs, RunnableTools } from './RunnableFunction';\nimport {\n  AbstractChatCompletionRunner,\n  AbstractChatCompletionRunnerEvents,\n  RunnerOptions,\n} from './AbstractChatCompletionRunner';\nimport { isAssistantMessage } from './chatCompletionUtils';\nimport OpenAI from '../index';\nimport { AutoParseableTool } from '../lib/parser';\n\nexport interface ChatCompletionRunnerEvents extends AbstractChatCompletionRunnerEvents {\n  content: (content: string) => void;\n}\n\nexport type ChatCompletionFunctionRunnerParams<FunctionsArgs extends BaseFunctionsArgs> = Omit<\n  ChatCompletionCreateParamsNonStreaming,\n  'functions'\n> & {\n  functions: RunnableFunctions<FunctionsArgs>;\n};\n\nexport type ChatCompletionToolRunnerParams<FunctionsArgs extends BaseFunctionsArgs> = Omit<\n  ChatCompletionCreateParamsNonStreaming,\n  'tools'\n> & {\n  tools: RunnableTools<FunctionsArgs> | AutoParseableTool<any, true>[];\n};\n\nexport class ChatCompletionRunner<ParsedT = null> extends AbstractChatCompletionRunner<\n  ChatCompletionRunnerEvents,\n  ParsedT\n> {\n  /** @deprecated - please use `runTools` instead. */\n  static runFunctions(\n    client: OpenAI,\n    params: ChatCompletionFunctionRunnerParams<any[]>,\n    options?: RunnerOptions,\n  ): ChatCompletionRunner<null> {\n    const runner = new ChatCompletionRunner();\n    const opts = {\n      ...options,\n      headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runFunctions' },\n    };\n    runner._run(() => runner._runFunctions(client, params, opts));\n    return runner;\n  }\n\n  static runTools<ParsedT>(\n    client: OpenAI,\n    params: ChatCompletionToolRunnerParams<any[]>,\n    options?: RunnerOptions,\n  ): ChatCompletionRunner<ParsedT> {\n    const runner = new ChatCompletionRunner<ParsedT>();\n    const opts = {\n      ...options,\n      headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runTools' },\n    };\n    runner._run(() => runner._runTools(client, params, opts));\n    return runner;\n  }\n\n  override _addMessage(\n    this: ChatCompletionRunner<ParsedT>,\n    message: ChatCompletionMessageParam,\n    emit: boolean = true,\n  ) {\n    super._addMessage(message, emit);\n    if (isAssistantMessage(message) && message.content) {\n      this._emit('content', message.content as string);\n    }\n  }\n}\n"],"mappings":"SAMEA,4BAA4B,QAG7B;SACQC,kBAAkB,QAAE;AAsB7B,OAAM,MAAOC,oBAAqC,SAAQF,4BAGzD;EACC;EACA,OAAOG,YAAYA,CACjBC,MAAc,EACdC,MAAiD,EACjDC,OAAuB;IAEvB,MAAMC,MAAM,GAAG,IAAIL,oBAAoB,EAAE;IACzC,MAAMM,IAAI,GAAG;MACX,GAAGF,OAAO;MACVG,OAAO,EAAE;QAAE,GAAGH,OAAO,EAAEG,OAAO;QAAE,2BAA2B,EAAE;MAAc;KAC5E;IACDF,MAAM,CAACG,IAAI,CAAC,MAAMH,MAAM,CAACI,aAAa,CAACP,MAAM,EAAEC,MAAM,EAAEG,IAAI,CAAC,CAAC;IAC7D,OAAOD,MAAM;EACf;EAEA,OAAOK,QAAQA,CACbR,MAAc,EACdC,MAA6C,EAC7CC,OAAuB;IAEvB,MAAMC,MAAM,GAAG,IAAIL,oBAAoB,EAAW;IAClD,MAAMM,IAAI,GAAG;MACX,GAAGF,OAAO;MACVG,OAAO,EAAE;QAAE,GAAGH,OAAO,EAAEG,OAAO;QAAE,2BAA2B,EAAE;MAAU;KACxE;IACDF,MAAM,CAACG,IAAI,CAAC,MAAMH,MAAM,CAACM,SAAS,CAACT,MAAM,EAAEC,MAAM,EAAEG,IAAI,CAAC,CAAC;IACzD,OAAOD,MAAM;EACf;EAESO,WAAWA,CAElBC,OAAmC,EACnCC,IAAA,GAAgB,IAAI;IAEpB,KAAK,CAACF,WAAW,CAACC,OAAO,EAAEC,IAAI,CAAC;IAChC,IAAIf,kBAAkB,CAACc,OAAO,CAAC,IAAIA,OAAO,CAACE,OAAO,EAAE;MAClD,IAAI,CAACC,KAAK,CAAC,SAAS,EAAEH,OAAO,CAACE,OAAiB,CAAC;;EAEpD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}