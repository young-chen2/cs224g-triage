{"ast":null,"code":"import { setResponseValueAndErrors } from \"../errorMessages.mjs\";\nexport function parseBigintDef(def, refs) {\n  const res = {\n    type: 'integer',\n    format: 'int64'\n  };\n  if (!def.checks) return res;\n  for (const check of def.checks) {\n    switch (check.kind) {\n      case 'min':\n        if (refs.target === 'jsonSchema7') {\n          if (check.inclusive) {\n            setResponseValueAndErrors(res, 'minimum', check.value, check.message, refs);\n          } else {\n            setResponseValueAndErrors(res, 'exclusiveMinimum', check.value, check.message, refs);\n          }\n        } else {\n          if (!check.inclusive) {\n            res.exclusiveMinimum = true;\n          }\n          setResponseValueAndErrors(res, 'minimum', check.value, check.message, refs);\n        }\n        break;\n      case 'max':\n        if (refs.target === 'jsonSchema7') {\n          if (check.inclusive) {\n            setResponseValueAndErrors(res, 'maximum', check.value, check.message, refs);\n          } else {\n            setResponseValueAndErrors(res, 'exclusiveMaximum', check.value, check.message, refs);\n          }\n        } else {\n          if (!check.inclusive) {\n            res.exclusiveMaximum = true;\n          }\n          setResponseValueAndErrors(res, 'maximum', check.value, check.message, refs);\n        }\n        break;\n      case 'multipleOf':\n        setResponseValueAndErrors(res, 'multipleOf', check.value, check.message, refs);\n        break;\n    }\n  }\n  return res;\n}","map":{"version":3,"names":["setResponseValueAndErrors","parseBigintDef","def","refs","res","type","format","checks","check","kind","target","inclusive","value","message","exclusiveMinimum","exclusiveMaximum"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/openai/src/_vendor/zod-to-json-schema/parsers/bigint.ts"],"sourcesContent":["import { ZodBigIntDef } from 'zod';\nimport { Refs } from '../Refs';\nimport { ErrorMessages, setResponseValueAndErrors } from '../errorMessages';\n\nexport type JsonSchema7BigintType = {\n  type: 'integer';\n  format: 'int64';\n  minimum?: BigInt;\n  exclusiveMinimum?: BigInt;\n  maximum?: BigInt;\n  exclusiveMaximum?: BigInt;\n  multipleOf?: BigInt;\n  errorMessage?: ErrorMessages<JsonSchema7BigintType>;\n};\n\nexport function parseBigintDef(def: ZodBigIntDef, refs: Refs): JsonSchema7BigintType {\n  const res: JsonSchema7BigintType = {\n    type: 'integer',\n    format: 'int64',\n  };\n\n  if (!def.checks) return res;\n\n  for (const check of def.checks) {\n    switch (check.kind) {\n      case 'min':\n        if (refs.target === 'jsonSchema7') {\n          if (check.inclusive) {\n            setResponseValueAndErrors(res, 'minimum', check.value, check.message, refs);\n          } else {\n            setResponseValueAndErrors(res, 'exclusiveMinimum', check.value, check.message, refs);\n          }\n        } else {\n          if (!check.inclusive) {\n            res.exclusiveMinimum = true as any;\n          }\n          setResponseValueAndErrors(res, 'minimum', check.value, check.message, refs);\n        }\n        break;\n      case 'max':\n        if (refs.target === 'jsonSchema7') {\n          if (check.inclusive) {\n            setResponseValueAndErrors(res, 'maximum', check.value, check.message, refs);\n          } else {\n            setResponseValueAndErrors(res, 'exclusiveMaximum', check.value, check.message, refs);\n          }\n        } else {\n          if (!check.inclusive) {\n            res.exclusiveMaximum = true as any;\n          }\n          setResponseValueAndErrors(res, 'maximum', check.value, check.message, refs);\n        }\n        break;\n      case 'multipleOf':\n        setResponseValueAndErrors(res, 'multipleOf', check.value, check.message, refs);\n        break;\n    }\n  }\n  return res;\n}\n"],"mappings":"SAEwBA,yBAAyB,QAAE;AAanD,OAAM,SAAUC,cAAcA,CAACC,GAAiB,EAAEC,IAAU;EAC1D,MAAMC,GAAG,GAA0B;IACjCC,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE;GACT;EAED,IAAI,CAACJ,GAAG,CAACK,MAAM,EAAE,OAAOH,GAAG;EAE3B,KAAK,MAAMI,KAAK,IAAIN,GAAG,CAACK,MAAM,EAAE;IAC9B,QAAQC,KAAK,CAACC,IAAI;MAChB,KAAK,KAAK;QACR,IAAIN,IAAI,CAACO,MAAM,KAAK,aAAa,EAAE;UACjC,IAAIF,KAAK,CAACG,SAAS,EAAE;YACnBX,yBAAyB,CAACI,GAAG,EAAE,SAAS,EAAEI,KAAK,CAACI,KAAK,EAAEJ,KAAK,CAACK,OAAO,EAAEV,IAAI,CAAC;WAC5E,MAAM;YACLH,yBAAyB,CAACI,GAAG,EAAE,kBAAkB,EAAEI,KAAK,CAACI,KAAK,EAAEJ,KAAK,CAACK,OAAO,EAAEV,IAAI,CAAC;;SAEvF,MAAM;UACL,IAAI,CAACK,KAAK,CAACG,SAAS,EAAE;YACpBP,GAAG,CAACU,gBAAgB,GAAG,IAAW;;UAEpCd,yBAAyB,CAACI,GAAG,EAAE,SAAS,EAAEI,KAAK,CAACI,KAAK,EAAEJ,KAAK,CAACK,OAAO,EAAEV,IAAI,CAAC;;QAE7E;MACF,KAAK,KAAK;QACR,IAAIA,IAAI,CAACO,MAAM,KAAK,aAAa,EAAE;UACjC,IAAIF,KAAK,CAACG,SAAS,EAAE;YACnBX,yBAAyB,CAACI,GAAG,EAAE,SAAS,EAAEI,KAAK,CAACI,KAAK,EAAEJ,KAAK,CAACK,OAAO,EAAEV,IAAI,CAAC;WAC5E,MAAM;YACLH,yBAAyB,CAACI,GAAG,EAAE,kBAAkB,EAAEI,KAAK,CAACI,KAAK,EAAEJ,KAAK,CAACK,OAAO,EAAEV,IAAI,CAAC;;SAEvF,MAAM;UACL,IAAI,CAACK,KAAK,CAACG,SAAS,EAAE;YACpBP,GAAG,CAACW,gBAAgB,GAAG,IAAW;;UAEpCf,yBAAyB,CAACI,GAAG,EAAE,SAAS,EAAEI,KAAK,CAACI,KAAK,EAAEJ,KAAK,CAACK,OAAO,EAAEV,IAAI,CAAC;;QAE7E;MACF,KAAK,YAAY;QACfH,yBAAyB,CAACI,GAAG,EAAE,YAAY,EAAEI,KAAK,CAACI,KAAK,EAAEJ,KAAK,CAACK,OAAO,EAAEV,IAAI,CAAC;QAC9E;;;EAGN,OAAOC,GAAG;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}