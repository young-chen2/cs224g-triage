{"ast":null,"code":"import { ReadableStream } from \"./_shims/index.mjs\";\nimport { OpenAIError } from \"./error.mjs\";\nimport { LineDecoder } from \"./internal/decoders/line.mjs\";\nimport { ReadableStreamToAsyncIterable } from \"./internal/stream-utils.mjs\";\nimport { APIError } from \"./error.mjs\";\nexport class Stream {\n  constructor(iterator, controller) {\n    this.iterator = iterator;\n    this.controller = controller;\n  }\n  static fromSSEResponse(response, controller) {\n    let consumed = false;\n    async function* iterator() {\n      if (consumed) {\n        throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n      }\n      consumed = true;\n      let done = false;\n      try {\n        for await (const sse of _iterSSEMessages(response, controller)) {\n          if (done) continue;\n          if (sse.data.startsWith('[DONE]')) {\n            done = true;\n            continue;\n          }\n          if (sse.event === null) {\n            let data;\n            try {\n              data = JSON.parse(sse.data);\n            } catch (e) {\n              console.error(`Could not parse message into JSON:`, sse.data);\n              console.error(`From chunk:`, sse.raw);\n              throw e;\n            }\n            if (data && data.error) {\n              throw new APIError(undefined, data.error, undefined, undefined);\n            }\n            yield data;\n          } else {\n            let data;\n            try {\n              data = JSON.parse(sse.data);\n            } catch (e) {\n              console.error(`Could not parse message into JSON:`, sse.data);\n              console.error(`From chunk:`, sse.raw);\n              throw e;\n            }\n            // TODO: Is this where the error should be thrown?\n            if (sse.event == 'error') {\n              throw new APIError(undefined, data.error, data.message, undefined);\n            }\n            yield {\n              event: sse.event,\n              data: data\n            };\n          }\n        }\n        done = true;\n      } catch (e) {\n        // If the user calls `stream.controller.abort()`, we should exit without throwing.\n        if (e instanceof Error && e.name === 'AbortError') return;\n        throw e;\n      } finally {\n        // If the user `break`s, abort the ongoing request.\n        if (!done) controller.abort();\n      }\n    }\n    return new Stream(iterator, controller);\n  }\n  /**\n   * Generates a Stream from a newline-separated ReadableStream\n   * where each item is a JSON value.\n   */\n  static fromReadableStream(readableStream, controller) {\n    let consumed = false;\n    async function* iterLines() {\n      const lineDecoder = new LineDecoder();\n      const iter = ReadableStreamToAsyncIterable(readableStream);\n      for await (const chunk of iter) {\n        for (const line of lineDecoder.decode(chunk)) {\n          yield line;\n        }\n      }\n      for (const line of lineDecoder.flush()) {\n        yield line;\n      }\n    }\n    async function* iterator() {\n      if (consumed) {\n        throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n      }\n      consumed = true;\n      let done = false;\n      try {\n        for await (const line of iterLines()) {\n          if (done) continue;\n          if (line) yield JSON.parse(line);\n        }\n        done = true;\n      } catch (e) {\n        // If the user calls `stream.controller.abort()`, we should exit without throwing.\n        if (e instanceof Error && e.name === 'AbortError') return;\n        throw e;\n      } finally {\n        // If the user `break`s, abort the ongoing request.\n        if (!done) controller.abort();\n      }\n    }\n    return new Stream(iterator, controller);\n  }\n  [Symbol.asyncIterator]() {\n    return this.iterator();\n  }\n  /**\n   * Splits the stream into two streams which can be\n   * independently read from at different speeds.\n   */\n  tee() {\n    const left = [];\n    const right = [];\n    const iterator = this.iterator();\n    const teeIterator = queue => {\n      return {\n        next: () => {\n          if (queue.length === 0) {\n            const result = iterator.next();\n            left.push(result);\n            right.push(result);\n          }\n          return queue.shift();\n        }\n      };\n    };\n    return [new Stream(() => teeIterator(left), this.controller), new Stream(() => teeIterator(right), this.controller)];\n  }\n  /**\n   * Converts this stream to a newline-separated ReadableStream of\n   * JSON stringified values in the stream\n   * which can be turned back into a Stream with `Stream.fromReadableStream()`.\n   */\n  toReadableStream() {\n    const self = this;\n    let iter;\n    const encoder = new TextEncoder();\n    return new ReadableStream({\n      async start() {\n        iter = self[Symbol.asyncIterator]();\n      },\n      async pull(ctrl) {\n        try {\n          const {\n            value,\n            done\n          } = await iter.next();\n          if (done) return ctrl.close();\n          const bytes = encoder.encode(JSON.stringify(value) + '\\n');\n          ctrl.enqueue(bytes);\n        } catch (err) {\n          ctrl.error(err);\n        }\n      },\n      async cancel() {\n        await iter.return?.();\n      }\n    });\n  }\n}\nexport async function* _iterSSEMessages(response, controller) {\n  if (!response.body) {\n    controller.abort();\n    throw new OpenAIError(`Attempted to iterate over a response with no body`);\n  }\n  const sseDecoder = new SSEDecoder();\n  const lineDecoder = new LineDecoder();\n  const iter = ReadableStreamToAsyncIterable(response.body);\n  for await (const sseChunk of iterSSEChunks(iter)) {\n    for (const line of lineDecoder.decode(sseChunk)) {\n      const sse = sseDecoder.decode(line);\n      if (sse) yield sse;\n    }\n  }\n  for (const line of lineDecoder.flush()) {\n    const sse = sseDecoder.decode(line);\n    if (sse) yield sse;\n  }\n}\n/**\n * Given an async iterable iterator, iterates over it and yields full\n * SSE chunks, i.e. yields when a double new-line is encountered.\n */\nasync function* iterSSEChunks(iterator) {\n  let data = new Uint8Array();\n  for await (const chunk of iterator) {\n    if (chunk == null) {\n      continue;\n    }\n    const binaryChunk = chunk instanceof ArrayBuffer ? new Uint8Array(chunk) : typeof chunk === 'string' ? new TextEncoder().encode(chunk) : chunk;\n    let newData = new Uint8Array(data.length + binaryChunk.length);\n    newData.set(data);\n    newData.set(binaryChunk, data.length);\n    data = newData;\n    let patternIndex;\n    while ((patternIndex = findDoubleNewlineIndex(data)) !== -1) {\n      yield data.slice(0, patternIndex);\n      data = data.slice(patternIndex);\n    }\n  }\n  if (data.length > 0) {\n    yield data;\n  }\n}\nfunction findDoubleNewlineIndex(buffer) {\n  // This function searches the buffer for the end patterns (\\r\\r, \\n\\n, \\r\\n\\r\\n)\n  // and returns the index right after the first occurrence of any pattern,\n  // or -1 if none of the patterns are found.\n  const newline = 0x0a; // \\n\n  const carriage = 0x0d; // \\r\n  for (let i = 0; i < buffer.length - 2; i++) {\n    if (buffer[i] === newline && buffer[i + 1] === newline) {\n      // \\n\\n\n      return i + 2;\n    }\n    if (buffer[i] === carriage && buffer[i + 1] === carriage) {\n      // \\r\\r\n      return i + 2;\n    }\n    if (buffer[i] === carriage && buffer[i + 1] === newline && i + 3 < buffer.length && buffer[i + 2] === carriage && buffer[i + 3] === newline) {\n      // \\r\\n\\r\\n\n      return i + 4;\n    }\n  }\n  return -1;\n}\nclass SSEDecoder {\n  constructor() {\n    this.event = null;\n    this.data = [];\n    this.chunks = [];\n  }\n  decode(line) {\n    if (line.endsWith('\\r')) {\n      line = line.substring(0, line.length - 1);\n    }\n    if (!line) {\n      // empty line and we didn't previously encounter any messages\n      if (!this.event && !this.data.length) return null;\n      const sse = {\n        event: this.event,\n        data: this.data.join('\\n'),\n        raw: this.chunks\n      };\n      this.event = null;\n      this.data = [];\n      this.chunks = [];\n      return sse;\n    }\n    this.chunks.push(line);\n    if (line.startsWith(':')) {\n      return null;\n    }\n    let [fieldname, _, value] = partition(line, ':');\n    if (value.startsWith(' ')) {\n      value = value.substring(1);\n    }\n    if (fieldname === 'event') {\n      this.event = value;\n    } else if (fieldname === 'data') {\n      this.data.push(value);\n    }\n    return null;\n  }\n}\n/** This is an internal helper function that's just used for testing */\nexport function _decodeChunks(chunks) {\n  const decoder = new LineDecoder();\n  const lines = [];\n  for (const chunk of chunks) {\n    lines.push(...decoder.decode(chunk));\n  }\n  return lines;\n}\nfunction partition(str, delimiter) {\n  const index = str.indexOf(delimiter);\n  if (index !== -1) {\n    return [str.substring(0, index), delimiter, str.substring(index + delimiter.length)];\n  }\n  return [str, '', ''];\n}","map":{"version":3,"names":["ReadableStream","OpenAIError","LineDecoder","ReadableStreamToAsyncIterable","APIError","Stream","constructor","iterator","controller","fromSSEResponse","response","consumed","Error","done","sse","_iterSSEMessages","data","startsWith","event","JSON","parse","e","console","error","raw","undefined","message","name","abort","fromReadableStream","readableStream","iterLines","lineDecoder","iter","chunk","line","decode","flush","Symbol","asyncIterator","tee","left","right","teeIterator","queue","next","length","result","push","shift","toReadableStream","self","encoder","TextEncoder","start","pull","ctrl","value","close","bytes","encode","stringify","enqueue","err","cancel","return","body","sseDecoder","SSEDecoder","sseChunk","iterSSEChunks","Uint8Array","binaryChunk","ArrayBuffer","newData","set","patternIndex","findDoubleNewlineIndex","slice","buffer","newline","carriage","i","chunks","endsWith","substring","join","fieldname","_","partition","_decodeChunks","decoder","lines","str","delimiter","index","indexOf"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/openai/src/streaming.ts"],"sourcesContent":["import { ReadableStream, type Response } from './_shims/index';\nimport { OpenAIError } from './error';\nimport { LineDecoder } from './internal/decoders/line';\nimport { ReadableStreamToAsyncIterable } from './internal/stream-utils';\n\nimport { APIError } from './error';\n\ntype Bytes = string | ArrayBuffer | Uint8Array | Buffer | null | undefined;\n\nexport type ServerSentEvent = {\n  event: string | null;\n  data: string;\n  raw: string[];\n};\n\nexport class Stream<Item> implements AsyncIterable<Item> {\n  controller: AbortController;\n\n  constructor(\n    private iterator: () => AsyncIterator<Item>,\n    controller: AbortController,\n  ) {\n    this.controller = controller;\n  }\n\n  static fromSSEResponse<Item>(response: Response, controller: AbortController): Stream<Item> {\n    let consumed = false;\n\n    async function* iterator(): AsyncIterator<Item, any, undefined> {\n      if (consumed) {\n        throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n      }\n      consumed = true;\n      let done = false;\n      try {\n        for await (const sse of _iterSSEMessages(response, controller)) {\n          if (done) continue;\n\n          if (sse.data.startsWith('[DONE]')) {\n            done = true;\n            continue;\n          }\n\n          if (sse.event === null) {\n            let data;\n\n            try {\n              data = JSON.parse(sse.data);\n            } catch (e) {\n              console.error(`Could not parse message into JSON:`, sse.data);\n              console.error(`From chunk:`, sse.raw);\n              throw e;\n            }\n\n            if (data && data.error) {\n              throw new APIError(undefined, data.error, undefined, undefined);\n            }\n\n            yield data;\n          } else {\n            let data;\n            try {\n              data = JSON.parse(sse.data);\n            } catch (e) {\n              console.error(`Could not parse message into JSON:`, sse.data);\n              console.error(`From chunk:`, sse.raw);\n              throw e;\n            }\n            // TODO: Is this where the error should be thrown?\n            if (sse.event == 'error') {\n              throw new APIError(undefined, data.error, data.message, undefined);\n            }\n            yield { event: sse.event, data: data } as any;\n          }\n        }\n        done = true;\n      } catch (e) {\n        // If the user calls `stream.controller.abort()`, we should exit without throwing.\n        if (e instanceof Error && e.name === 'AbortError') return;\n        throw e;\n      } finally {\n        // If the user `break`s, abort the ongoing request.\n        if (!done) controller.abort();\n      }\n    }\n\n    return new Stream(iterator, controller);\n  }\n\n  /**\n   * Generates a Stream from a newline-separated ReadableStream\n   * where each item is a JSON value.\n   */\n  static fromReadableStream<Item>(readableStream: ReadableStream, controller: AbortController): Stream<Item> {\n    let consumed = false;\n\n    async function* iterLines(): AsyncGenerator<string, void, unknown> {\n      const lineDecoder = new LineDecoder();\n\n      const iter = ReadableStreamToAsyncIterable<Bytes>(readableStream);\n      for await (const chunk of iter) {\n        for (const line of lineDecoder.decode(chunk)) {\n          yield line;\n        }\n      }\n\n      for (const line of lineDecoder.flush()) {\n        yield line;\n      }\n    }\n\n    async function* iterator(): AsyncIterator<Item, any, undefined> {\n      if (consumed) {\n        throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n      }\n      consumed = true;\n      let done = false;\n      try {\n        for await (const line of iterLines()) {\n          if (done) continue;\n          if (line) yield JSON.parse(line);\n        }\n        done = true;\n      } catch (e) {\n        // If the user calls `stream.controller.abort()`, we should exit without throwing.\n        if (e instanceof Error && e.name === 'AbortError') return;\n        throw e;\n      } finally {\n        // If the user `break`s, abort the ongoing request.\n        if (!done) controller.abort();\n      }\n    }\n\n    return new Stream(iterator, controller);\n  }\n\n  [Symbol.asyncIterator](): AsyncIterator<Item> {\n    return this.iterator();\n  }\n\n  /**\n   * Splits the stream into two streams which can be\n   * independently read from at different speeds.\n   */\n  tee(): [Stream<Item>, Stream<Item>] {\n    const left: Array<Promise<IteratorResult<Item>>> = [];\n    const right: Array<Promise<IteratorResult<Item>>> = [];\n    const iterator = this.iterator();\n\n    const teeIterator = (queue: Array<Promise<IteratorResult<Item>>>): AsyncIterator<Item> => {\n      return {\n        next: () => {\n          if (queue.length === 0) {\n            const result = iterator.next();\n            left.push(result);\n            right.push(result);\n          }\n          return queue.shift()!;\n        },\n      };\n    };\n\n    return [\n      new Stream(() => teeIterator(left), this.controller),\n      new Stream(() => teeIterator(right), this.controller),\n    ];\n  }\n\n  /**\n   * Converts this stream to a newline-separated ReadableStream of\n   * JSON stringified values in the stream\n   * which can be turned back into a Stream with `Stream.fromReadableStream()`.\n   */\n  toReadableStream(): ReadableStream {\n    const self = this;\n    let iter: AsyncIterator<Item>;\n    const encoder = new TextEncoder();\n\n    return new ReadableStream({\n      async start() {\n        iter = self[Symbol.asyncIterator]();\n      },\n      async pull(ctrl: any) {\n        try {\n          const { value, done } = await iter.next();\n          if (done) return ctrl.close();\n\n          const bytes = encoder.encode(JSON.stringify(value) + '\\n');\n\n          ctrl.enqueue(bytes);\n        } catch (err) {\n          ctrl.error(err);\n        }\n      },\n      async cancel() {\n        await iter.return?.();\n      },\n    });\n  }\n}\n\nexport async function* _iterSSEMessages(\n  response: Response,\n  controller: AbortController,\n): AsyncGenerator<ServerSentEvent, void, unknown> {\n  if (!response.body) {\n    controller.abort();\n    throw new OpenAIError(`Attempted to iterate over a response with no body`);\n  }\n\n  const sseDecoder = new SSEDecoder();\n  const lineDecoder = new LineDecoder();\n\n  const iter = ReadableStreamToAsyncIterable<Bytes>(response.body);\n  for await (const sseChunk of iterSSEChunks(iter)) {\n    for (const line of lineDecoder.decode(sseChunk)) {\n      const sse = sseDecoder.decode(line);\n      if (sse) yield sse;\n    }\n  }\n\n  for (const line of lineDecoder.flush()) {\n    const sse = sseDecoder.decode(line);\n    if (sse) yield sse;\n  }\n}\n\n/**\n * Given an async iterable iterator, iterates over it and yields full\n * SSE chunks, i.e. yields when a double new-line is encountered.\n */\nasync function* iterSSEChunks(iterator: AsyncIterableIterator<Bytes>): AsyncGenerator<Uint8Array> {\n  let data = new Uint8Array();\n\n  for await (const chunk of iterator) {\n    if (chunk == null) {\n      continue;\n    }\n\n    const binaryChunk =\n      chunk instanceof ArrayBuffer ? new Uint8Array(chunk)\n      : typeof chunk === 'string' ? new TextEncoder().encode(chunk)\n      : chunk;\n\n    let newData = new Uint8Array(data.length + binaryChunk.length);\n    newData.set(data);\n    newData.set(binaryChunk, data.length);\n    data = newData;\n\n    let patternIndex;\n    while ((patternIndex = findDoubleNewlineIndex(data)) !== -1) {\n      yield data.slice(0, patternIndex);\n      data = data.slice(patternIndex);\n    }\n  }\n\n  if (data.length > 0) {\n    yield data;\n  }\n}\n\nfunction findDoubleNewlineIndex(buffer: Uint8Array): number {\n  // This function searches the buffer for the end patterns (\\r\\r, \\n\\n, \\r\\n\\r\\n)\n  // and returns the index right after the first occurrence of any pattern,\n  // or -1 if none of the patterns are found.\n  const newline = 0x0a; // \\n\n  const carriage = 0x0d; // \\r\n\n  for (let i = 0; i < buffer.length - 2; i++) {\n    if (buffer[i] === newline && buffer[i + 1] === newline) {\n      // \\n\\n\n      return i + 2;\n    }\n    if (buffer[i] === carriage && buffer[i + 1] === carriage) {\n      // \\r\\r\n      return i + 2;\n    }\n    if (\n      buffer[i] === carriage &&\n      buffer[i + 1] === newline &&\n      i + 3 < buffer.length &&\n      buffer[i + 2] === carriage &&\n      buffer[i + 3] === newline\n    ) {\n      // \\r\\n\\r\\n\n      return i + 4;\n    }\n  }\n\n  return -1;\n}\n\nclass SSEDecoder {\n  private data: string[];\n  private event: string | null;\n  private chunks: string[];\n\n  constructor() {\n    this.event = null;\n    this.data = [];\n    this.chunks = [];\n  }\n\n  decode(line: string) {\n    if (line.endsWith('\\r')) {\n      line = line.substring(0, line.length - 1);\n    }\n\n    if (!line) {\n      // empty line and we didn't previously encounter any messages\n      if (!this.event && !this.data.length) return null;\n\n      const sse: ServerSentEvent = {\n        event: this.event,\n        data: this.data.join('\\n'),\n        raw: this.chunks,\n      };\n\n      this.event = null;\n      this.data = [];\n      this.chunks = [];\n\n      return sse;\n    }\n\n    this.chunks.push(line);\n\n    if (line.startsWith(':')) {\n      return null;\n    }\n\n    let [fieldname, _, value] = partition(line, ':');\n\n    if (value.startsWith(' ')) {\n      value = value.substring(1);\n    }\n\n    if (fieldname === 'event') {\n      this.event = value;\n    } else if (fieldname === 'data') {\n      this.data.push(value);\n    }\n\n    return null;\n  }\n}\n\n/** This is an internal helper function that's just used for testing */\nexport function _decodeChunks(chunks: string[]): string[] {\n  const decoder = new LineDecoder();\n  const lines: string[] = [];\n  for (const chunk of chunks) {\n    lines.push(...decoder.decode(chunk));\n  }\n\n  return lines;\n}\n\nfunction partition(str: string, delimiter: string): [string, string, string] {\n  const index = str.indexOf(delimiter);\n  if (index !== -1) {\n    return [str.substring(0, index), delimiter, str.substring(index + delimiter.length)];\n  }\n\n  return [str, '', ''];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}