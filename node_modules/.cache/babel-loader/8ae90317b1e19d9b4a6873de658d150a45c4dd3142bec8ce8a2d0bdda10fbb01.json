{"ast":null,"code":"import { addErrorMessage, setResponseValueAndErrors } from \"../errorMessages.mjs\";\nexport function parseNumberDef(def, refs) {\n  const res = {\n    type: 'number'\n  };\n  if (!def.checks) return res;\n  for (const check of def.checks) {\n    switch (check.kind) {\n      case 'int':\n        res.type = 'integer';\n        addErrorMessage(res, 'type', check.message, refs);\n        break;\n      case 'min':\n        if (refs.target === 'jsonSchema7') {\n          if (check.inclusive) {\n            setResponseValueAndErrors(res, 'minimum', check.value, check.message, refs);\n          } else {\n            setResponseValueAndErrors(res, 'exclusiveMinimum', check.value, check.message, refs);\n          }\n        } else {\n          if (!check.inclusive) {\n            res.exclusiveMinimum = true;\n          }\n          setResponseValueAndErrors(res, 'minimum', check.value, check.message, refs);\n        }\n        break;\n      case 'max':\n        if (refs.target === 'jsonSchema7') {\n          if (check.inclusive) {\n            setResponseValueAndErrors(res, 'maximum', check.value, check.message, refs);\n          } else {\n            setResponseValueAndErrors(res, 'exclusiveMaximum', check.value, check.message, refs);\n          }\n        } else {\n          if (!check.inclusive) {\n            res.exclusiveMaximum = true;\n          }\n          setResponseValueAndErrors(res, 'maximum', check.value, check.message, refs);\n        }\n        break;\n      case 'multipleOf':\n        setResponseValueAndErrors(res, 'multipleOf', check.value, check.message, refs);\n        break;\n    }\n  }\n  return res;\n}","map":{"version":3,"names":["addErrorMessage","setResponseValueAndErrors","parseNumberDef","def","refs","res","type","checks","check","kind","message","target","inclusive","value","exclusiveMinimum","exclusiveMaximum"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/openai/src/_vendor/zod-to-json-schema/parsers/number.ts"],"sourcesContent":["import { ZodNumberDef } from 'zod';\nimport { addErrorMessage, ErrorMessages, setResponseValueAndErrors } from '../errorMessages';\nimport { Refs } from '../Refs';\n\nexport type JsonSchema7NumberType = {\n  type: 'number' | 'integer';\n  minimum?: number;\n  exclusiveMinimum?: number;\n  maximum?: number;\n  exclusiveMaximum?: number;\n  multipleOf?: number;\n  errorMessage?: ErrorMessages<JsonSchema7NumberType>;\n};\n\nexport function parseNumberDef(def: ZodNumberDef, refs: Refs): JsonSchema7NumberType {\n  const res: JsonSchema7NumberType = {\n    type: 'number',\n  };\n\n  if (!def.checks) return res;\n\n  for (const check of def.checks) {\n    switch (check.kind) {\n      case 'int':\n        res.type = 'integer';\n        addErrorMessage(res, 'type', check.message, refs);\n        break;\n      case 'min':\n        if (refs.target === 'jsonSchema7') {\n          if (check.inclusive) {\n            setResponseValueAndErrors(res, 'minimum', check.value, check.message, refs);\n          } else {\n            setResponseValueAndErrors(res, 'exclusiveMinimum', check.value, check.message, refs);\n          }\n        } else {\n          if (!check.inclusive) {\n            res.exclusiveMinimum = true as any;\n          }\n          setResponseValueAndErrors(res, 'minimum', check.value, check.message, refs);\n        }\n        break;\n      case 'max':\n        if (refs.target === 'jsonSchema7') {\n          if (check.inclusive) {\n            setResponseValueAndErrors(res, 'maximum', check.value, check.message, refs);\n          } else {\n            setResponseValueAndErrors(res, 'exclusiveMaximum', check.value, check.message, refs);\n          }\n        } else {\n          if (!check.inclusive) {\n            res.exclusiveMaximum = true as any;\n          }\n          setResponseValueAndErrors(res, 'maximum', check.value, check.message, refs);\n        }\n        break;\n      case 'multipleOf':\n        setResponseValueAndErrors(res, 'multipleOf', check.value, check.message, refs);\n        break;\n    }\n  }\n  return res;\n}\n"],"mappings":"SACSA,eAAe,EAAiBC,yBAAyB,QAAE;AAapE,OAAM,SAAUC,cAAcA,CAACC,GAAiB,EAAEC,IAAU;EAC1D,MAAMC,GAAG,GAA0B;IACjCC,IAAI,EAAE;GACP;EAED,IAAI,CAACH,GAAG,CAACI,MAAM,EAAE,OAAOF,GAAG;EAE3B,KAAK,MAAMG,KAAK,IAAIL,GAAG,CAACI,MAAM,EAAE;IAC9B,QAAQC,KAAK,CAACC,IAAI;MAChB,KAAK,KAAK;QACRJ,GAAG,CAACC,IAAI,GAAG,SAAS;QACpBN,eAAe,CAACK,GAAG,EAAE,MAAM,EAAEG,KAAK,CAACE,OAAO,EAAEN,IAAI,CAAC;QACjD;MACF,KAAK,KAAK;QACR,IAAIA,IAAI,CAACO,MAAM,KAAK,aAAa,EAAE;UACjC,IAAIH,KAAK,CAACI,SAAS,EAAE;YACnBX,yBAAyB,CAACI,GAAG,EAAE,SAAS,EAAEG,KAAK,CAACK,KAAK,EAAEL,KAAK,CAACE,OAAO,EAAEN,IAAI,CAAC;WAC5E,MAAM;YACLH,yBAAyB,CAACI,GAAG,EAAE,kBAAkB,EAAEG,KAAK,CAACK,KAAK,EAAEL,KAAK,CAACE,OAAO,EAAEN,IAAI,CAAC;;SAEvF,MAAM;UACL,IAAI,CAACI,KAAK,CAACI,SAAS,EAAE;YACpBP,GAAG,CAACS,gBAAgB,GAAG,IAAW;;UAEpCb,yBAAyB,CAACI,GAAG,EAAE,SAAS,EAAEG,KAAK,CAACK,KAAK,EAAEL,KAAK,CAACE,OAAO,EAAEN,IAAI,CAAC;;QAE7E;MACF,KAAK,KAAK;QACR,IAAIA,IAAI,CAACO,MAAM,KAAK,aAAa,EAAE;UACjC,IAAIH,KAAK,CAACI,SAAS,EAAE;YACnBX,yBAAyB,CAACI,GAAG,EAAE,SAAS,EAAEG,KAAK,CAACK,KAAK,EAAEL,KAAK,CAACE,OAAO,EAAEN,IAAI,CAAC;WAC5E,MAAM;YACLH,yBAAyB,CAACI,GAAG,EAAE,kBAAkB,EAAEG,KAAK,CAACK,KAAK,EAAEL,KAAK,CAACE,OAAO,EAAEN,IAAI,CAAC;;SAEvF,MAAM;UACL,IAAI,CAACI,KAAK,CAACI,SAAS,EAAE;YACpBP,GAAG,CAACU,gBAAgB,GAAG,IAAW;;UAEpCd,yBAAyB,CAACI,GAAG,EAAE,SAAS,EAAEG,KAAK,CAACK,KAAK,EAAEL,KAAK,CAACE,OAAO,EAAEN,IAAI,CAAC;;QAE7E;MACF,KAAK,YAAY;QACfH,yBAAyB,CAACI,GAAG,EAAE,YAAY,EAAEG,KAAK,CAACK,KAAK,EAAEL,KAAK,CAACE,OAAO,EAAEN,IAAI,CAAC;QAC9E;;;EAGN,OAAOC,GAAG;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}