{"ast":null,"code":"import { zodToJsonSchema } from \"zod-to-json-schema\";\nimport { PromptTemplate } from \"@langchain/core/prompts\";\nimport { JsonKeyOutputFunctionsParser } from \"../../output_parsers/openai_functions.js\";\nimport { LLMChain } from \"../llm_chain.js\";\n/**\n * Function that returns an array of extraction functions. These functions\n * are used to extract relevant information from a passage.\n * @param schema The schema of the function parameters.\n * @returns An array of extraction functions.\n */\nfunction getExtractionFunctions(schema) {\n  return [{\n    name: \"information_extraction\",\n    description: \"Extracts the relevant information from the passage.\",\n    parameters: {\n      type: \"object\",\n      properties: {\n        info: {\n          type: \"array\",\n          items: {\n            type: schema.type,\n            properties: schema.properties,\n            required: schema.required\n          }\n        }\n      },\n      required: [\"info\"]\n    }\n  }];\n}\nconst _EXTRACTION_TEMPLATE = `Extract and save the relevant entities mentioned in the following passage together with their properties.\n\nPassage:\n{input}\n`;\n/**\n * Function that creates an extraction chain using the provided JSON schema.\n * It sets up the necessary components, such as the prompt, output parser, and tags.\n * @param schema JSON schema of the function parameters.\n * @param llm Must be a ChatOpenAI or AnthropicFunctions model that supports function calling.\n * @returns A LLMChain instance configured to return data matching the schema.\n */\nexport function createExtractionChain(schema, llm) {\n  const functions = getExtractionFunctions(schema);\n  const prompt = PromptTemplate.fromTemplate(_EXTRACTION_TEMPLATE);\n  const outputParser = new JsonKeyOutputFunctionsParser({\n    attrName: \"info\"\n  });\n  return new LLMChain({\n    llm,\n    prompt,\n    llmKwargs: {\n      functions\n    },\n    outputParser,\n    tags: [\"openai_functions\", \"extraction\"]\n  });\n}\n/**\n * Function that creates an extraction chain from a Zod schema. It\n * converts the Zod schema to a JSON schema using zod-to-json-schema\n * before creating the extraction chain.\n * @param schema The Zod schema which extracted data should match\n * @param llm Must be a ChatOpenAI or AnthropicFunctions model that supports function calling.\n * @returns A LLMChain instance configured to return data matching the schema.\n */\nexport function createExtractionChainFromZod(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nschema, llm) {\n  return createExtractionChain(zodToJsonSchema(schema), llm);\n}","map":{"version":3,"names":["zodToJsonSchema","PromptTemplate","JsonKeyOutputFunctionsParser","LLMChain","getExtractionFunctions","schema","name","description","parameters","type","properties","info","items","required","_EXTRACTION_TEMPLATE","createExtractionChain","llm","functions","prompt","fromTemplate","outputParser","attrName","llmKwargs","tags","createExtractionChainFromZod"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/langchain/dist/chains/openai_functions/extraction.js"],"sourcesContent":["import { zodToJsonSchema } from \"zod-to-json-schema\";\nimport { PromptTemplate } from \"@langchain/core/prompts\";\nimport { JsonKeyOutputFunctionsParser, } from \"../../output_parsers/openai_functions.js\";\nimport { LLMChain } from \"../llm_chain.js\";\n/**\n * Function that returns an array of extraction functions. These functions\n * are used to extract relevant information from a passage.\n * @param schema The schema of the function parameters.\n * @returns An array of extraction functions.\n */\nfunction getExtractionFunctions(schema) {\n    return [\n        {\n            name: \"information_extraction\",\n            description: \"Extracts the relevant information from the passage.\",\n            parameters: {\n                type: \"object\",\n                properties: {\n                    info: {\n                        type: \"array\",\n                        items: {\n                            type: schema.type,\n                            properties: schema.properties,\n                            required: schema.required,\n                        },\n                    },\n                },\n                required: [\"info\"],\n            },\n        },\n    ];\n}\nconst _EXTRACTION_TEMPLATE = `Extract and save the relevant entities mentioned in the following passage together with their properties.\n\nPassage:\n{input}\n`;\n/**\n * Function that creates an extraction chain using the provided JSON schema.\n * It sets up the necessary components, such as the prompt, output parser, and tags.\n * @param schema JSON schema of the function parameters.\n * @param llm Must be a ChatOpenAI or AnthropicFunctions model that supports function calling.\n * @returns A LLMChain instance configured to return data matching the schema.\n */\nexport function createExtractionChain(schema, llm) {\n    const functions = getExtractionFunctions(schema);\n    const prompt = PromptTemplate.fromTemplate(_EXTRACTION_TEMPLATE);\n    const outputParser = new JsonKeyOutputFunctionsParser({ attrName: \"info\" });\n    return new LLMChain({\n        llm,\n        prompt,\n        llmKwargs: { functions },\n        outputParser,\n        tags: [\"openai_functions\", \"extraction\"],\n    });\n}\n/**\n * Function that creates an extraction chain from a Zod schema. It\n * converts the Zod schema to a JSON schema using zod-to-json-schema\n * before creating the extraction chain.\n * @param schema The Zod schema which extracted data should match\n * @param llm Must be a ChatOpenAI or AnthropicFunctions model that supports function calling.\n * @returns A LLMChain instance configured to return data matching the schema.\n */\nexport function createExtractionChainFromZod(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nschema, llm) {\n    return createExtractionChain(zodToJsonSchema(schema), llm);\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,oBAAoB;AACpD,SAASC,cAAc,QAAQ,yBAAyB;AACxD,SAASC,4BAA4B,QAAS,0CAA0C;AACxF,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,sBAAsBA,CAACC,MAAM,EAAE;EACpC,OAAO,CACH;IACIC,IAAI,EAAE,wBAAwB;IAC9BC,WAAW,EAAE,qDAAqD;IAClEC,UAAU,EAAE;MACRC,IAAI,EAAE,QAAQ;MACdC,UAAU,EAAE;QACRC,IAAI,EAAE;UACFF,IAAI,EAAE,OAAO;UACbG,KAAK,EAAE;YACHH,IAAI,EAAEJ,MAAM,CAACI,IAAI;YACjBC,UAAU,EAAEL,MAAM,CAACK,UAAU;YAC7BG,QAAQ,EAAER,MAAM,CAACQ;UACrB;QACJ;MACJ,CAAC;MACDA,QAAQ,EAAE,CAAC,MAAM;IACrB;EACJ,CAAC,CACJ;AACL;AACA,MAAMC,oBAAoB,GAAG;AAC7B;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,qBAAqBA,CAACV,MAAM,EAAEW,GAAG,EAAE;EAC/C,MAAMC,SAAS,GAAGb,sBAAsB,CAACC,MAAM,CAAC;EAChD,MAAMa,MAAM,GAAGjB,cAAc,CAACkB,YAAY,CAACL,oBAAoB,CAAC;EAChE,MAAMM,YAAY,GAAG,IAAIlB,4BAA4B,CAAC;IAAEmB,QAAQ,EAAE;EAAO,CAAC,CAAC;EAC3E,OAAO,IAAIlB,QAAQ,CAAC;IAChBa,GAAG;IACHE,MAAM;IACNI,SAAS,EAAE;MAAEL;IAAU,CAAC;IACxBG,YAAY;IACZG,IAAI,EAAE,CAAC,kBAAkB,EAAE,YAAY;EAC3C,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,4BAA4BA;AAC5C;AACAnB,MAAM,EAAEW,GAAG,EAAE;EACT,OAAOD,qBAAqB,CAACf,eAAe,CAACK,MAAM,CAAC,EAAEW,GAAG,CAAC;AAC9D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}