{"ast":null,"code":"import { AzureOpenAI as AzureOpenAIClient } from \"openai\";\nimport { getEnvironmentVariable } from \"@langchain/core/utils/env\";\nimport { ChatOpenAI } from \"../chat_models.js\";\nimport { getEndpoint } from \"../utils/azure.js\";\n/**\n * Azure OpenAI chat model integration.\n *\n * Setup:\n * Install `@langchain/openai` and set the following environment variables:\n *\n * ```bash\n * npm install @langchain/openai\n * export AZURE_OPENAI_API_KEY=\"your-api-key\"\n * export AZURE_OPENAI_API_DEPLOYMENT_NAME=\"your-deployment-name\"\n * export AZURE_OPENAI_API_VERSION=\"your-version\"\n * export AZURE_OPENAI_BASE_PATH=\"your-base-path\"\n * ```\n *\n * ## [Constructor args](https://api.js.langchain.com/classes/langchain_openai.AzureChatOpenAI.html#constructor)\n *\n * ## [Runtime args](https://api.js.langchain.com/interfaces/langchain_openai.ChatOpenAICallOptions.html)\n *\n * Runtime args can be passed as the second argument to any of the base runnable methods `.invoke`. `.stream`, `.batch`, etc.\n * They can also be passed via `.bind`, or the second arg in `.bindTools`, like shown in the examples below:\n *\n * ```typescript\n * // When calling `.bind`, call options should be passed via the first argument\n * const llmWithArgsBound = llm.bind({\n *   stop: [\"\\n\"],\n *   tools: [...],\n * });\n *\n * // When calling `.bindTools`, call options should be passed via the second argument\n * const llmWithTools = llm.bindTools(\n *   [...],\n *   {\n *     tool_choice: \"auto\",\n *   }\n * );\n * ```\n *\n * ## Examples\n *\n * <details open>\n * <summary><strong>Instantiate</strong></summary>\n *\n * ```typescript\n * import { AzureChatOpenAI } from '@langchain/openai';\n *\n * const llm = new AzureChatOpenAI({\n *   azureOpenAIApiKey: process.env.AZURE_OPENAI_API_KEY, // In Node.js defaults to process.env.AZURE_OPENAI_API_KEY\n *   azureOpenAIApiInstanceName: process.env.AZURE_OPENAI_API_INSTANCE_NAME, // In Node.js defaults to process.env.AZURE_OPENAI_API_INSTANCE_NAME\n *   azureOpenAIApiDeploymentName: process.env.AZURE_OPENAI_API_DEPLOYMENT_NAME, // In Node.js defaults to process.env.AZURE_OPENAI_API_DEPLOYMENT_NAME\n *   azureOpenAIApiVersion: process.env.AZURE_OPENAI_API_VERSION, // In Node.js defaults to process.env.AZURE_OPENAI_API_VERSION\n *   temperature: 0,\n *   maxTokens: undefined,\n *   timeout: undefined,\n *   maxRetries: 2,\n *   // apiKey: \"...\",\n *   // baseUrl: \"...\",\n *   // other params...\n * });\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Invoking</strong></summary>\n *\n * ```typescript\n * const input = `Translate \"I love programming\" into French.`;\n *\n * // Models also accept a list of chat messages or a formatted prompt\n * const result = await llm.invoke(input);\n * console.log(result);\n * ```\n *\n * ```txt\n * AIMessage {\n *   \"id\": \"chatcmpl-9u4Mpu44CbPjwYFkTbeoZgvzB00Tz\",\n *   \"content\": \"J'adore la programmation.\",\n *   \"response_metadata\": {\n *     \"tokenUsage\": {\n *       \"completionTokens\": 5,\n *       \"promptTokens\": 28,\n *       \"totalTokens\": 33\n *     },\n *     \"finish_reason\": \"stop\",\n *     \"system_fingerprint\": \"fp_3aa7262c27\"\n *   },\n *   \"usage_metadata\": {\n *     \"input_tokens\": 28,\n *     \"output_tokens\": 5,\n *     \"total_tokens\": 33\n *   }\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Streaming Chunks</strong></summary>\n *\n * ```typescript\n * for await (const chunk of await llm.stream(input)) {\n *   console.log(chunk);\n * }\n * ```\n *\n * ```txt\n * AIMessageChunk {\n *   \"id\": \"chatcmpl-9u4NWB7yUeHCKdLr6jP3HpaOYHTqs\",\n *   \"content\": \"\"\n * }\n * AIMessageChunk {\n *   \"content\": \"J\"\n * }\n * AIMessageChunk {\n *   \"content\": \"'adore\"\n * }\n * AIMessageChunk {\n *   \"content\": \" la\"\n * }\n * AIMessageChunk {\n *   \"content\": \" programmation\",,\n * }\n * AIMessageChunk {\n *   \"content\": \".\",,\n * }\n * AIMessageChunk {\n *   \"content\": \"\",\n *   \"response_metadata\": {\n *     \"finish_reason\": \"stop\",\n *     \"system_fingerprint\": \"fp_c9aa9c0491\"\n *   },\n * }\n * AIMessageChunk {\n *   \"content\": \"\",\n *   \"usage_metadata\": {\n *     \"input_tokens\": 28,\n *     \"output_tokens\": 5,\n *     \"total_tokens\": 33\n *   }\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Aggregate Streamed Chunks</strong></summary>\n *\n * ```typescript\n * import { AIMessageChunk } from '@langchain/core/messages';\n * import { concat } from '@langchain/core/utils/stream';\n *\n * const stream = await llm.stream(input);\n * let full: AIMessageChunk | undefined;\n * for await (const chunk of stream) {\n *   full = !full ? chunk : concat(full, chunk);\n * }\n * console.log(full);\n * ```\n *\n * ```txt\n * AIMessageChunk {\n *   \"id\": \"chatcmpl-9u4PnX6Fy7OmK46DASy0bH6cxn5Xu\",\n *   \"content\": \"J'adore la programmation.\",\n *   \"response_metadata\": {\n *     \"prompt\": 0,\n *     \"completion\": 0,\n *     \"finish_reason\": \"stop\",\n *   },\n *   \"usage_metadata\": {\n *     \"input_tokens\": 28,\n *     \"output_tokens\": 5,\n *     \"total_tokens\": 33\n *   }\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Bind tools</strong></summary>\n *\n * ```typescript\n * import { z } from 'zod';\n *\n * const GetWeather = {\n *   name: \"GetWeather\",\n *   description: \"Get the current weather in a given location\",\n *   schema: z.object({\n *     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\n *   }),\n * }\n *\n * const GetPopulation = {\n *   name: \"GetPopulation\",\n *   description: \"Get the current population in a given location\",\n *   schema: z.object({\n *     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\n *   }),\n * }\n *\n * const llmWithTools = llm.bindTools([GetWeather, GetPopulation]);\n * const aiMsg = await llmWithTools.invoke(\n *   \"Which city is hotter today and which is bigger: LA or NY?\"\n * );\n * console.log(aiMsg.tool_calls);\n * ```\n *\n * ```txt\n * [\n *   {\n *     name: 'GetWeather',\n *     args: { location: 'Los Angeles, CA' },\n *     type: 'tool_call',\n *     id: 'call_uPU4FiFzoKAtMxfmPnfQL6UK'\n *   },\n *   {\n *     name: 'GetWeather',\n *     args: { location: 'New York, NY' },\n *     type: 'tool_call',\n *     id: 'call_UNkEwuQsHrGYqgDQuH9nPAtX'\n *   },\n *   {\n *     name: 'GetPopulation',\n *     args: { location: 'Los Angeles, CA' },\n *     type: 'tool_call',\n *     id: 'call_kL3OXxaq9OjIKqRTpvjaCH14'\n *   },\n *   {\n *     name: 'GetPopulation',\n *     args: { location: 'New York, NY' },\n *     type: 'tool_call',\n *     id: 'call_s9KQB1UWj45LLGaEnjz0179q'\n *   }\n * ]\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Structured Output</strong></summary>\n *\n * ```typescript\n * import { z } from 'zod';\n *\n * const Joke = z.object({\n *   setup: z.string().describe(\"The setup of the joke\"),\n *   punchline: z.string().describe(\"The punchline to the joke\"),\n *   rating: z.number().nullable().describe(\"How funny the joke is, from 1 to 10\")\n * }).describe('Joke to tell user.');\n *\n * const structuredLlm = llm.withStructuredOutput(Joke, { name: \"Joke\" });\n * const jokeResult = await structuredLlm.invoke(\"Tell me a joke about cats\");\n * console.log(jokeResult);\n * ```\n *\n * ```txt\n * {\n *   setup: 'Why was the cat sitting on the computer?',\n *   punchline: 'Because it wanted to keep an eye on the mouse!',\n *   rating: 7\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>JSON Object Response Format</strong></summary>\n *\n * ```typescript\n * const jsonLlm = llm.bind({ response_format: { type: \"json_object\" } });\n * const jsonLlmAiMsg = await jsonLlm.invoke(\n *   \"Return a JSON object with key 'randomInts' and a value of 10 random ints in [0-99]\"\n * );\n * console.log(jsonLlmAiMsg.content);\n * ```\n *\n * ```txt\n * {\n *   \"randomInts\": [23, 87, 45, 12, 78, 34, 56, 90, 11, 67]\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Multimodal</strong></summary>\n *\n * ```typescript\n * import { HumanMessage } from '@langchain/core/messages';\n *\n * const imageUrl = \"https://example.com/image.jpg\";\n * const imageData = await fetch(imageUrl).then(res => res.arrayBuffer());\n * const base64Image = Buffer.from(imageData).toString('base64');\n *\n * const message = new HumanMessage({\n *   content: [\n *     { type: \"text\", text: \"describe the weather in this image\" },\n *     {\n *       type: \"image_url\",\n *       image_url: { url: `data:image/jpeg;base64,${base64Image}` },\n *     },\n *   ]\n * });\n *\n * const imageDescriptionAiMsg = await llm.invoke([message]);\n * console.log(imageDescriptionAiMsg.content);\n * ```\n *\n * ```txt\n * The weather in the image appears to be clear and sunny. The sky is mostly blue with a few scattered white clouds, indicating fair weather. The bright sunlight is casting shadows on the green, grassy hill, suggesting it is a pleasant day with good visibility. There are no signs of rain or stormy conditions.\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Usage Metadata</strong></summary>\n *\n * ```typescript\n * const aiMsgForMetadata = await llm.invoke(input);\n * console.log(aiMsgForMetadata.usage_metadata);\n * ```\n *\n * ```txt\n * { input_tokens: 28, output_tokens: 5, total_tokens: 33 }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Logprobs</strong></summary>\n *\n * ```typescript\n * const logprobsLlm = new ChatOpenAI({ logprobs: true });\n * const aiMsgForLogprobs = await logprobsLlm.invoke(input);\n * console.log(aiMsgForLogprobs.response_metadata.logprobs);\n * ```\n *\n * ```txt\n * {\n *   content: [\n *     {\n *       token: 'J',\n *       logprob: -0.000050616763,\n *       bytes: [Array],\n *       top_logprobs: []\n *     },\n *     {\n *       token: \"'\",\n *       logprob: -0.01868736,\n *       bytes: [Array],\n *       top_logprobs: []\n *     },\n *     {\n *       token: 'ad',\n *       logprob: -0.0000030545007,\n *       bytes: [Array],\n *       top_logprobs: []\n *     },\n *     { token: 'ore', logprob: 0, bytes: [Array], top_logprobs: [] },\n *     {\n *       token: ' la',\n *       logprob: -0.515404,\n *       bytes: [Array],\n *       top_logprobs: []\n *     },\n *     {\n *       token: ' programm',\n *       logprob: -0.0000118755715,\n *       bytes: [Array],\n *       top_logprobs: []\n *     },\n *     { token: 'ation', logprob: 0, bytes: [Array], top_logprobs: [] },\n *     {\n *       token: '.',\n *       logprob: -0.0000037697225,\n *       bytes: [Array],\n *       top_logprobs: []\n *     }\n *   ],\n *   refusal: null\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Response Metadata</strong></summary>\n *\n * ```typescript\n * const aiMsgForResponseMetadata = await llm.invoke(input);\n * console.log(aiMsgForResponseMetadata.response_metadata);\n * ```\n *\n * ```txt\n * {\n *   tokenUsage: { completionTokens: 5, promptTokens: 28, totalTokens: 33 },\n *   finish_reason: 'stop',\n *   system_fingerprint: 'fp_3aa7262c27'\n * }\n * ```\n * </details>\n */\nexport class AzureChatOpenAI extends ChatOpenAI {\n  _llmType() {\n    return \"azure_openai\";\n  }\n  get lc_aliases() {\n    return {\n      ...super.lc_aliases,\n      openAIApiKey: \"openai_api_key\",\n      openAIApiVersion: \"openai_api_version\",\n      openAIBasePath: \"openai_api_base\",\n      deploymentName: \"deployment_name\",\n      azureOpenAIEndpoint: \"azure_endpoint\",\n      azureOpenAIApiVersion: \"openai_api_version\",\n      azureOpenAIBasePath: \"openai_api_base\",\n      azureOpenAIApiDeploymentName: \"deployment_name\"\n    };\n  }\n  get lc_secrets() {\n    return {\n      ...super.lc_secrets,\n      azureOpenAIApiKey: \"AZURE_OPENAI_API_KEY\"\n    };\n  }\n  constructor(fields) {\n    super(fields);\n    Object.defineProperty(this, \"azureOpenAIApiVersion\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"azureOpenAIApiKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"azureADTokenProvider\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"azureOpenAIApiInstanceName\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"azureOpenAIApiDeploymentName\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"azureOpenAIBasePath\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"azureOpenAIEndpoint\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.azureOpenAIApiKey = fields?.azureOpenAIApiKey ?? fields?.openAIApiKey ?? fields?.apiKey ?? getEnvironmentVariable(\"AZURE_OPENAI_API_KEY\");\n    this.azureOpenAIApiInstanceName = fields?.azureOpenAIApiInstanceName ?? getEnvironmentVariable(\"AZURE_OPENAI_API_INSTANCE_NAME\");\n    this.azureOpenAIApiDeploymentName = fields?.azureOpenAIApiDeploymentName ?? fields?.deploymentName ?? getEnvironmentVariable(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\");\n    this.azureOpenAIApiVersion = fields?.azureOpenAIApiVersion ?? fields?.openAIApiVersion ?? getEnvironmentVariable(\"AZURE_OPENAI_API_VERSION\");\n    this.azureOpenAIBasePath = fields?.azureOpenAIBasePath ?? getEnvironmentVariable(\"AZURE_OPENAI_BASE_PATH\");\n    this.azureOpenAIEndpoint = fields?.azureOpenAIEndpoint ?? getEnvironmentVariable(\"AZURE_OPENAI_ENDPOINT\");\n    this.azureADTokenProvider = fields?.azureADTokenProvider;\n    if (!this.azureOpenAIApiKey && !this.apiKey && !this.azureADTokenProvider) {\n      throw new Error(\"Azure OpenAI API key or Token Provider not found\");\n    }\n  }\n  getLsParams(options) {\n    const params = super.getLsParams(options);\n    params.ls_provider = \"azure\";\n    return params;\n  }\n  _getClientOptions(options) {\n    if (!this.client) {\n      const openAIEndpointConfig = {\n        azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n        azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n        azureOpenAIApiKey: this.azureOpenAIApiKey,\n        azureOpenAIBasePath: this.azureOpenAIBasePath,\n        azureADTokenProvider: this.azureADTokenProvider,\n        baseURL: this.clientConfig.baseURL,\n        azureOpenAIEndpoint: this.azureOpenAIEndpoint\n      };\n      const endpoint = getEndpoint(openAIEndpointConfig);\n      const params = {\n        ...this.clientConfig,\n        baseURL: endpoint,\n        timeout: this.timeout,\n        maxRetries: 0\n      };\n      if (!this.azureADTokenProvider) {\n        params.apiKey = openAIEndpointConfig.azureOpenAIApiKey;\n      }\n      if (!params.baseURL) {\n        delete params.baseURL;\n      }\n      params.defaultHeaders = {\n        ...params.defaultHeaders,\n        \"User-Agent\": params.defaultHeaders?.[\"User-Agent\"] ? `${params.defaultHeaders[\"User-Agent\"]}: langchainjs-azure-openai-v2` : `langchainjs-azure-openai-v2`\n      };\n      this.client = new AzureOpenAIClient({\n        apiVersion: this.azureOpenAIApiVersion,\n        azureADTokenProvider: this.azureADTokenProvider,\n        deployment: this.azureOpenAIApiDeploymentName,\n        ...params\n      });\n    }\n    const requestOptions = {\n      ...this.clientConfig,\n      ...options\n    };\n    if (this.azureOpenAIApiKey) {\n      requestOptions.headers = {\n        \"api-key\": this.azureOpenAIApiKey,\n        ...requestOptions.headers\n      };\n      requestOptions.query = {\n        \"api-version\": this.azureOpenAIApiVersion,\n        ...requestOptions.query\n      };\n    }\n    return requestOptions;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  toJSON() {\n    const json = super.toJSON();\n    function isRecord(obj) {\n      return typeof obj === \"object\" && obj != null;\n    }\n    if (isRecord(json) && isRecord(json.kwargs)) {\n      delete json.kwargs.azure_openai_base_path;\n      delete json.kwargs.azure_openai_api_deployment_name;\n      delete json.kwargs.azure_openai_api_key;\n      delete json.kwargs.azure_openai_api_version;\n      delete json.kwargs.azure_open_ai_base_path;\n      if (!json.kwargs.azure_endpoint && this.azureOpenAIEndpoint) {\n        json.kwargs.azure_endpoint = this.azureOpenAIEndpoint;\n      }\n      if (!json.kwargs.azure_endpoint && this.azureOpenAIBasePath) {\n        const parts = this.azureOpenAIBasePath.split(\"/openai/deployments/\");\n        if (parts.length === 2 && parts[0].startsWith(\"http\")) {\n          const [endpoint] = parts;\n          json.kwargs.azure_endpoint = endpoint;\n        }\n      }\n      if (!json.kwargs.azure_endpoint && this.azureOpenAIApiInstanceName) {\n        json.kwargs.azure_endpoint = `https://${this.azureOpenAIApiInstanceName}.openai.azure.com/`;\n      }\n      if (!json.kwargs.deployment_name && this.azureOpenAIApiDeploymentName) {\n        json.kwargs.deployment_name = this.azureOpenAIApiDeploymentName;\n      }\n      if (!json.kwargs.deployment_name && this.azureOpenAIBasePath) {\n        const parts = this.azureOpenAIBasePath.split(\"/openai/deployments/\");\n        if (parts.length === 2) {\n          const [, deployment] = parts;\n          json.kwargs.deployment_name = deployment;\n        }\n      }\n      if (json.kwargs.azure_endpoint && json.kwargs.deployment_name && json.kwargs.openai_api_base) {\n        delete json.kwargs.openai_api_base;\n      }\n      if (json.kwargs.azure_openai_api_instance_name && json.kwargs.azure_endpoint) {\n        delete json.kwargs.azure_openai_api_instance_name;\n      }\n    }\n    return json;\n  }\n  withStructuredOutput(outputSchema, config) {\n    const ensuredConfig = {\n      ...config\n    };\n    // Not all Azure gpt-4o deployments models support jsonSchema yet\n    if (this.model.startsWith(\"gpt-4o\")) {\n      if (ensuredConfig?.method === undefined) {\n        ensuredConfig.method = \"functionCalling\";\n      }\n    }\n    return super.withStructuredOutput(outputSchema, ensuredConfig);\n  }\n}","map":{"version":3,"names":["AzureOpenAI","AzureOpenAIClient","getEnvironmentVariable","ChatOpenAI","getEndpoint","AzureChatOpenAI","_llmType","lc_aliases","openAIApiKey","openAIApiVersion","openAIBasePath","deploymentName","azureOpenAIEndpoint","azureOpenAIApiVersion","azureOpenAIBasePath","azureOpenAIApiDeploymentName","lc_secrets","azureOpenAIApiKey","constructor","fields","Object","defineProperty","enumerable","configurable","writable","value","apiKey","azureOpenAIApiInstanceName","azureADTokenProvider","Error","getLsParams","options","params","ls_provider","_getClientOptions","client","openAIEndpointConfig","baseURL","clientConfig","endpoint","timeout","maxRetries","defaultHeaders","apiVersion","deployment","requestOptions","headers","query","toJSON","json","isRecord","obj","kwargs","azure_openai_base_path","azure_openai_api_deployment_name","azure_openai_api_key","azure_openai_api_version","azure_open_ai_base_path","azure_endpoint","parts","split","length","startsWith","deployment_name","openai_api_base","azure_openai_api_instance_name","withStructuredOutput","outputSchema","config","ensuredConfig","model","method","undefined"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/@langchain/openai/dist/azure/chat_models.js"],"sourcesContent":["import { AzureOpenAI as AzureOpenAIClient } from \"openai\";\nimport { getEnvironmentVariable } from \"@langchain/core/utils/env\";\nimport { ChatOpenAI, } from \"../chat_models.js\";\nimport { getEndpoint } from \"../utils/azure.js\";\n/**\n * Azure OpenAI chat model integration.\n *\n * Setup:\n * Install `@langchain/openai` and set the following environment variables:\n *\n * ```bash\n * npm install @langchain/openai\n * export AZURE_OPENAI_API_KEY=\"your-api-key\"\n * export AZURE_OPENAI_API_DEPLOYMENT_NAME=\"your-deployment-name\"\n * export AZURE_OPENAI_API_VERSION=\"your-version\"\n * export AZURE_OPENAI_BASE_PATH=\"your-base-path\"\n * ```\n *\n * ## [Constructor args](https://api.js.langchain.com/classes/langchain_openai.AzureChatOpenAI.html#constructor)\n *\n * ## [Runtime args](https://api.js.langchain.com/interfaces/langchain_openai.ChatOpenAICallOptions.html)\n *\n * Runtime args can be passed as the second argument to any of the base runnable methods `.invoke`. `.stream`, `.batch`, etc.\n * They can also be passed via `.bind`, or the second arg in `.bindTools`, like shown in the examples below:\n *\n * ```typescript\n * // When calling `.bind`, call options should be passed via the first argument\n * const llmWithArgsBound = llm.bind({\n *   stop: [\"\\n\"],\n *   tools: [...],\n * });\n *\n * // When calling `.bindTools`, call options should be passed via the second argument\n * const llmWithTools = llm.bindTools(\n *   [...],\n *   {\n *     tool_choice: \"auto\",\n *   }\n * );\n * ```\n *\n * ## Examples\n *\n * <details open>\n * <summary><strong>Instantiate</strong></summary>\n *\n * ```typescript\n * import { AzureChatOpenAI } from '@langchain/openai';\n *\n * const llm = new AzureChatOpenAI({\n *   azureOpenAIApiKey: process.env.AZURE_OPENAI_API_KEY, // In Node.js defaults to process.env.AZURE_OPENAI_API_KEY\n *   azureOpenAIApiInstanceName: process.env.AZURE_OPENAI_API_INSTANCE_NAME, // In Node.js defaults to process.env.AZURE_OPENAI_API_INSTANCE_NAME\n *   azureOpenAIApiDeploymentName: process.env.AZURE_OPENAI_API_DEPLOYMENT_NAME, // In Node.js defaults to process.env.AZURE_OPENAI_API_DEPLOYMENT_NAME\n *   azureOpenAIApiVersion: process.env.AZURE_OPENAI_API_VERSION, // In Node.js defaults to process.env.AZURE_OPENAI_API_VERSION\n *   temperature: 0,\n *   maxTokens: undefined,\n *   timeout: undefined,\n *   maxRetries: 2,\n *   // apiKey: \"...\",\n *   // baseUrl: \"...\",\n *   // other params...\n * });\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Invoking</strong></summary>\n *\n * ```typescript\n * const input = `Translate \"I love programming\" into French.`;\n *\n * // Models also accept a list of chat messages or a formatted prompt\n * const result = await llm.invoke(input);\n * console.log(result);\n * ```\n *\n * ```txt\n * AIMessage {\n *   \"id\": \"chatcmpl-9u4Mpu44CbPjwYFkTbeoZgvzB00Tz\",\n *   \"content\": \"J'adore la programmation.\",\n *   \"response_metadata\": {\n *     \"tokenUsage\": {\n *       \"completionTokens\": 5,\n *       \"promptTokens\": 28,\n *       \"totalTokens\": 33\n *     },\n *     \"finish_reason\": \"stop\",\n *     \"system_fingerprint\": \"fp_3aa7262c27\"\n *   },\n *   \"usage_metadata\": {\n *     \"input_tokens\": 28,\n *     \"output_tokens\": 5,\n *     \"total_tokens\": 33\n *   }\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Streaming Chunks</strong></summary>\n *\n * ```typescript\n * for await (const chunk of await llm.stream(input)) {\n *   console.log(chunk);\n * }\n * ```\n *\n * ```txt\n * AIMessageChunk {\n *   \"id\": \"chatcmpl-9u4NWB7yUeHCKdLr6jP3HpaOYHTqs\",\n *   \"content\": \"\"\n * }\n * AIMessageChunk {\n *   \"content\": \"J\"\n * }\n * AIMessageChunk {\n *   \"content\": \"'adore\"\n * }\n * AIMessageChunk {\n *   \"content\": \" la\"\n * }\n * AIMessageChunk {\n *   \"content\": \" programmation\",,\n * }\n * AIMessageChunk {\n *   \"content\": \".\",,\n * }\n * AIMessageChunk {\n *   \"content\": \"\",\n *   \"response_metadata\": {\n *     \"finish_reason\": \"stop\",\n *     \"system_fingerprint\": \"fp_c9aa9c0491\"\n *   },\n * }\n * AIMessageChunk {\n *   \"content\": \"\",\n *   \"usage_metadata\": {\n *     \"input_tokens\": 28,\n *     \"output_tokens\": 5,\n *     \"total_tokens\": 33\n *   }\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Aggregate Streamed Chunks</strong></summary>\n *\n * ```typescript\n * import { AIMessageChunk } from '@langchain/core/messages';\n * import { concat } from '@langchain/core/utils/stream';\n *\n * const stream = await llm.stream(input);\n * let full: AIMessageChunk | undefined;\n * for await (const chunk of stream) {\n *   full = !full ? chunk : concat(full, chunk);\n * }\n * console.log(full);\n * ```\n *\n * ```txt\n * AIMessageChunk {\n *   \"id\": \"chatcmpl-9u4PnX6Fy7OmK46DASy0bH6cxn5Xu\",\n *   \"content\": \"J'adore la programmation.\",\n *   \"response_metadata\": {\n *     \"prompt\": 0,\n *     \"completion\": 0,\n *     \"finish_reason\": \"stop\",\n *   },\n *   \"usage_metadata\": {\n *     \"input_tokens\": 28,\n *     \"output_tokens\": 5,\n *     \"total_tokens\": 33\n *   }\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Bind tools</strong></summary>\n *\n * ```typescript\n * import { z } from 'zod';\n *\n * const GetWeather = {\n *   name: \"GetWeather\",\n *   description: \"Get the current weather in a given location\",\n *   schema: z.object({\n *     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\n *   }),\n * }\n *\n * const GetPopulation = {\n *   name: \"GetPopulation\",\n *   description: \"Get the current population in a given location\",\n *   schema: z.object({\n *     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\n *   }),\n * }\n *\n * const llmWithTools = llm.bindTools([GetWeather, GetPopulation]);\n * const aiMsg = await llmWithTools.invoke(\n *   \"Which city is hotter today and which is bigger: LA or NY?\"\n * );\n * console.log(aiMsg.tool_calls);\n * ```\n *\n * ```txt\n * [\n *   {\n *     name: 'GetWeather',\n *     args: { location: 'Los Angeles, CA' },\n *     type: 'tool_call',\n *     id: 'call_uPU4FiFzoKAtMxfmPnfQL6UK'\n *   },\n *   {\n *     name: 'GetWeather',\n *     args: { location: 'New York, NY' },\n *     type: 'tool_call',\n *     id: 'call_UNkEwuQsHrGYqgDQuH9nPAtX'\n *   },\n *   {\n *     name: 'GetPopulation',\n *     args: { location: 'Los Angeles, CA' },\n *     type: 'tool_call',\n *     id: 'call_kL3OXxaq9OjIKqRTpvjaCH14'\n *   },\n *   {\n *     name: 'GetPopulation',\n *     args: { location: 'New York, NY' },\n *     type: 'tool_call',\n *     id: 'call_s9KQB1UWj45LLGaEnjz0179q'\n *   }\n * ]\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Structured Output</strong></summary>\n *\n * ```typescript\n * import { z } from 'zod';\n *\n * const Joke = z.object({\n *   setup: z.string().describe(\"The setup of the joke\"),\n *   punchline: z.string().describe(\"The punchline to the joke\"),\n *   rating: z.number().nullable().describe(\"How funny the joke is, from 1 to 10\")\n * }).describe('Joke to tell user.');\n *\n * const structuredLlm = llm.withStructuredOutput(Joke, { name: \"Joke\" });\n * const jokeResult = await structuredLlm.invoke(\"Tell me a joke about cats\");\n * console.log(jokeResult);\n * ```\n *\n * ```txt\n * {\n *   setup: 'Why was the cat sitting on the computer?',\n *   punchline: 'Because it wanted to keep an eye on the mouse!',\n *   rating: 7\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>JSON Object Response Format</strong></summary>\n *\n * ```typescript\n * const jsonLlm = llm.bind({ response_format: { type: \"json_object\" } });\n * const jsonLlmAiMsg = await jsonLlm.invoke(\n *   \"Return a JSON object with key 'randomInts' and a value of 10 random ints in [0-99]\"\n * );\n * console.log(jsonLlmAiMsg.content);\n * ```\n *\n * ```txt\n * {\n *   \"randomInts\": [23, 87, 45, 12, 78, 34, 56, 90, 11, 67]\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Multimodal</strong></summary>\n *\n * ```typescript\n * import { HumanMessage } from '@langchain/core/messages';\n *\n * const imageUrl = \"https://example.com/image.jpg\";\n * const imageData = await fetch(imageUrl).then(res => res.arrayBuffer());\n * const base64Image = Buffer.from(imageData).toString('base64');\n *\n * const message = new HumanMessage({\n *   content: [\n *     { type: \"text\", text: \"describe the weather in this image\" },\n *     {\n *       type: \"image_url\",\n *       image_url: { url: `data:image/jpeg;base64,${base64Image}` },\n *     },\n *   ]\n * });\n *\n * const imageDescriptionAiMsg = await llm.invoke([message]);\n * console.log(imageDescriptionAiMsg.content);\n * ```\n *\n * ```txt\n * The weather in the image appears to be clear and sunny. The sky is mostly blue with a few scattered white clouds, indicating fair weather. The bright sunlight is casting shadows on the green, grassy hill, suggesting it is a pleasant day with good visibility. There are no signs of rain or stormy conditions.\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Usage Metadata</strong></summary>\n *\n * ```typescript\n * const aiMsgForMetadata = await llm.invoke(input);\n * console.log(aiMsgForMetadata.usage_metadata);\n * ```\n *\n * ```txt\n * { input_tokens: 28, output_tokens: 5, total_tokens: 33 }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Logprobs</strong></summary>\n *\n * ```typescript\n * const logprobsLlm = new ChatOpenAI({ logprobs: true });\n * const aiMsgForLogprobs = await logprobsLlm.invoke(input);\n * console.log(aiMsgForLogprobs.response_metadata.logprobs);\n * ```\n *\n * ```txt\n * {\n *   content: [\n *     {\n *       token: 'J',\n *       logprob: -0.000050616763,\n *       bytes: [Array],\n *       top_logprobs: []\n *     },\n *     {\n *       token: \"'\",\n *       logprob: -0.01868736,\n *       bytes: [Array],\n *       top_logprobs: []\n *     },\n *     {\n *       token: 'ad',\n *       logprob: -0.0000030545007,\n *       bytes: [Array],\n *       top_logprobs: []\n *     },\n *     { token: 'ore', logprob: 0, bytes: [Array], top_logprobs: [] },\n *     {\n *       token: ' la',\n *       logprob: -0.515404,\n *       bytes: [Array],\n *       top_logprobs: []\n *     },\n *     {\n *       token: ' programm',\n *       logprob: -0.0000118755715,\n *       bytes: [Array],\n *       top_logprobs: []\n *     },\n *     { token: 'ation', logprob: 0, bytes: [Array], top_logprobs: [] },\n *     {\n *       token: '.',\n *       logprob: -0.0000037697225,\n *       bytes: [Array],\n *       top_logprobs: []\n *     }\n *   ],\n *   refusal: null\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Response Metadata</strong></summary>\n *\n * ```typescript\n * const aiMsgForResponseMetadata = await llm.invoke(input);\n * console.log(aiMsgForResponseMetadata.response_metadata);\n * ```\n *\n * ```txt\n * {\n *   tokenUsage: { completionTokens: 5, promptTokens: 28, totalTokens: 33 },\n *   finish_reason: 'stop',\n *   system_fingerprint: 'fp_3aa7262c27'\n * }\n * ```\n * </details>\n */\nexport class AzureChatOpenAI extends ChatOpenAI {\n    _llmType() {\n        return \"azure_openai\";\n    }\n    get lc_aliases() {\n        return {\n            ...super.lc_aliases,\n            openAIApiKey: \"openai_api_key\",\n            openAIApiVersion: \"openai_api_version\",\n            openAIBasePath: \"openai_api_base\",\n            deploymentName: \"deployment_name\",\n            azureOpenAIEndpoint: \"azure_endpoint\",\n            azureOpenAIApiVersion: \"openai_api_version\",\n            azureOpenAIBasePath: \"openai_api_base\",\n            azureOpenAIApiDeploymentName: \"deployment_name\",\n        };\n    }\n    get lc_secrets() {\n        return {\n            ...super.lc_secrets,\n            azureOpenAIApiKey: \"AZURE_OPENAI_API_KEY\",\n        };\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"azureOpenAIApiVersion\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureADTokenProvider\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiInstanceName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiDeploymentName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIBasePath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIEndpoint\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.azureOpenAIApiKey =\n            fields?.azureOpenAIApiKey ??\n                fields?.openAIApiKey ??\n                fields?.apiKey ??\n                getEnvironmentVariable(\"AZURE_OPENAI_API_KEY\");\n        this.azureOpenAIApiInstanceName =\n            fields?.azureOpenAIApiInstanceName ??\n                getEnvironmentVariable(\"AZURE_OPENAI_API_INSTANCE_NAME\");\n        this.azureOpenAIApiDeploymentName =\n            fields?.azureOpenAIApiDeploymentName ??\n                fields?.deploymentName ??\n                getEnvironmentVariable(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\");\n        this.azureOpenAIApiVersion =\n            fields?.azureOpenAIApiVersion ??\n                fields?.openAIApiVersion ??\n                getEnvironmentVariable(\"AZURE_OPENAI_API_VERSION\");\n        this.azureOpenAIBasePath =\n            fields?.azureOpenAIBasePath ??\n                getEnvironmentVariable(\"AZURE_OPENAI_BASE_PATH\");\n        this.azureOpenAIEndpoint =\n            fields?.azureOpenAIEndpoint ??\n                getEnvironmentVariable(\"AZURE_OPENAI_ENDPOINT\");\n        this.azureADTokenProvider = fields?.azureADTokenProvider;\n        if (!this.azureOpenAIApiKey && !this.apiKey && !this.azureADTokenProvider) {\n            throw new Error(\"Azure OpenAI API key or Token Provider not found\");\n        }\n    }\n    getLsParams(options) {\n        const params = super.getLsParams(options);\n        params.ls_provider = \"azure\";\n        return params;\n    }\n    _getClientOptions(options) {\n        if (!this.client) {\n            const openAIEndpointConfig = {\n                azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n                azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n                azureOpenAIApiKey: this.azureOpenAIApiKey,\n                azureOpenAIBasePath: this.azureOpenAIBasePath,\n                azureADTokenProvider: this.azureADTokenProvider,\n                baseURL: this.clientConfig.baseURL,\n                azureOpenAIEndpoint: this.azureOpenAIEndpoint,\n            };\n            const endpoint = getEndpoint(openAIEndpointConfig);\n            const params = {\n                ...this.clientConfig,\n                baseURL: endpoint,\n                timeout: this.timeout,\n                maxRetries: 0,\n            };\n            if (!this.azureADTokenProvider) {\n                params.apiKey = openAIEndpointConfig.azureOpenAIApiKey;\n            }\n            if (!params.baseURL) {\n                delete params.baseURL;\n            }\n            params.defaultHeaders = {\n                ...params.defaultHeaders,\n                \"User-Agent\": params.defaultHeaders?.[\"User-Agent\"]\n                    ? `${params.defaultHeaders[\"User-Agent\"]}: langchainjs-azure-openai-v2`\n                    : `langchainjs-azure-openai-v2`,\n            };\n            this.client = new AzureOpenAIClient({\n                apiVersion: this.azureOpenAIApiVersion,\n                azureADTokenProvider: this.azureADTokenProvider,\n                deployment: this.azureOpenAIApiDeploymentName,\n                ...params,\n            });\n        }\n        const requestOptions = {\n            ...this.clientConfig,\n            ...options,\n        };\n        if (this.azureOpenAIApiKey) {\n            requestOptions.headers = {\n                \"api-key\": this.azureOpenAIApiKey,\n                ...requestOptions.headers,\n            };\n            requestOptions.query = {\n                \"api-version\": this.azureOpenAIApiVersion,\n                ...requestOptions.query,\n            };\n        }\n        return requestOptions;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    toJSON() {\n        const json = super.toJSON();\n        function isRecord(obj) {\n            return typeof obj === \"object\" && obj != null;\n        }\n        if (isRecord(json) && isRecord(json.kwargs)) {\n            delete json.kwargs.azure_openai_base_path;\n            delete json.kwargs.azure_openai_api_deployment_name;\n            delete json.kwargs.azure_openai_api_key;\n            delete json.kwargs.azure_openai_api_version;\n            delete json.kwargs.azure_open_ai_base_path;\n            if (!json.kwargs.azure_endpoint && this.azureOpenAIEndpoint) {\n                json.kwargs.azure_endpoint = this.azureOpenAIEndpoint;\n            }\n            if (!json.kwargs.azure_endpoint && this.azureOpenAIBasePath) {\n                const parts = this.azureOpenAIBasePath.split(\"/openai/deployments/\");\n                if (parts.length === 2 && parts[0].startsWith(\"http\")) {\n                    const [endpoint] = parts;\n                    json.kwargs.azure_endpoint = endpoint;\n                }\n            }\n            if (!json.kwargs.azure_endpoint && this.azureOpenAIApiInstanceName) {\n                json.kwargs.azure_endpoint = `https://${this.azureOpenAIApiInstanceName}.openai.azure.com/`;\n            }\n            if (!json.kwargs.deployment_name && this.azureOpenAIApiDeploymentName) {\n                json.kwargs.deployment_name = this.azureOpenAIApiDeploymentName;\n            }\n            if (!json.kwargs.deployment_name && this.azureOpenAIBasePath) {\n                const parts = this.azureOpenAIBasePath.split(\"/openai/deployments/\");\n                if (parts.length === 2) {\n                    const [, deployment] = parts;\n                    json.kwargs.deployment_name = deployment;\n                }\n            }\n            if (json.kwargs.azure_endpoint &&\n                json.kwargs.deployment_name &&\n                json.kwargs.openai_api_base) {\n                delete json.kwargs.openai_api_base;\n            }\n            if (json.kwargs.azure_openai_api_instance_name &&\n                json.kwargs.azure_endpoint) {\n                delete json.kwargs.azure_openai_api_instance_name;\n            }\n        }\n        return json;\n    }\n    withStructuredOutput(outputSchema, config) {\n        const ensuredConfig = { ...config };\n        // Not all Azure gpt-4o deployments models support jsonSchema yet\n        if (this.model.startsWith(\"gpt-4o\")) {\n            if (ensuredConfig?.method === undefined) {\n                ensuredConfig.method = \"functionCalling\";\n            }\n        }\n        return super.withStructuredOutput(outputSchema, ensuredConfig);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}