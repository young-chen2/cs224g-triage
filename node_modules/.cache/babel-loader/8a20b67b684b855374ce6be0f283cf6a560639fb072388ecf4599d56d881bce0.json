{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport PQueueMod from \"p-queue\";\nimport { getGlobalAsyncLocalStorageInstance } from \"./async_local_storage/globals.js\";\nlet queue;\n/**\n * Creates a queue using the p-queue library. The queue is configured to\n * auto-start and has a concurrency of 1, meaning it will process tasks\n * one at a time.\n */\nfunction createQueue() {\n  const PQueue = \"default\" in PQueueMod ? PQueueMod.default : PQueueMod;\n  return new PQueue({\n    autoStart: true,\n    concurrency: 1\n  });\n}\nexport function getQueue() {\n  if (typeof queue === \"undefined\") {\n    queue = createQueue();\n  }\n  return queue;\n}\n/**\n * Consume a promise, either adding it to the queue or waiting for it to resolve\n * @param promiseFn Promise to consume\n * @param wait Whether to wait for the promise to resolve or resolve immediately\n */\nexport async function consumeCallback(promiseFn, wait) {\n  if (wait === true) {\n    // Clear config since callbacks are not part of the root run\n    // Avoid using global singleton due to circuluar dependency issues\n    const asyncLocalStorageInstance = getGlobalAsyncLocalStorageInstance();\n    if (asyncLocalStorageInstance !== undefined) {\n      await asyncLocalStorageInstance.run(undefined, async () => promiseFn());\n    } else {\n      await promiseFn();\n    }\n  } else {\n    queue = getQueue();\n    void queue.add(async () => {\n      const asyncLocalStorageInstance = getGlobalAsyncLocalStorageInstance();\n      if (asyncLocalStorageInstance !== undefined) {\n        await asyncLocalStorageInstance.run(undefined, async () => promiseFn());\n      } else {\n        await promiseFn();\n      }\n    });\n  }\n}\n/**\n * Waits for all promises in the queue to resolve. If the queue is\n * undefined, it immediately resolves a promise.\n */\nexport function awaitAllCallbacks() {\n  return typeof queue !== \"undefined\" ? queue.onIdle() : Promise.resolve();\n}","map":{"version":3,"names":["PQueueMod","getGlobalAsyncLocalStorageInstance","queue","createQueue","PQueue","default","autoStart","concurrency","getQueue","consumeCallback","promiseFn","wait","asyncLocalStorageInstance","undefined","run","add","awaitAllCallbacks","onIdle","Promise","resolve"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/@langchain/core/dist/singletons/callbacks.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport PQueueMod from \"p-queue\";\nimport { getGlobalAsyncLocalStorageInstance } from \"./async_local_storage/globals.js\";\nlet queue;\n/**\n * Creates a queue using the p-queue library. The queue is configured to\n * auto-start and has a concurrency of 1, meaning it will process tasks\n * one at a time.\n */\nfunction createQueue() {\n    const PQueue = \"default\" in PQueueMod ? PQueueMod.default : PQueueMod;\n    return new PQueue({\n        autoStart: true,\n        concurrency: 1,\n    });\n}\nexport function getQueue() {\n    if (typeof queue === \"undefined\") {\n        queue = createQueue();\n    }\n    return queue;\n}\n/**\n * Consume a promise, either adding it to the queue or waiting for it to resolve\n * @param promiseFn Promise to consume\n * @param wait Whether to wait for the promise to resolve or resolve immediately\n */\nexport async function consumeCallback(promiseFn, wait) {\n    if (wait === true) {\n        // Clear config since callbacks are not part of the root run\n        // Avoid using global singleton due to circuluar dependency issues\n        const asyncLocalStorageInstance = getGlobalAsyncLocalStorageInstance();\n        if (asyncLocalStorageInstance !== undefined) {\n            await asyncLocalStorageInstance.run(undefined, async () => promiseFn());\n        }\n        else {\n            await promiseFn();\n        }\n    }\n    else {\n        queue = getQueue();\n        void queue.add(async () => {\n            const asyncLocalStorageInstance = getGlobalAsyncLocalStorageInstance();\n            if (asyncLocalStorageInstance !== undefined) {\n                await asyncLocalStorageInstance.run(undefined, async () => promiseFn());\n            }\n            else {\n                await promiseFn();\n            }\n        });\n    }\n}\n/**\n * Waits for all promises in the queue to resolve. If the queue is\n * undefined, it immediately resolves a promise.\n */\nexport function awaitAllCallbacks() {\n    return typeof queue !== \"undefined\" ? queue.onIdle() : Promise.resolve();\n}\n"],"mappings":"AAAA;AACA,OAAOA,SAAS,MAAM,SAAS;AAC/B,SAASC,kCAAkC,QAAQ,kCAAkC;AACrF,IAAIC,KAAK;AACT;AACA;AACA;AACA;AACA;AACA,SAASC,WAAWA,CAAA,EAAG;EACnB,MAAMC,MAAM,GAAG,SAAS,IAAIJ,SAAS,GAAGA,SAAS,CAACK,OAAO,GAAGL,SAAS;EACrE,OAAO,IAAII,MAAM,CAAC;IACdE,SAAS,EAAE,IAAI;IACfC,WAAW,EAAE;EACjB,CAAC,CAAC;AACN;AACA,OAAO,SAASC,QAAQA,CAAA,EAAG;EACvB,IAAI,OAAON,KAAK,KAAK,WAAW,EAAE;IAC9BA,KAAK,GAAGC,WAAW,CAAC,CAAC;EACzB;EACA,OAAOD,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeO,eAAeA,CAACC,SAAS,EAAEC,IAAI,EAAE;EACnD,IAAIA,IAAI,KAAK,IAAI,EAAE;IACf;IACA;IACA,MAAMC,yBAAyB,GAAGX,kCAAkC,CAAC,CAAC;IACtE,IAAIW,yBAAyB,KAAKC,SAAS,EAAE;MACzC,MAAMD,yBAAyB,CAACE,GAAG,CAACD,SAAS,EAAE,YAAYH,SAAS,CAAC,CAAC,CAAC;IAC3E,CAAC,MACI;MACD,MAAMA,SAAS,CAAC,CAAC;IACrB;EACJ,CAAC,MACI;IACDR,KAAK,GAAGM,QAAQ,CAAC,CAAC;IAClB,KAAKN,KAAK,CAACa,GAAG,CAAC,YAAY;MACvB,MAAMH,yBAAyB,GAAGX,kCAAkC,CAAC,CAAC;MACtE,IAAIW,yBAAyB,KAAKC,SAAS,EAAE;QACzC,MAAMD,yBAAyB,CAACE,GAAG,CAACD,SAAS,EAAE,YAAYH,SAAS,CAAC,CAAC,CAAC;MAC3E,CAAC,MACI;QACD,MAAMA,SAAS,CAAC,CAAC;MACrB;IACJ,CAAC,CAAC;EACN;AACJ;AACA;AACA;AACA;AACA;AACA,OAAO,SAASM,iBAAiBA,CAAA,EAAG;EAChC,OAAO,OAAOd,KAAK,KAAK,WAAW,GAAGA,KAAK,CAACe,MAAM,CAAC,CAAC,GAAGC,OAAO,CAACC,OAAO,CAAC,CAAC;AAC5E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}