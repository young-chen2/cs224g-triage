{"ast":null,"code":"import { zodToJsonSchema } from \"zod-to-json-schema\";\nimport { Runnable } from \"../runnables/base.js\";\nimport { isZodSchema } from \"./types/is_zod_schema.js\";\n/**\n * Formats a `StructuredTool` or `RunnableToolLike` instance into a format\n * that is compatible with OpenAI function calling. It uses the `zodToJsonSchema`\n * function to convert the schema of the `StructuredTool` or `RunnableToolLike`\n * into a JSON schema, which is then used as the parameters for the OpenAI function.\n *\n * @param {StructuredToolInterface | RunnableToolLike} tool The tool to convert to an OpenAI function.\n * @returns {FunctionDefinition} The inputted tool in OpenAI function format.\n */\nexport function convertToOpenAIFunction(tool, fields) {\n  // @TODO 0.3.0 Remove the `number` typing\n  const fieldsCopy = typeof fields === \"number\" ? undefined : fields;\n  return {\n    name: tool.name,\n    description: tool.description,\n    parameters: zodToJsonSchema(tool.schema),\n    // Do not include the `strict` field if it is `undefined`.\n    ...(fieldsCopy?.strict !== undefined ? {\n      strict: fieldsCopy.strict\n    } : {})\n  };\n}\n/**\n * Formats a `StructuredTool` or `RunnableToolLike` instance into a\n * format that is compatible with OpenAI tool calling. It uses the\n * `zodToJsonSchema` function to convert the schema of the `StructuredTool`\n * or `RunnableToolLike` into a JSON schema, which is then used as the\n * parameters for the OpenAI tool.\n *\n * @param {StructuredToolInterface | Record<string, any> | RunnableToolLike} tool The tool to convert to an OpenAI tool.\n * @returns {ToolDefinition} The inputted tool in OpenAI tool format.\n */\nexport function convertToOpenAITool(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntool, fields) {\n  // @TODO 0.3.0 Remove the `number` typing\n  const fieldsCopy = typeof fields === \"number\" ? undefined : fields;\n  let toolDef;\n  if (isLangChainTool(tool)) {\n    toolDef = {\n      type: \"function\",\n      function: convertToOpenAIFunction(tool)\n    };\n  } else {\n    toolDef = tool;\n  }\n  if (fieldsCopy?.strict !== undefined) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    toolDef.function.strict = fieldsCopy.strict;\n  }\n  return toolDef;\n}\n/**\n * Confirm whether the inputted tool is an instance of `StructuredToolInterface`.\n *\n * @param {StructuredToolInterface | Record<string, any> | undefined} tool The tool to check if it is an instance of `StructuredToolInterface`.\n * @returns {tool is StructuredToolInterface} Whether the inputted tool is an instance of `StructuredToolInterface`.\n */\nexport function isStructuredTool(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntool) {\n  return tool !== undefined && Array.isArray(tool.lc_namespace);\n}\n/**\n * Confirm whether the inputted tool is an instance of `RunnableToolLike`.\n *\n * @param {unknown | undefined} tool The tool to check if it is an instance of `RunnableToolLike`.\n * @returns {tool is RunnableToolLike} Whether the inputted tool is an instance of `RunnableToolLike`.\n */\nexport function isRunnableToolLike(tool) {\n  return tool !== undefined && Runnable.isRunnable(tool) && \"lc_name\" in tool.constructor && typeof tool.constructor.lc_name === \"function\" && tool.constructor.lc_name() === \"RunnableToolLike\";\n}\n/**\n * Confirm whether or not the tool contains the necessary properties to be considered a `StructuredToolParams`.\n *\n * @param {unknown | undefined} tool The object to check if it is a `StructuredToolParams`.\n * @returns {tool is StructuredToolParams} Whether the inputted object is a `StructuredToolParams`.\n */\nexport function isStructuredToolParams(tool) {\n  return !!tool && typeof tool === \"object\" && \"name\" in tool && \"schema\" in tool &&\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  isZodSchema(tool.schema);\n}\n/**\n * Whether or not the tool is one of StructuredTool, RunnableTool or StructuredToolParams.\n * It returns `is StructuredToolParams` since that is the most minimal interface of the three,\n * while still containing the necessary properties to be passed to a LLM for tool calling.\n *\n * @param {unknown | undefined} tool The tool to check if it is a LangChain tool.\n * @returns {tool is StructuredToolParams} Whether the inputted tool is a LangChain tool.\n */\nexport function isLangChainTool(tool) {\n  return isStructuredToolParams(tool) || isRunnableToolLike(tool) ||\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  isStructuredTool(tool);\n}","map":{"version":3,"names":["zodToJsonSchema","Runnable","isZodSchema","convertToOpenAIFunction","tool","fields","fieldsCopy","undefined","name","description","parameters","schema","strict","convertToOpenAITool","toolDef","isLangChainTool","type","function","isStructuredTool","Array","isArray","lc_namespace","isRunnableToolLike","isRunnable","constructor","lc_name","isStructuredToolParams"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/@langchain/core/dist/utils/function_calling.js"],"sourcesContent":["import { zodToJsonSchema } from \"zod-to-json-schema\";\nimport { Runnable } from \"../runnables/base.js\";\nimport { isZodSchema } from \"./types/is_zod_schema.js\";\n/**\n * Formats a `StructuredTool` or `RunnableToolLike` instance into a format\n * that is compatible with OpenAI function calling. It uses the `zodToJsonSchema`\n * function to convert the schema of the `StructuredTool` or `RunnableToolLike`\n * into a JSON schema, which is then used as the parameters for the OpenAI function.\n *\n * @param {StructuredToolInterface | RunnableToolLike} tool The tool to convert to an OpenAI function.\n * @returns {FunctionDefinition} The inputted tool in OpenAI function format.\n */\nexport function convertToOpenAIFunction(tool, fields) {\n    // @TODO 0.3.0 Remove the `number` typing\n    const fieldsCopy = typeof fields === \"number\" ? undefined : fields;\n    return {\n        name: tool.name,\n        description: tool.description,\n        parameters: zodToJsonSchema(tool.schema),\n        // Do not include the `strict` field if it is `undefined`.\n        ...(fieldsCopy?.strict !== undefined ? { strict: fieldsCopy.strict } : {}),\n    };\n}\n/**\n * Formats a `StructuredTool` or `RunnableToolLike` instance into a\n * format that is compatible with OpenAI tool calling. It uses the\n * `zodToJsonSchema` function to convert the schema of the `StructuredTool`\n * or `RunnableToolLike` into a JSON schema, which is then used as the\n * parameters for the OpenAI tool.\n *\n * @param {StructuredToolInterface | Record<string, any> | RunnableToolLike} tool The tool to convert to an OpenAI tool.\n * @returns {ToolDefinition} The inputted tool in OpenAI tool format.\n */\nexport function convertToOpenAITool(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntool, fields) {\n    // @TODO 0.3.0 Remove the `number` typing\n    const fieldsCopy = typeof fields === \"number\" ? undefined : fields;\n    let toolDef;\n    if (isLangChainTool(tool)) {\n        toolDef = {\n            type: \"function\",\n            function: convertToOpenAIFunction(tool),\n        };\n    }\n    else {\n        toolDef = tool;\n    }\n    if (fieldsCopy?.strict !== undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        toolDef.function.strict = fieldsCopy.strict;\n    }\n    return toolDef;\n}\n/**\n * Confirm whether the inputted tool is an instance of `StructuredToolInterface`.\n *\n * @param {StructuredToolInterface | Record<string, any> | undefined} tool The tool to check if it is an instance of `StructuredToolInterface`.\n * @returns {tool is StructuredToolInterface} Whether the inputted tool is an instance of `StructuredToolInterface`.\n */\nexport function isStructuredTool(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntool) {\n    return (tool !== undefined &&\n        Array.isArray(tool.lc_namespace));\n}\n/**\n * Confirm whether the inputted tool is an instance of `RunnableToolLike`.\n *\n * @param {unknown | undefined} tool The tool to check if it is an instance of `RunnableToolLike`.\n * @returns {tool is RunnableToolLike} Whether the inputted tool is an instance of `RunnableToolLike`.\n */\nexport function isRunnableToolLike(tool) {\n    return (tool !== undefined &&\n        Runnable.isRunnable(tool) &&\n        \"lc_name\" in tool.constructor &&\n        typeof tool.constructor.lc_name === \"function\" &&\n        tool.constructor.lc_name() === \"RunnableToolLike\");\n}\n/**\n * Confirm whether or not the tool contains the necessary properties to be considered a `StructuredToolParams`.\n *\n * @param {unknown | undefined} tool The object to check if it is a `StructuredToolParams`.\n * @returns {tool is StructuredToolParams} Whether the inputted object is a `StructuredToolParams`.\n */\nexport function isStructuredToolParams(tool) {\n    return (!!tool &&\n        typeof tool === \"object\" &&\n        \"name\" in tool &&\n        \"schema\" in tool &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        isZodSchema(tool.schema));\n}\n/**\n * Whether or not the tool is one of StructuredTool, RunnableTool or StructuredToolParams.\n * It returns `is StructuredToolParams` since that is the most minimal interface of the three,\n * while still containing the necessary properties to be passed to a LLM for tool calling.\n *\n * @param {unknown | undefined} tool The tool to check if it is a LangChain tool.\n * @returns {tool is StructuredToolParams} Whether the inputted tool is a LangChain tool.\n */\nexport function isLangChainTool(tool) {\n    return (isStructuredToolParams(tool) ||\n        isRunnableToolLike(tool) ||\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        isStructuredTool(tool));\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,oBAAoB;AACpD,SAASC,QAAQ,QAAQ,sBAAsB;AAC/C,SAASC,WAAW,QAAQ,0BAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,uBAAuBA,CAACC,IAAI,EAAEC,MAAM,EAAE;EAClD;EACA,MAAMC,UAAU,GAAG,OAAOD,MAAM,KAAK,QAAQ,GAAGE,SAAS,GAAGF,MAAM;EAClE,OAAO;IACHG,IAAI,EAAEJ,IAAI,CAACI,IAAI;IACfC,WAAW,EAAEL,IAAI,CAACK,WAAW;IAC7BC,UAAU,EAAEV,eAAe,CAACI,IAAI,CAACO,MAAM,CAAC;IACxC;IACA,IAAIL,UAAU,EAAEM,MAAM,KAAKL,SAAS,GAAG;MAAEK,MAAM,EAAEN,UAAU,CAACM;IAAO,CAAC,GAAG,CAAC,CAAC;EAC7E,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,mBAAmBA;AACnC;AACAT,IAAI,EAAEC,MAAM,EAAE;EACV;EACA,MAAMC,UAAU,GAAG,OAAOD,MAAM,KAAK,QAAQ,GAAGE,SAAS,GAAGF,MAAM;EAClE,IAAIS,OAAO;EACX,IAAIC,eAAe,CAACX,IAAI,CAAC,EAAE;IACvBU,OAAO,GAAG;MACNE,IAAI,EAAE,UAAU;MAChBC,QAAQ,EAAEd,uBAAuB,CAACC,IAAI;IAC1C,CAAC;EACL,CAAC,MACI;IACDU,OAAO,GAAGV,IAAI;EAClB;EACA,IAAIE,UAAU,EAAEM,MAAM,KAAKL,SAAS,EAAE;IAClC;IACAO,OAAO,CAACG,QAAQ,CAACL,MAAM,GAAGN,UAAU,CAACM,MAAM;EAC/C;EACA,OAAOE,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,gBAAgBA;AAChC;AACAd,IAAI,EAAE;EACF,OAAQA,IAAI,KAAKG,SAAS,IACtBY,KAAK,CAACC,OAAO,CAAChB,IAAI,CAACiB,YAAY,CAAC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAAClB,IAAI,EAAE;EACrC,OAAQA,IAAI,KAAKG,SAAS,IACtBN,QAAQ,CAACsB,UAAU,CAACnB,IAAI,CAAC,IACzB,SAAS,IAAIA,IAAI,CAACoB,WAAW,IAC7B,OAAOpB,IAAI,CAACoB,WAAW,CAACC,OAAO,KAAK,UAAU,IAC9CrB,IAAI,CAACoB,WAAW,CAACC,OAAO,CAAC,CAAC,KAAK,kBAAkB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,sBAAsBA,CAACtB,IAAI,EAAE;EACzC,OAAQ,CAAC,CAACA,IAAI,IACV,OAAOA,IAAI,KAAK,QAAQ,IACxB,MAAM,IAAIA,IAAI,IACd,QAAQ,IAAIA,IAAI;EAChB;EACAF,WAAW,CAACE,IAAI,CAACO,MAAM,CAAC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,eAAeA,CAACX,IAAI,EAAE;EAClC,OAAQsB,sBAAsB,CAACtB,IAAI,CAAC,IAChCkB,kBAAkB,CAAClB,IAAI,CAAC;EACxB;EACAc,gBAAgB,CAACd,IAAI,CAAC;AAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}