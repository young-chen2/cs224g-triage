{"ast":null,"code":"import { OpenAI as OpenAIClient } from \"openai\";\nimport { getEnvironmentVariable } from \"@langchain/core/utils/env\";\nimport { Embeddings } from \"@langchain/core/embeddings\";\nimport { chunkArray } from \"@langchain/core/utils/chunk_array\";\nimport { getEndpoint } from \"./utils/azure.js\";\nimport { wrapOpenAIClientError } from \"./utils/openai.js\";\n/**\n * Class for generating embeddings using the OpenAI API.\n *\n * To use with Azure, import the `AzureOpenAIEmbeddings` class.\n *\n * @example\n * ```typescript\n * // Embed a query using OpenAIEmbeddings to generate embeddings for a given text\n * const model = new OpenAIEmbeddings();\n * const res = await model.embedQuery(\n *   \"What would be a good company name for a company that makes colorful socks?\",\n * );\n * console.log({ res });\n *\n * ```\n */\nexport class OpenAIEmbeddings extends Embeddings {\n  constructor(fields) {\n    const fieldsWithDefaults = {\n      maxConcurrency: 2,\n      ...fields\n    };\n    super(fieldsWithDefaults);\n    Object.defineProperty(this, \"model\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"text-embedding-ada-002\"\n    });\n    /** @deprecated Use \"model\" instead */\n    Object.defineProperty(this, \"modelName\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"batchSize\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 512\n    });\n    // TODO: Update to `false` on next minor release (see: https://github.com/langchain-ai/langchainjs/pull/3612)\n    Object.defineProperty(this, \"stripNewLines\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    /**\n     * The number of dimensions the resulting output embeddings should have.\n     * Only supported in `text-embedding-3` and later models.\n     */\n    Object.defineProperty(this, \"dimensions\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"timeout\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"organization\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"client\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"clientConfig\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    const apiKey = fieldsWithDefaults?.apiKey ?? fieldsWithDefaults?.openAIApiKey ?? getEnvironmentVariable(\"OPENAI_API_KEY\");\n    this.organization = fieldsWithDefaults?.configuration?.organization ?? getEnvironmentVariable(\"OPENAI_ORGANIZATION\");\n    this.model = fieldsWithDefaults?.model ?? fieldsWithDefaults?.modelName ?? this.model;\n    this.modelName = this.model;\n    this.batchSize = fieldsWithDefaults?.batchSize ?? this.batchSize;\n    this.stripNewLines = fieldsWithDefaults?.stripNewLines ?? this.stripNewLines;\n    this.timeout = fieldsWithDefaults?.timeout;\n    this.dimensions = fieldsWithDefaults?.dimensions;\n    this.clientConfig = {\n      apiKey,\n      organization: this.organization,\n      dangerouslyAllowBrowser: true,\n      ...fields?.configuration\n    };\n  }\n  /**\n   * Method to generate embeddings for an array of documents. Splits the\n   * documents into batches and makes requests to the OpenAI API to generate\n   * embeddings.\n   * @param texts Array of documents to generate embeddings for.\n   * @returns Promise that resolves to a 2D array of embeddings for each document.\n   */\n  async embedDocuments(texts) {\n    const batches = chunkArray(this.stripNewLines ? texts.map(t => t.replace(/\\n/g, \" \")) : texts, this.batchSize);\n    const batchRequests = batches.map(batch => {\n      const params = {\n        model: this.model,\n        input: batch\n      };\n      if (this.dimensions) {\n        params.dimensions = this.dimensions;\n      }\n      return this.embeddingWithRetry(params);\n    });\n    const batchResponses = await Promise.all(batchRequests);\n    const embeddings = [];\n    for (let i = 0; i < batchResponses.length; i += 1) {\n      const batch = batches[i];\n      const {\n        data: batchResponse\n      } = batchResponses[i];\n      for (let j = 0; j < batch.length; j += 1) {\n        embeddings.push(batchResponse[j].embedding);\n      }\n    }\n    return embeddings;\n  }\n  /**\n   * Method to generate an embedding for a single document. Calls the\n   * embeddingWithRetry method with the document as the input.\n   * @param text Document to generate an embedding for.\n   * @returns Promise that resolves to an embedding for the document.\n   */\n  async embedQuery(text) {\n    const params = {\n      model: this.model,\n      input: this.stripNewLines ? text.replace(/\\n/g, \" \") : text\n    };\n    if (this.dimensions) {\n      params.dimensions = this.dimensions;\n    }\n    const {\n      data\n    } = await this.embeddingWithRetry(params);\n    return data[0].embedding;\n  }\n  /**\n   * Private method to make a request to the OpenAI API to generate\n   * embeddings. Handles the retry logic and returns the response from the\n   * API.\n   * @param request Request to send to the OpenAI API.\n   * @returns Promise that resolves to the response from the API.\n   */\n  async embeddingWithRetry(request) {\n    if (!this.client) {\n      const openAIEndpointConfig = {\n        baseURL: this.clientConfig.baseURL\n      };\n      const endpoint = getEndpoint(openAIEndpointConfig);\n      const params = {\n        ...this.clientConfig,\n        baseURL: endpoint,\n        timeout: this.timeout,\n        maxRetries: 0\n      };\n      if (!params.baseURL) {\n        delete params.baseURL;\n      }\n      this.client = new OpenAIClient(params);\n    }\n    const requestOptions = {};\n    return this.caller.call(async () => {\n      try {\n        const res = await this.client.embeddings.create(request, requestOptions);\n        return res;\n      } catch (e) {\n        const error = wrapOpenAIClientError(e);\n        throw error;\n      }\n    });\n  }\n}","map":{"version":3,"names":["OpenAI","OpenAIClient","getEnvironmentVariable","Embeddings","chunkArray","getEndpoint","wrapOpenAIClientError","OpenAIEmbeddings","constructor","fields","fieldsWithDefaults","maxConcurrency","Object","defineProperty","enumerable","configurable","writable","value","apiKey","openAIApiKey","organization","configuration","model","modelName","batchSize","stripNewLines","timeout","dimensions","clientConfig","dangerouslyAllowBrowser","embedDocuments","texts","batches","map","t","replace","batchRequests","batch","params","input","embeddingWithRetry","batchResponses","Promise","all","embeddings","i","length","data","batchResponse","j","push","embedding","embedQuery","text","request","client","openAIEndpointConfig","baseURL","endpoint","maxRetries","requestOptions","caller","call","res","create","e","error"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/@langchain/openai/dist/embeddings.js"],"sourcesContent":["import { OpenAI as OpenAIClient } from \"openai\";\nimport { getEnvironmentVariable } from \"@langchain/core/utils/env\";\nimport { Embeddings } from \"@langchain/core/embeddings\";\nimport { chunkArray } from \"@langchain/core/utils/chunk_array\";\nimport { getEndpoint } from \"./utils/azure.js\";\nimport { wrapOpenAIClientError } from \"./utils/openai.js\";\n/**\n * Class for generating embeddings using the OpenAI API.\n *\n * To use with Azure, import the `AzureOpenAIEmbeddings` class.\n *\n * @example\n * ```typescript\n * // Embed a query using OpenAIEmbeddings to generate embeddings for a given text\n * const model = new OpenAIEmbeddings();\n * const res = await model.embedQuery(\n *   \"What would be a good company name for a company that makes colorful socks?\",\n * );\n * console.log({ res });\n *\n * ```\n */\nexport class OpenAIEmbeddings extends Embeddings {\n    constructor(fields) {\n        const fieldsWithDefaults = { maxConcurrency: 2, ...fields };\n        super(fieldsWithDefaults);\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"text-embedding-ada-002\"\n        });\n        /** @deprecated Use \"model\" instead */\n        Object.defineProperty(this, \"modelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"batchSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 512\n        });\n        // TODO: Update to `false` on next minor release (see: https://github.com/langchain-ai/langchainjs/pull/3612)\n        Object.defineProperty(this, \"stripNewLines\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        /**\n         * The number of dimensions the resulting output embeddings should have.\n         * Only supported in `text-embedding-3` and later models.\n         */\n        Object.defineProperty(this, \"dimensions\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"organization\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"clientConfig\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const apiKey = fieldsWithDefaults?.apiKey ??\n            fieldsWithDefaults?.openAIApiKey ??\n            getEnvironmentVariable(\"OPENAI_API_KEY\");\n        this.organization =\n            fieldsWithDefaults?.configuration?.organization ??\n                getEnvironmentVariable(\"OPENAI_ORGANIZATION\");\n        this.model =\n            fieldsWithDefaults?.model ?? fieldsWithDefaults?.modelName ?? this.model;\n        this.modelName = this.model;\n        this.batchSize = fieldsWithDefaults?.batchSize ?? this.batchSize;\n        this.stripNewLines =\n            fieldsWithDefaults?.stripNewLines ?? this.stripNewLines;\n        this.timeout = fieldsWithDefaults?.timeout;\n        this.dimensions = fieldsWithDefaults?.dimensions;\n        this.clientConfig = {\n            apiKey,\n            organization: this.organization,\n            dangerouslyAllowBrowser: true,\n            ...fields?.configuration,\n        };\n    }\n    /**\n     * Method to generate embeddings for an array of documents. Splits the\n     * documents into batches and makes requests to the OpenAI API to generate\n     * embeddings.\n     * @param texts Array of documents to generate embeddings for.\n     * @returns Promise that resolves to a 2D array of embeddings for each document.\n     */\n    async embedDocuments(texts) {\n        const batches = chunkArray(this.stripNewLines ? texts.map((t) => t.replace(/\\n/g, \" \")) : texts, this.batchSize);\n        const batchRequests = batches.map((batch) => {\n            const params = {\n                model: this.model,\n                input: batch,\n            };\n            if (this.dimensions) {\n                params.dimensions = this.dimensions;\n            }\n            return this.embeddingWithRetry(params);\n        });\n        const batchResponses = await Promise.all(batchRequests);\n        const embeddings = [];\n        for (let i = 0; i < batchResponses.length; i += 1) {\n            const batch = batches[i];\n            const { data: batchResponse } = batchResponses[i];\n            for (let j = 0; j < batch.length; j += 1) {\n                embeddings.push(batchResponse[j].embedding);\n            }\n        }\n        return embeddings;\n    }\n    /**\n     * Method to generate an embedding for a single document. Calls the\n     * embeddingWithRetry method with the document as the input.\n     * @param text Document to generate an embedding for.\n     * @returns Promise that resolves to an embedding for the document.\n     */\n    async embedQuery(text) {\n        const params = {\n            model: this.model,\n            input: this.stripNewLines ? text.replace(/\\n/g, \" \") : text,\n        };\n        if (this.dimensions) {\n            params.dimensions = this.dimensions;\n        }\n        const { data } = await this.embeddingWithRetry(params);\n        return data[0].embedding;\n    }\n    /**\n     * Private method to make a request to the OpenAI API to generate\n     * embeddings. Handles the retry logic and returns the response from the\n     * API.\n     * @param request Request to send to the OpenAI API.\n     * @returns Promise that resolves to the response from the API.\n     */\n    async embeddingWithRetry(request) {\n        if (!this.client) {\n            const openAIEndpointConfig = {\n                baseURL: this.clientConfig.baseURL,\n            };\n            const endpoint = getEndpoint(openAIEndpointConfig);\n            const params = {\n                ...this.clientConfig,\n                baseURL: endpoint,\n                timeout: this.timeout,\n                maxRetries: 0,\n            };\n            if (!params.baseURL) {\n                delete params.baseURL;\n            }\n            this.client = new OpenAIClient(params);\n        }\n        const requestOptions = {};\n        return this.caller.call(async () => {\n            try {\n                const res = await this.client.embeddings.create(request, requestOptions);\n                return res;\n            }\n            catch (e) {\n                const error = wrapOpenAIClientError(e);\n                throw error;\n            }\n        });\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}