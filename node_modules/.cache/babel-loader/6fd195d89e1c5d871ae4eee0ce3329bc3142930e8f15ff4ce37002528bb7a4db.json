{"ast":null,"code":"import { convertToOpenAIFunction, isLangChainTool } from \"@langchain/core/utils/function_calling\";\nimport { zodFunction } from \"openai/helpers/zod\";\n/**\n * Formats a tool in either OpenAI format, or LangChain structured tool format\n * into an OpenAI tool format. If the tool is already in OpenAI format, return without\n * any changes. If it is in LangChain structured tool format, convert it to OpenAI tool format\n * using OpenAI's `zodFunction` util, falling back to `convertToOpenAIFunction` if the parameters\n * returned from the `zodFunction` util are not defined.\n *\n * @param {BindToolsInput} tool The tool to convert to an OpenAI tool.\n * @param {Object} [fields] Additional fields to add to the OpenAI tool.\n * @returns {ToolDefinition} The inputted tool in OpenAI tool format.\n */\nexport function _convertToOpenAITool(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntool, fields) {\n  let toolDef;\n  if (isLangChainTool(tool)) {\n    const oaiToolDef = zodFunction({\n      name: tool.name,\n      parameters: tool.schema,\n      description: tool.description\n    });\n    if (!oaiToolDef.function.parameters) {\n      // Fallback to the `convertToOpenAIFunction` util if the parameters are not defined.\n      toolDef = {\n        type: \"function\",\n        function: convertToOpenAIFunction(tool, fields)\n      };\n    } else {\n      toolDef = {\n        type: oaiToolDef.type,\n        function: {\n          name: oaiToolDef.function.name,\n          description: oaiToolDef.function.description,\n          parameters: oaiToolDef.function.parameters,\n          ...(fields?.strict !== undefined ? {\n            strict: fields.strict\n          } : {})\n        }\n      };\n    }\n  } else {\n    toolDef = tool;\n  }\n  if (fields?.strict !== undefined) {\n    toolDef.function.strict = fields.strict;\n  }\n  return toolDef;\n}","map":{"version":3,"names":["convertToOpenAIFunction","isLangChainTool","zodFunction","_convertToOpenAITool","tool","fields","toolDef","oaiToolDef","name","parameters","schema","description","function","type","strict","undefined"],"sources":["/Users/youngchen/Downloads/cs224g-triage/node_modules/@langchain/openai/dist/utils/tools.js"],"sourcesContent":["import { convertToOpenAIFunction, isLangChainTool, } from \"@langchain/core/utils/function_calling\";\nimport { zodFunction } from \"openai/helpers/zod\";\n/**\n * Formats a tool in either OpenAI format, or LangChain structured tool format\n * into an OpenAI tool format. If the tool is already in OpenAI format, return without\n * any changes. If it is in LangChain structured tool format, convert it to OpenAI tool format\n * using OpenAI's `zodFunction` util, falling back to `convertToOpenAIFunction` if the parameters\n * returned from the `zodFunction` util are not defined.\n *\n * @param {BindToolsInput} tool The tool to convert to an OpenAI tool.\n * @param {Object} [fields] Additional fields to add to the OpenAI tool.\n * @returns {ToolDefinition} The inputted tool in OpenAI tool format.\n */\nexport function _convertToOpenAITool(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntool, fields) {\n    let toolDef;\n    if (isLangChainTool(tool)) {\n        const oaiToolDef = zodFunction({\n            name: tool.name,\n            parameters: tool.schema,\n            description: tool.description,\n        });\n        if (!oaiToolDef.function.parameters) {\n            // Fallback to the `convertToOpenAIFunction` util if the parameters are not defined.\n            toolDef = {\n                type: \"function\",\n                function: convertToOpenAIFunction(tool, fields),\n            };\n        }\n        else {\n            toolDef = {\n                type: oaiToolDef.type,\n                function: {\n                    name: oaiToolDef.function.name,\n                    description: oaiToolDef.function.description,\n                    parameters: oaiToolDef.function.parameters,\n                    ...(fields?.strict !== undefined ? { strict: fields.strict } : {}),\n                },\n            };\n        }\n    }\n    else {\n        toolDef = tool;\n    }\n    if (fields?.strict !== undefined) {\n        toolDef.function.strict = fields.strict;\n    }\n    return toolDef;\n}\n"],"mappings":"AAAA,SAASA,uBAAuB,EAAEC,eAAe,QAAS,wCAAwC;AAClG,SAASC,WAAW,QAAQ,oBAAoB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,oBAAoBA;AACpC;AACAC,IAAI,EAAEC,MAAM,EAAE;EACV,IAAIC,OAAO;EACX,IAAIL,eAAe,CAACG,IAAI,CAAC,EAAE;IACvB,MAAMG,UAAU,GAAGL,WAAW,CAAC;MAC3BM,IAAI,EAAEJ,IAAI,CAACI,IAAI;MACfC,UAAU,EAAEL,IAAI,CAACM,MAAM;MACvBC,WAAW,EAAEP,IAAI,CAACO;IACtB,CAAC,CAAC;IACF,IAAI,CAACJ,UAAU,CAACK,QAAQ,CAACH,UAAU,EAAE;MACjC;MACAH,OAAO,GAAG;QACNO,IAAI,EAAE,UAAU;QAChBD,QAAQ,EAAEZ,uBAAuB,CAACI,IAAI,EAAEC,MAAM;MAClD,CAAC;IACL,CAAC,MACI;MACDC,OAAO,GAAG;QACNO,IAAI,EAAEN,UAAU,CAACM,IAAI;QACrBD,QAAQ,EAAE;UACNJ,IAAI,EAAED,UAAU,CAACK,QAAQ,CAACJ,IAAI;UAC9BG,WAAW,EAAEJ,UAAU,CAACK,QAAQ,CAACD,WAAW;UAC5CF,UAAU,EAAEF,UAAU,CAACK,QAAQ,CAACH,UAAU;UAC1C,IAAIJ,MAAM,EAAES,MAAM,KAAKC,SAAS,GAAG;YAAED,MAAM,EAAET,MAAM,CAACS;UAAO,CAAC,GAAG,CAAC,CAAC;QACrE;MACJ,CAAC;IACL;EACJ,CAAC,MACI;IACDR,OAAO,GAAGF,IAAI;EAClB;EACA,IAAIC,MAAM,EAAES,MAAM,KAAKC,SAAS,EAAE;IAC9BT,OAAO,CAACM,QAAQ,CAACE,MAAM,GAAGT,MAAM,CAACS,MAAM;EAC3C;EACA,OAAOR,OAAO;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}